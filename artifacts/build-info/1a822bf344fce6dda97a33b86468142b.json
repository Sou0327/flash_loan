{"id":"1a822bf344fce6dda97a33b86468142b","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.7.0 <0.9.0;\n\ninterface IAuthentication {\n    /**\n     * @dev Returns the action identifier associated with the external function described by `selector`.\n     */\n    function getActionId(bytes4 selector) external view returns (bytes32);\n}\n"},"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @dev Interface for the SignatureValidator helper, used to support meta-transactions.\n */\ninterface ISignaturesValidator {\n    /**\n     * @dev Returns the EIP712 domain separator.\n     */\n    function getDomainSeparator() external view returns (bytes32);\n\n    /**\n     * @dev Returns the next nonce used by an address to sign messages.\n     */\n    function getNextNonce(address user) external view returns (uint256);\n}\n"},"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @dev Interface for the TemporarilyPausable helper.\n */\ninterface ITemporarilyPausable {\n    /**\n     * @dev Emitted every time the pause state changes by `_setPaused`.\n     */\n    event PausedStateChanged(bool paused);\n\n    /**\n     * @dev Returns the current paused state.\n     */\n    function getPausedState()\n        external\n        view\n        returns (\n            bool paused,\n            uint256 pauseWindowEndTime,\n            uint256 bufferPeriodEndTime\n        );\n}\n"},"@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"../openzeppelin/IERC20.sol\";\n\n/**\n * @dev Interface for WETH9.\n * See https://github.com/gnosis/canonical-weth/blob/0dd1ea3e295eef916d0c6223ec63141137d22d67/contracts/WETH9.sol\n */\ninterface IWETH is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256 amount) external;\n}\n"},"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\n * types.\n *\n * This concept is unrelated to a Pool's Asset Managers.\n */\ninterface IAsset {\n    // solhint-disable-previous-line no-empty-blocks\n}\n"},"@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.7.0 <0.9.0;\n\ninterface IAuthorizer {\n    /**\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\n     */\n    function canPerform(\n        bytes32 actionId,\n        address account,\n        address where\n    ) external view returns (bool);\n}\n"},"@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.7.0 <0.9.0;\n\n// Inspired by Aave Protocol's IFlashLoanReceiver.\n\nimport \"../solidity-utils/openzeppelin/IERC20.sol\";\n\ninterface IFlashLoanRecipient {\n    /**\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\n     *\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\n     * Vault, or else the entire flash loan will revert.\n     *\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\n     */\n    function receiveFlashLoan(\n        IERC20[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external;\n}\n"},"@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.7.0 <0.9.0;\npragma experimental ABIEncoderV2;\n\nimport \"../solidity-utils/openzeppelin/IERC20.sol\";\n\nimport \"./IVault.sol\";\nimport \"./IAuthorizer.sol\";\n\ninterface IProtocolFeesCollector {\n    event SwapFeePercentageChanged(uint256 newSwapFeePercentage);\n    event FlashLoanFeePercentageChanged(uint256 newFlashLoanFeePercentage);\n\n    function withdrawCollectedFees(\n        IERC20[] calldata tokens,\n        uint256[] calldata amounts,\n        address recipient\n    ) external;\n\n    function setSwapFeePercentage(uint256 newSwapFeePercentage) external;\n\n    function setFlashLoanFeePercentage(uint256 newFlashLoanFeePercentage) external;\n\n    function getSwapFeePercentage() external view returns (uint256);\n\n    function getFlashLoanFeePercentage() external view returns (uint256);\n\n    function getCollectedFeeAmounts(IERC20[] memory tokens) external view returns (uint256[] memory feeAmounts);\n\n    function getAuthorizer() external view returns (IAuthorizer);\n\n    function vault() external view returns (IVault);\n}\n"},"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma experimental ABIEncoderV2;\n\nimport \"../solidity-utils/openzeppelin/IERC20.sol\";\nimport \"../solidity-utils/helpers/IAuthentication.sol\";\nimport \"../solidity-utils/helpers/ISignaturesValidator.sol\";\nimport \"../solidity-utils/helpers/ITemporarilyPausable.sol\";\nimport \"../solidity-utils/misc/IWETH.sol\";\n\nimport \"./IAsset.sol\";\nimport \"./IAuthorizer.sol\";\nimport \"./IFlashLoanRecipient.sol\";\nimport \"./IProtocolFeesCollector.sol\";\n\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\n * don't override one of these declarations.\n */\ninterface IVault is ISignaturesValidator, ITemporarilyPausable, IAuthentication {\n    // Generalities about the Vault:\n    //\n    // - Whenever documentation refers to 'tokens', it strictly refers to ERC20-compliant token contracts. Tokens are\n    // transferred out of the Vault by calling the `IERC20.transfer` function, and transferred in by calling\n    // `IERC20.transferFrom`. In these cases, the sender must have previously allowed the Vault to use their tokens by\n    // calling `IERC20.approve`. The only deviation from the ERC20 standard that is supported is functions not returning\n    // a boolean value: in these scenarios, a non-reverting call is assumed to be successful.\n    //\n    // - All non-view functions in the Vault are non-reentrant: calling them while another one is mid-execution (e.g.\n    // while execution control is transferred to a token contract during a swap) will result in a revert. View\n    // functions can be called in a re-reentrant way, but doing so might cause them to return inconsistent results.\n    // Contracts calling view functions in the Vault must make sure the Vault has not already been entered.\n    //\n    // - View functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.\n\n    // Authorizer\n    //\n    // Some system actions are permissioned, like setting and collecting protocol fees. This permissioning system exists\n    // outside of the Vault in the Authorizer contract: the Vault simply calls the Authorizer to check if the caller\n    // can perform a given action.\n\n    /**\n     * @dev Returns the Vault's Authorizer.\n     */\n    function getAuthorizer() external view returns (IAuthorizer);\n\n    /**\n     * @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\n     *\n     * Emits an `AuthorizerChanged` event.\n     */\n    function setAuthorizer(IAuthorizer newAuthorizer) external;\n\n    /**\n     * @dev Emitted when a new authorizer is set by `setAuthorizer`.\n     */\n    event AuthorizerChanged(IAuthorizer indexed newAuthorizer);\n\n    // Relayers\n    //\n    // Additionally, it is possible for an account to perform certain actions on behalf of another one, using their\n    // Vault ERC20 allowance and Internal Balance. These accounts are said to be 'relayers' for these Vault functions,\n    // and are expected to be smart contracts with sound authentication mechanisms. For an account to be able to wield\n    // this power, two things must occur:\n    //  - The Authorizer must grant the account the permission to be a relayer for the relevant Vault function. This\n    //    means that Balancer governance must approve each individual contract to act as a relayer for the intended\n    //    functions.\n    //  - Each user must approve the relayer to act on their behalf.\n    // This double protection means users cannot be tricked into approving malicious relayers (because they will not\n    // have been allowed by the Authorizer via governance), nor can malicious relayers approved by a compromised\n    // Authorizer or governance drain user funds, since they would also need to be approved by each individual user.\n\n    /**\n     * @dev Returns true if `user` has approved `relayer` to act as a relayer for them.\n     */\n    function hasApprovedRelayer(address user, address relayer) external view returns (bool);\n\n    /**\n     * @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\n     *\n     * Emits a `RelayerApprovalChanged` event.\n     */\n    function setRelayerApproval(\n        address sender,\n        address relayer,\n        bool approved\n    ) external;\n\n    /**\n     * @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\n     */\n    event RelayerApprovalChanged(address indexed relayer, address indexed sender, bool approved);\n\n    // Internal Balance\n    //\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\n    //\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\n    // operations of different kinds, with different senders and recipients, at once.\n\n    /**\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\n     */\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\n\n    /**\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\n     * it lets integrators reuse a user's Vault allowance.\n     *\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\n     */\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\n\n    /**\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\n     without manual WETH wrapping or unwrapping.\n     */\n    struct UserBalanceOp {\n        UserBalanceOpKind kind;\n        IAsset asset;\n        uint256 amount;\n        address sender;\n        address payable recipient;\n    }\n\n    // There are four possible operations in `manageUserBalance`:\n    //\n    // - DEPOSIT_INTERNAL\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\n    //\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\n    // relevant for relayers).\n    //\n    // Emits an `InternalBalanceChanged` event.\n    //\n    //\n    // - WITHDRAW_INTERNAL\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\n    //\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\n    // it to the recipient as ETH.\n    //\n    // Emits an `InternalBalanceChanged` event.\n    //\n    //\n    // - TRANSFER_INTERNAL\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\n    //\n    // Reverts if the ETH sentinel value is passed.\n    //\n    // Emits an `InternalBalanceChanged` event.\n    //\n    //\n    // - TRANSFER_EXTERNAL\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\n    // relayers, as it lets them reuse a user's Vault allowance.\n    //\n    // Reverts if the ETH sentinel value is passed.\n    //\n    // Emits an `ExternalBalanceTransfer` event.\n\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\n\n    /**\n     * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\n     * interacting with Pools using Internal Balance.\n     *\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\n     * address.\n     */\n    event InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\n\n    /**\n     * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\n     */\n    event ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\n\n    // Pools\n    //\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\n    // functionality:\n    //\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\n    // which increase with the number of registered tokens.\n    //\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\n    // independent of the number of registered tokens.\n    //\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\n\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\n\n    /**\n     * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\n     * changed.\n     *\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\n     * depending on the chosen specialization setting. This contract is known as the Pool's contract.\n     *\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\n     * multiple Pools may share the same contract.\n     *\n     * Emits a `PoolRegistered` event.\n     */\n    function registerPool(PoolSpecialization specialization) external returns (bytes32);\n\n    /**\n     * @dev Emitted when a Pool is registered by calling `registerPool`.\n     */\n    event PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\n\n    /**\n     * @dev Returns a Pool's contract address and specialization setting.\n     */\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\n\n    /**\n     * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\n     *\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\n     * exit by receiving registered tokens, and can only swap registered tokens.\n     *\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\n     * ascending order.\n     *\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\n     * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\n     * Asset Manager should not be made lightly.\n     *\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\n     * different Asset Manager.\n     *\n     * Emits a `TokensRegistered` event.\n     */\n    function registerTokens(\n        bytes32 poolId,\n        IERC20[] memory tokens,\n        address[] memory assetManagers\n    ) external;\n\n    /**\n     * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\n     */\n    event TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\n\n    /**\n     * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\n     *\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\n     * must be deregistered in the same `deregisterTokens` call.\n     *\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\n     *\n     * Emits a `TokensDeregistered` event.\n     */\n    function deregisterTokens(bytes32 poolId, IERC20[] memory tokens) external;\n\n    /**\n     * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\n     */\n    event TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\n\n    /**\n     * @dev Returns detailed information for a Pool's registered token.\n     *\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\n     * equals the sum of `cash` and `managed`.\n     *\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\n     * `managed` or `total` balance to be greater than 2^112 - 1.\n     *\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\n     * change for this purpose, and will update `lastChangeBlock`.\n     *\n     * `assetManager` is the Pool's token Asset Manager.\n     */\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\n        external\n        view\n        returns (\n            uint256 cash,\n            uint256 managed,\n            uint256 lastChangeBlock,\n            address assetManager\n        );\n\n    /**\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\n     * the tokens' `balances` changed.\n     *\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\n     *\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\n     * order as passed to `registerTokens`.\n     *\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\n     * instead.\n     */\n    function getPoolTokens(bytes32 poolId)\n        external\n        view\n        returns (\n            IERC20[] memory tokens,\n            uint256[] memory balances,\n            uint256 lastChangeBlock\n        );\n\n    /**\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\n     * Pool shares.\n     *\n     * If the caller is not `sender`, it must be an authorized relayer for them.\n     *\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\n     * these maximums.\n     *\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\n     * back to the caller (not the sender, which is important for relayers).\n     *\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\n     *\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\n     *\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\n     * directly to the Pool's contract, as is `recipient`.\n     *\n     * Emits a `PoolBalanceChanged` event.\n     */\n    function joinPool(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        JoinPoolRequest memory request\n    ) external payable;\n\n    struct JoinPoolRequest {\n        IAsset[] assets;\n        uint256[] maxAmountsIn;\n        bytes userData;\n        bool fromInternalBalance;\n    }\n\n    /**\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\n     * `getPoolTokenInfo`).\n     *\n     * If the caller is not `sender`, it must be an authorized relayer for them.\n     *\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\n     * it just enforces these minimums.\n     *\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\n     *\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\n     *\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\n     * do so will trigger a revert.\n     *\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\n     * `tokens` array. This array must match the Pool's registered tokens.\n     *\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\n     * passed directly to the Pool's contract.\n     *\n     * Emits a `PoolBalanceChanged` event.\n     */\n    function exitPool(\n        bytes32 poolId,\n        address sender,\n        address payable recipient,\n        ExitPoolRequest memory request\n    ) external;\n\n    struct ExitPoolRequest {\n        IAsset[] assets;\n        uint256[] minAmountsOut;\n        bytes userData;\n        bool toInternalBalance;\n    }\n\n    /**\n     * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\n     */\n    event PoolBalanceChanged(\n        bytes32 indexed poolId,\n        address indexed liquidityProvider,\n        IERC20[] tokens,\n        int256[] deltas,\n        uint256[] protocolFeeAmounts\n    );\n\n    enum PoolBalanceChangeKind { JOIN, EXIT }\n\n    // Swaps\n    //\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\n    //\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\n    // individual swaps.\n    //\n    // There are two swap kinds:\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\n    //\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\n    // the final intended token.\n    //\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\n    // much less gas than they would otherwise.\n    //\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\n    // updating the Pool's internal accounting).\n    //\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\n    //\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\n    //\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\n    //\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\n\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\n\n    /**\n     * @dev Performs a swap with a single Pool.\n     *\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\n     * taken from the Pool, which must be greater than or equal to `limit`.\n     *\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\n     * sent to the Pool, which must be less than or equal to `limit`.\n     *\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\n     *\n     * Emits a `Swap` event.\n     */\n    function swap(\n        SingleSwap memory singleSwap,\n        FundManagement memory funds,\n        uint256 limit,\n        uint256 deadline\n    ) external payable returns (uint256);\n\n    /**\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\n     * the `kind` value.\n     *\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\n     *\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\n     * used to extend swap behavior.\n     */\n    struct SingleSwap {\n        bytes32 poolId;\n        SwapKind kind;\n        IAsset assetIn;\n        IAsset assetOut;\n        uint256 amount;\n        bytes userData;\n    }\n\n    /**\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\n     *\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\n     * the same index in the `assets` array.\n     *\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\n     * `amountOut` depending on the swap kind.\n     *\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\n     *\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\n     * or unwrapped from WETH by the Vault.\n     *\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\n     *\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\n     * equivalent `swap` call.\n     *\n     * Emits `Swap` events.\n     */\n    function batchSwap(\n        SwapKind kind,\n        BatchSwapStep[] memory swaps,\n        IAsset[] memory assets,\n        FundManagement memory funds,\n        int256[] memory limits,\n        uint256 deadline\n    ) external payable returns (int256[] memory);\n\n    /**\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\n     *\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\n     * from the previous swap, depending on the swap kind.\n     *\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\n     * used to extend swap behavior.\n     */\n    struct BatchSwapStep {\n        bytes32 poolId;\n        uint256 assetInIndex;\n        uint256 assetOutIndex;\n        uint256 amount;\n        bytes userData;\n    }\n\n    /**\n     * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\n     */\n    event Swap(\n        bytes32 indexed poolId,\n        IERC20 indexed tokenIn,\n        IERC20 indexed tokenOut,\n        uint256 amountIn,\n        uint256 amountOut\n    );\n\n    /**\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\n     * `recipient` account.\n     *\n     * If the caller is not `sender`, it must be an authorized relayer for them.\n     *\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\n     * `joinPool`.\n     *\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\n     * transferred. This matches the behavior of `exitPool`.\n     *\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\n     * revert.\n     */\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n\n    /**\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\n     *\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\n     * receives are the same that an equivalent `batchSwap` call would receive.\n     *\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\n     * approve them for the Vault, or even know a user's address.\n     *\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\n     * eth_call instead of eth_sendTransaction.\n     */\n    function queryBatchSwap(\n        SwapKind kind,\n        BatchSwapStep[] memory swaps,\n        IAsset[] memory assets,\n        FundManagement memory funds\n    ) external returns (int256[] memory assetDeltas);\n\n    // Flash Loans\n\n    /**\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\n     *\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\n     * for each token contract. `tokens` must be sorted in ascending order.\n     *\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\n     * `receiveFlashLoan` call.\n     *\n     * Emits `FlashLoan` events.\n     */\n    function flashLoan(\n        IFlashLoanRecipient recipient,\n        IERC20[] memory tokens,\n        uint256[] memory amounts,\n        bytes memory userData\n    ) external;\n\n    /**\n     * @dev Emitted for each individual flash loan performed by `flashLoan`.\n     */\n    event FlashLoan(IFlashLoanRecipient indexed recipient, IERC20 indexed token, uint256 amount, uint256 feeAmount);\n\n    // Asset Management\n    //\n    // Each token registered for a Pool can be assigned an Asset Manager, which is able to freely withdraw the Pool's\n    // tokens from the Vault, deposit them, or assign arbitrary values to its `managed` balance (see\n    // `getPoolTokenInfo`). This makes them extremely powerful and dangerous. Even if an Asset Manager only directly\n    // controls one of the tokens in a Pool, a malicious manager could set that token's balance to manipulate the\n    // prices of the other tokens, and then drain the Pool with swaps. The risk of using Asset Managers is therefore\n    // not constrained to the tokens they are managing, but extends to the entire Pool's holdings.\n    //\n    // However, a properly designed Asset Manager smart contract can be safely used for the Pool's benefit,\n    // for example by lending unused tokens out for interest, or using them to participate in voting protocols.\n    //\n    // This concept is unrelated to the IAsset interface.\n\n    /**\n     * @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\n     *\n     * Pool Balance management features batching, which means a single contract call can be used to perform multiple\n     * operations of different kinds, with different Pools and tokens, at once.\n     *\n     * For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\n     */\n    function managePoolBalance(PoolBalanceOp[] memory ops) external;\n\n    struct PoolBalanceOp {\n        PoolBalanceOpKind kind;\n        bytes32 poolId;\n        IERC20 token;\n        uint256 amount;\n    }\n\n    /**\n     * Withdrawals decrease the Pool's cash, but increase its managed balance, leaving the total balance unchanged.\n     *\n     * Deposits increase the Pool's cash, but decrease its managed balance, leaving the total balance unchanged.\n     *\n     * Updates don't affect the Pool's cash balance, but because the managed balance changes, it does alter the total.\n     * The external amount can be either increased or decreased by this call (i.e., reporting a gain or a loss).\n     */\n    enum PoolBalanceOpKind { WITHDRAW, DEPOSIT, UPDATE }\n\n    /**\n     * @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\n     */\n    event PoolBalanceManaged(\n        bytes32 indexed poolId,\n        address indexed assetManager,\n        IERC20 indexed token,\n        int256 cashDelta,\n        int256 managedDelta\n    );\n\n    // Protocol Fees\n    //\n    // Some operations cause the Vault to collect tokens in the form of protocol fees, which can then be withdrawn by\n    // permissioned accounts.\n    //\n    // There are two kinds of protocol fees:\n    //\n    //  - flash loan fees: charged on all flash loans, as a percentage of the amounts lent.\n    //\n    //  - swap fees: a percentage of the fees charged by Pools when performing swaps. For a number of reasons, including\n    // swap gas costs and interface simplicity, protocol swap fees are not charged on each individual swap. Rather,\n    // Pools are expected to keep track of how much they have charged in swap fees, and pay any outstanding debts to the\n    // Vault when they are joined or exited. This prevents users from joining a Pool with unpaid debt, as well as\n    // exiting a Pool in debt without first paying their share.\n\n    /**\n     * @dev Returns the current protocol fee module.\n     */\n    function getProtocolFeesCollector() external view returns (IProtocolFeesCollector);\n\n    /**\n     * @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\n     * error in some part of the system.\n     *\n     * The Vault can only be paused during an initial time period, after which pausing is forever disabled.\n     *\n     * While the contract is paused, the following features are disabled:\n     * - depositing and transferring internal balance\n     * - transferring external balance (using the Vault's allowance)\n     * - swaps\n     * - joining Pools\n     * - Asset Manager interactions\n     *\n     * Internal Balance can still be withdrawn, and Pools exited.\n     */\n    function setPaused(bool paused) external;\n\n    /**\n     * @dev Returns the Vault's WETH instance.\n     */\n    function WETH() external view returns (IWETH);\n    // solhint-disable-previous-line func-name-mixedcase\n}\n"},"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"},"contracts/BalancerFlashLoanArb.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol\";\nimport \"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\ncontract BalancerFlashLoanArb is IFlashLoanRecipient, Ownable, ReentrancyGuard {\n    IVault private immutable vault;\n\n    // 0x Protocol Permit2 Contract\n    address public constant PERMIT2_CONTRACT =\n        0x000000000022D473030F116dDEE9F6B43aC78BA3;\n\n    // イベント\n    event FlashLoanExecuted(\n        address indexed token,\n        uint256 amount,\n        uint256 feeAmount,\n        uint256 profit\n    );\n    event EmergencyWithdraw(address indexed token, uint256 amount);\n\n    // エラー定義\n    error Unauthorized();\n    error SwapFailed();\n    error InsufficientProfit();\n    error InvalidAmount();\n    error TransferFailed();\n\n    constructor(address _vault) Ownable(msg.sender) {\n        vault = IVault(_vault);\n    }\n\n    /// @notice フラッシュローンを実行\n    /// @param tokens 借りるトークンの配列（通常は1つのトークン）\n    /// @param amounts 借りる量の配列\n    /// @param swapData 0x Protocolのスワップデータ\n    function executeFlashLoan(\n        IERC20[] memory tokens,\n        uint256[] memory amounts,\n        bytes memory swapData\n    ) external onlyOwner nonReentrant {\n        require(tokens.length == amounts.length, \"Array length mismatch\");\n        require(tokens.length > 0, \"Empty arrays\");\n\n        // Balancerのフラッシュローンを実行\n        vault.flashLoan(this, tokens, amounts, swapData);\n    }\n\n    /// @notice Balancerが呼び出すコールバック関数\n    function receiveFlashLoan(\n        IERC20[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external override {\n        // Balancer Vaultからの呼び出しのみ許可\n        if (msg.sender != address(vault)) revert Unauthorized();\n\n        // 単一トークンのアービトラージを想定\n        IERC20 token = tokens[0];\n        uint256 amount = amounts[0];\n        uint256 feeAmount = feeAmounts[0];\n\n        // 借入前の残高\n        uint256 balanceBefore = token.balanceOf(address(this));\n\n        // Permit2への承認（0x Protocolで使用）\n        require(token.approve(PERMIT2_CONTRACT, amount), \"Approval failed\");\n\n        // 0x Protocolでスワップ実行（userData = swapData）\n        // userDataには0x Protocol APIから取得したtransaction.dataとtoアドレスが含まれる\n        // 実際の実装では、transaction.toアドレスに対してcallを実行する必要がある\n        // 簡略化のため、ここではPermit2コントラクトを直接呼び出す\n        (bool success, ) = PERMIT2_CONTRACT.call(userData);\n        if (!success) revert SwapFailed();\n\n        // スワップ後の残高\n        uint256 balanceAfter = token.balanceOf(address(this));\n\n        // 返済額（Balancerは手数料無料）\n        uint256 amountToRepay = amount;\n\n        // 利益があることを確認\n        // Balancerは手数料無料なので、借入額以上の残高があれば利益\n        if (balanceAfter <= amount) revert InsufficientProfit();\n\n        // Balancer Vaultへ返済\n        require(token.transfer(address(vault), amount), \"Transfer failed\");\n\n        // 利益を計算してイベントを発行\n        uint256 profit = balanceAfter - amount;\n        emit FlashLoanExecuted(address(token), amount, 0, profit);\n    }\n\n    /// @notice トークンを引き出す\n    /// @param tokenAddress 引き出すトークンのアドレス（0x0でETH）\n    function withdraw(address tokenAddress) external onlyOwner {\n        if (tokenAddress == address(0)) {\n            // ETHの引き出し\n            uint256 balance = address(this).balance;\n            require(balance > 0, \"No ETH balance\");\n            (bool success, ) = owner().call{value: balance}(\"\");\n            if (!success) revert TransferFailed();\n            emit EmergencyWithdraw(address(0), balance);\n        } else {\n            // ERC20の引き出し\n            IERC20 token = IERC20(tokenAddress);\n            uint256 balance = token.balanceOf(address(this));\n            require(balance > 0, \"No token balance\");\n            require(token.transfer(owner(), balance), \"Transfer failed\");\n            emit EmergencyWithdraw(tokenAddress, balance);\n        }\n    }\n\n    /// @notice 複数トークンの一括引き出し\n    /// @param tokens トークンアドレスの配列\n    function emergencyWithdrawMultiple(\n        address[] calldata tokens\n    ) external onlyOwner {\n        for (uint256 i = 0; i < tokens.length; i++) {\n            try this.withdraw(tokens[i]) {} catch {}\n        }\n    }\n\n    /// @notice ETHを受け取れるようにする\n    receive() external payable {}\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"],"":["ast"]}}}},"output":{"errors":[{"component":"general","errorCode":"2072","formattedMessage":"Warning: Unused local variable.\n  --> contracts/BalancerFlashLoanArb.sol:66:9:\n   |\n66 |         uint256 feeAmount = feeAmounts[0];\n   |         ^^^^^^^^^^^^^^^^^\n\n","message":"Unused local variable.","severity":"warning","sourceLocation":{"end":2339,"file":"contracts/BalancerFlashLoanArb.sol","start":2322},"type":"Warning"},{"component":"general","errorCode":"2072","formattedMessage":"Warning: Unused local variable.\n  --> contracts/BalancerFlashLoanArb.sol:69:9:\n   |\n69 |         uint256 balanceBefore = token.balanceOf(address(this));\n   |         ^^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unused local variable.","severity":"warning","sourceLocation":{"end":2417,"file":"contracts/BalancerFlashLoanArb.sol","start":2396},"type":"Warning"},{"component":"general","errorCode":"2072","formattedMessage":"Warning: Unused local variable.\n  --> contracts/BalancerFlashLoanArb.sol:85:9:\n   |\n85 |         uint256 amountToRepay = amount;\n   |         ^^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unused local variable.","severity":"warning","sourceLocation":{"end":3249,"file":"contracts/BalancerFlashLoanArb.sol","start":3228},"type":"Warning"}],"sources":{"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol":{"ast":{"absolutePath":"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol","exportedSymbols":{"IAuthentication":[10]},"id":11,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"688:31:0"},{"abstract":false,"baseContracts":[],"canonicalName":"IAuthentication","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":10,"linearizedBaseContracts":[10],"name":"IAuthentication","nameLocation":"731:15:0","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"753:116:0","text":" @dev Returns the action identifier associated with the external function described by `selector`."},"functionSelector":"851c1bb3","id":9,"implemented":false,"kind":"function","modifiers":[],"name":"getActionId","nameLocation":"883:11:0","nodeType":"FunctionDefinition","parameters":{"id":5,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4,"mutability":"mutable","name":"selector","nameLocation":"902:8:0","nodeType":"VariableDeclaration","scope":9,"src":"895:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3,"name":"bytes4","nodeType":"ElementaryTypeName","src":"895:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"894:17:0"},"returnParameters":{"id":8,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":9,"src":"935:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6,"name":"bytes32","nodeType":"ElementaryTypeName","src":"935:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"934:9:0"},"scope":10,"src":"874:70:0","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":11,"src":"721:225:0","usedErrors":[],"usedEvents":[]}],"src":"688:259:0"},"id":0},"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol":{"ast":{"absolutePath":"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol","exportedSymbols":{"ISignaturesValidator":[28]},"id":29,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":12,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"688:31:1"},{"abstract":false,"baseContracts":[],"canonicalName":"ISignaturesValidator","contractDependencies":[],"contractKind":"interface","documentation":{"id":13,"nodeType":"StructuredDocumentation","src":"721:95:1","text":" @dev Interface for the SignatureValidator helper, used to support meta-transactions."},"fullyImplemented":false,"id":28,"linearizedBaseContracts":[28],"name":"ISignaturesValidator","nameLocation":"827:20:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"854:60:1","text":" @dev Returns the EIP712 domain separator."},"functionSelector":"ed24911d","id":19,"implemented":false,"kind":"function","modifiers":[],"name":"getDomainSeparator","nameLocation":"928:18:1","nodeType":"FunctionDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"946:2:1"},"returnParameters":{"id":18,"nodeType":"ParameterList","parameters":[{"constant":false,"id":17,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":19,"src":"972:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":16,"name":"bytes32","nodeType":"ElementaryTypeName","src":"972:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"971:9:1"},"scope":28,"src":"919:62:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":20,"nodeType":"StructuredDocumentation","src":"987:83:1","text":" @dev Returns the next nonce used by an address to sign messages."},"functionSelector":"90193b7c","id":27,"implemented":false,"kind":"function","modifiers":[],"name":"getNextNonce","nameLocation":"1084:12:1","nodeType":"FunctionDefinition","parameters":{"id":23,"nodeType":"ParameterList","parameters":[{"constant":false,"id":22,"mutability":"mutable","name":"user","nameLocation":"1105:4:1","nodeType":"VariableDeclaration","scope":27,"src":"1097:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":21,"name":"address","nodeType":"ElementaryTypeName","src":"1097:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1096:14:1"},"returnParameters":{"id":26,"nodeType":"ParameterList","parameters":[{"constant":false,"id":25,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":27,"src":"1134:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":24,"name":"uint256","nodeType":"ElementaryTypeName","src":"1134:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1133:9:1"},"scope":28,"src":"1075:68:1","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":29,"src":"817:328:1","usedErrors":[],"usedEvents":[]}],"src":"688:458:1"},"id":1},"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol":{"ast":{"absolutePath":"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol","exportedSymbols":{"ITemporarilyPausable":[47]},"id":48,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":30,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"688:31:2"},{"abstract":false,"baseContracts":[],"canonicalName":"ITemporarilyPausable","contractDependencies":[],"contractKind":"interface","documentation":{"id":31,"nodeType":"StructuredDocumentation","src":"721:61:2","text":" @dev Interface for the TemporarilyPausable helper."},"fullyImplemented":false,"id":47,"linearizedBaseContracts":[47],"name":"ITemporarilyPausable","nameLocation":"793:20:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":32,"nodeType":"StructuredDocumentation","src":"820:83:2","text":" @dev Emitted every time the pause state changes by `_setPaused`."},"eventSelector":"9e3a5e37224532dea67b89face185703738a228a6e8a23dee546960180d3be64","id":36,"name":"PausedStateChanged","nameLocation":"914:18:2","nodeType":"EventDefinition","parameters":{"id":35,"nodeType":"ParameterList","parameters":[{"constant":false,"id":34,"indexed":false,"mutability":"mutable","name":"paused","nameLocation":"938:6:2","nodeType":"VariableDeclaration","scope":36,"src":"933:11:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":33,"name":"bool","nodeType":"ElementaryTypeName","src":"933:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"932:13:2"},"src":"908:38:2"},{"documentation":{"id":37,"nodeType":"StructuredDocumentation","src":"952:57:2","text":" @dev Returns the current paused state."},"functionSelector":"1c0de051","id":46,"implemented":false,"kind":"function","modifiers":[],"name":"getPausedState","nameLocation":"1023:14:2","nodeType":"FunctionDefinition","parameters":{"id":38,"nodeType":"ParameterList","parameters":[],"src":"1037:2:2"},"returnParameters":{"id":45,"nodeType":"ParameterList","parameters":[{"constant":false,"id":40,"mutability":"mutable","name":"paused","nameLocation":"1105:6:2","nodeType":"VariableDeclaration","scope":46,"src":"1100:11:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":39,"name":"bool","nodeType":"ElementaryTypeName","src":"1100:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":42,"mutability":"mutable","name":"pauseWindowEndTime","nameLocation":"1133:18:2","nodeType":"VariableDeclaration","scope":46,"src":"1125:26:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":41,"name":"uint256","nodeType":"ElementaryTypeName","src":"1125:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":44,"mutability":"mutable","name":"bufferPeriodEndTime","nameLocation":"1173:19:2","nodeType":"VariableDeclaration","scope":46,"src":"1165:27:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43,"name":"uint256","nodeType":"ElementaryTypeName","src":"1165:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1086:116:2"},"scope":47,"src":"1014:189:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":48,"src":"783:422:2","usedErrors":[],"usedEvents":[36]}],"src":"688:518:2"},"id":2},"@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol":{"ast":{"absolutePath":"@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol","exportedSymbols":{"IERC20":[140],"IWETH":[62]},"id":63,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":49,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"688:31:3"},{"absolutePath":"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol","file":"../openzeppelin/IERC20.sol","id":50,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":63,"sourceUnit":141,"src":"721:36:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":52,"name":"IERC20","nameLocations":["929:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":140,"src":"929:6:3"},"id":53,"nodeType":"InheritanceSpecifier","src":"929:6:3"}],"canonicalName":"IWETH","contractDependencies":[],"contractKind":"interface","documentation":{"id":51,"nodeType":"StructuredDocumentation","src":"759:150:3","text":" @dev Interface for WETH9.\n See https://github.com/gnosis/canonical-weth/blob/0dd1ea3e295eef916d0c6223ec63141137d22d67/contracts/WETH9.sol"},"fullyImplemented":false,"id":62,"linearizedBaseContracts":[62,140],"name":"IWETH","nameLocation":"920:5:3","nodeType":"ContractDefinition","nodes":[{"functionSelector":"d0e30db0","id":56,"implemented":false,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"951:7:3","nodeType":"FunctionDefinition","parameters":{"id":54,"nodeType":"ParameterList","parameters":[],"src":"958:2:3"},"returnParameters":{"id":55,"nodeType":"ParameterList","parameters":[],"src":"977:0:3"},"scope":62,"src":"942:36:3","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"2e1a7d4d","id":61,"implemented":false,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"993:8:3","nodeType":"FunctionDefinition","parameters":{"id":59,"nodeType":"ParameterList","parameters":[{"constant":false,"id":58,"mutability":"mutable","name":"amount","nameLocation":"1010:6:3","nodeType":"VariableDeclaration","scope":61,"src":"1002:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":57,"name":"uint256","nodeType":"ElementaryTypeName","src":"1002:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1001:16:3"},"returnParameters":{"id":60,"nodeType":"ParameterList","parameters":[],"src":"1026:0:3"},"scope":62,"src":"984:43:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":63,"src":"910:119:3","usedErrors":[],"usedEvents":[130,139]}],"src":"688:342:3"},"id":3},"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol":{"ast":{"absolutePath":"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol","exportedSymbols":{"IERC20":[140]},"id":141,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":64,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"33:31:4"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":65,"nodeType":"StructuredDocumentation","src":"66:70:4","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":140,"linearizedBaseContracts":[140],"name":"IERC20","nameLocation":"147:6:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":66,"nodeType":"StructuredDocumentation","src":"160:66:4","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":71,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"240:11:4","nodeType":"FunctionDefinition","parameters":{"id":67,"nodeType":"ParameterList","parameters":[],"src":"251:2:4"},"returnParameters":{"id":70,"nodeType":"ParameterList","parameters":[{"constant":false,"id":69,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":71,"src":"277:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":68,"name":"uint256","nodeType":"ElementaryTypeName","src":"277:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"276:9:4"},"scope":140,"src":"231:55:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":72,"nodeType":"StructuredDocumentation","src":"292:72:4","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":79,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"378:9:4","nodeType":"FunctionDefinition","parameters":{"id":75,"nodeType":"ParameterList","parameters":[{"constant":false,"id":74,"mutability":"mutable","name":"account","nameLocation":"396:7:4","nodeType":"VariableDeclaration","scope":79,"src":"388:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":73,"name":"address","nodeType":"ElementaryTypeName","src":"388:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"387:17:4"},"returnParameters":{"id":78,"nodeType":"ParameterList","parameters":[{"constant":false,"id":77,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":79,"src":"428:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":76,"name":"uint256","nodeType":"ElementaryTypeName","src":"428:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"427:9:4"},"scope":140,"src":"369:68:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":80,"nodeType":"StructuredDocumentation","src":"443:209:4","text":" @dev Moves `amount` tokens from the caller's account to `recipient`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":89,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"666:8:4","nodeType":"FunctionDefinition","parameters":{"id":85,"nodeType":"ParameterList","parameters":[{"constant":false,"id":82,"mutability":"mutable","name":"recipient","nameLocation":"683:9:4","nodeType":"VariableDeclaration","scope":89,"src":"675:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":81,"name":"address","nodeType":"ElementaryTypeName","src":"675:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":84,"mutability":"mutable","name":"amount","nameLocation":"702:6:4","nodeType":"VariableDeclaration","scope":89,"src":"694:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":83,"name":"uint256","nodeType":"ElementaryTypeName","src":"694:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"674:35:4"},"returnParameters":{"id":88,"nodeType":"ParameterList","parameters":[{"constant":false,"id":87,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":89,"src":"728:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":86,"name":"bool","nodeType":"ElementaryTypeName","src":"728:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"727:6:4"},"scope":140,"src":"657:77:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":90,"nodeType":"StructuredDocumentation","src":"740:264:4","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":99,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1018:9:4","nodeType":"FunctionDefinition","parameters":{"id":95,"nodeType":"ParameterList","parameters":[{"constant":false,"id":92,"mutability":"mutable","name":"owner","nameLocation":"1036:5:4","nodeType":"VariableDeclaration","scope":99,"src":"1028:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":91,"name":"address","nodeType":"ElementaryTypeName","src":"1028:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":94,"mutability":"mutable","name":"spender","nameLocation":"1051:7:4","nodeType":"VariableDeclaration","scope":99,"src":"1043:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":93,"name":"address","nodeType":"ElementaryTypeName","src":"1043:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1027:32:4"},"returnParameters":{"id":98,"nodeType":"ParameterList","parameters":[{"constant":false,"id":97,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":99,"src":"1083:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":96,"name":"uint256","nodeType":"ElementaryTypeName","src":"1083:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1082:9:4"},"scope":140,"src":"1009:83:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":100,"nodeType":"StructuredDocumentation","src":"1098:642:4","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":109,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"1754:7:4","nodeType":"FunctionDefinition","parameters":{"id":105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":102,"mutability":"mutable","name":"spender","nameLocation":"1770:7:4","nodeType":"VariableDeclaration","scope":109,"src":"1762:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":101,"name":"address","nodeType":"ElementaryTypeName","src":"1762:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":104,"mutability":"mutable","name":"amount","nameLocation":"1787:6:4","nodeType":"VariableDeclaration","scope":109,"src":"1779:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":103,"name":"uint256","nodeType":"ElementaryTypeName","src":"1779:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1761:33:4"},"returnParameters":{"id":108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":107,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":109,"src":"1813:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":106,"name":"bool","nodeType":"ElementaryTypeName","src":"1813:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1812:6:4"},"scope":140,"src":"1745:74:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":110,"nodeType":"StructuredDocumentation","src":"1825:296:4","text":" @dev Moves `amount` tokens from `sender` to `recipient` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":121,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2135:12:4","nodeType":"FunctionDefinition","parameters":{"id":117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":112,"mutability":"mutable","name":"sender","nameLocation":"2165:6:4","nodeType":"VariableDeclaration","scope":121,"src":"2157:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":111,"name":"address","nodeType":"ElementaryTypeName","src":"2157:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":114,"mutability":"mutable","name":"recipient","nameLocation":"2189:9:4","nodeType":"VariableDeclaration","scope":121,"src":"2181:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":113,"name":"address","nodeType":"ElementaryTypeName","src":"2181:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":116,"mutability":"mutable","name":"amount","nameLocation":"2216:6:4","nodeType":"VariableDeclaration","scope":121,"src":"2208:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":115,"name":"uint256","nodeType":"ElementaryTypeName","src":"2208:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2147:81:4"},"returnParameters":{"id":120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":119,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":121,"src":"2247:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":118,"name":"bool","nodeType":"ElementaryTypeName","src":"2247:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2246:6:4"},"scope":140,"src":"2126:127:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":{"id":122,"nodeType":"StructuredDocumentation","src":"2259:158:4","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":130,"name":"Transfer","nameLocation":"2428:8:4","nodeType":"EventDefinition","parameters":{"id":129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":124,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"2453:4:4","nodeType":"VariableDeclaration","scope":130,"src":"2437:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":123,"name":"address","nodeType":"ElementaryTypeName","src":"2437:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":126,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"2475:2:4","nodeType":"VariableDeclaration","scope":130,"src":"2459:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":125,"name":"address","nodeType":"ElementaryTypeName","src":"2459:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":128,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"2487:5:4","nodeType":"VariableDeclaration","scope":130,"src":"2479:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":127,"name":"uint256","nodeType":"ElementaryTypeName","src":"2479:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2436:57:4"},"src":"2422:72:4"},{"anonymous":false,"documentation":{"id":131,"nodeType":"StructuredDocumentation","src":"2500:148:4","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":139,"name":"Approval","nameLocation":"2659:8:4","nodeType":"EventDefinition","parameters":{"id":138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":133,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"2684:5:4","nodeType":"VariableDeclaration","scope":139,"src":"2668:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":132,"name":"address","nodeType":"ElementaryTypeName","src":"2668:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":135,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"2707:7:4","nodeType":"VariableDeclaration","scope":139,"src":"2691:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":134,"name":"address","nodeType":"ElementaryTypeName","src":"2691:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":137,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"2724:5:4","nodeType":"VariableDeclaration","scope":139,"src":"2716:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":136,"name":"uint256","nodeType":"ElementaryTypeName","src":"2716:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:63:4"},"src":"2653:78:4"}],"scope":141,"src":"137:2596:4","usedErrors":[],"usedEvents":[130,139]}],"src":"33:2701:4"},"id":4},"@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol":{"ast":{"absolutePath":"@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol","exportedSymbols":{"IAsset":[144]},"id":145,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":142,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"688:31:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IAsset","contractDependencies":[],"contractKind":"interface","documentation":{"id":143,"nodeType":"StructuredDocumentation","src":"721:309:5","text":" @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\n address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\n types.\n This concept is unrelated to a Pool's Asset Managers."},"fullyImplemented":true,"id":144,"linearizedBaseContracts":[144],"name":"IAsset","nameLocation":"1041:6:5","nodeType":"ContractDefinition","nodes":[],"scope":145,"src":"1031:73:5","usedErrors":[],"usedEvents":[]}],"src":"688:417:5"},"id":5},"@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol":{"ast":{"absolutePath":"@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol","exportedSymbols":{"IAuthorizer":[159]},"id":160,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":146,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"688:31:6"},{"abstract":false,"baseContracts":[],"canonicalName":"IAuthorizer","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":159,"linearizedBaseContracts":[159],"name":"IAuthorizer","nameLocation":"731:11:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":147,"nodeType":"StructuredDocumentation","src":"749:121:6","text":" @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`."},"functionSelector":"9be2a884","id":158,"implemented":false,"kind":"function","modifiers":[],"name":"canPerform","nameLocation":"884:10:6","nodeType":"FunctionDefinition","parameters":{"id":154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":149,"mutability":"mutable","name":"actionId","nameLocation":"912:8:6","nodeType":"VariableDeclaration","scope":158,"src":"904:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":148,"name":"bytes32","nodeType":"ElementaryTypeName","src":"904:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":151,"mutability":"mutable","name":"account","nameLocation":"938:7:6","nodeType":"VariableDeclaration","scope":158,"src":"930:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":150,"name":"address","nodeType":"ElementaryTypeName","src":"930:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":153,"mutability":"mutable","name":"where","nameLocation":"963:5:6","nodeType":"VariableDeclaration","scope":158,"src":"955:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":152,"name":"address","nodeType":"ElementaryTypeName","src":"955:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"894:80:6"},"returnParameters":{"id":157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":156,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":158,"src":"998:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":155,"name":"bool","nodeType":"ElementaryTypeName","src":"998:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"997:6:6"},"scope":159,"src":"875:129:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":160,"src":"721:285:6","usedErrors":[],"usedEvents":[]}],"src":"688:319:6"},"id":6},"@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol":{"ast":{"absolutePath":"@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol","exportedSymbols":{"IERC20":[140],"IFlashLoanRecipient":[179]},"id":180,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":161,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"688:31:7"},{"absolutePath":"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol","file":"../solidity-utils/openzeppelin/IERC20.sol","id":162,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":180,"sourceUnit":141,"src":"773:51:7","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IFlashLoanRecipient","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":179,"linearizedBaseContracts":[179],"name":"IFlashLoanRecipient","nameLocation":"836:19:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":163,"nodeType":"StructuredDocumentation","src":"862:496:7","text":" @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\n At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\n call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\n Vault, or else the entire flash loan will revert.\n `userData` is the same value passed in the `IVault.flashLoan` call."},"functionSelector":"f04f2707","id":178,"implemented":false,"kind":"function","modifiers":[],"name":"receiveFlashLoan","nameLocation":"1372:16:7","nodeType":"FunctionDefinition","parameters":{"id":176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":167,"mutability":"mutable","name":"tokens","nameLocation":"1414:6:7","nodeType":"VariableDeclaration","scope":178,"src":"1398:22:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$140_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":165,"nodeType":"UserDefinedTypeName","pathNode":{"id":164,"name":"IERC20","nameLocations":["1398:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":140,"src":"1398:6:7"},"referencedDeclaration":140,"src":"1398:6:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}},"id":166,"nodeType":"ArrayTypeName","src":"1398:8:7","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$140_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":170,"mutability":"mutable","name":"amounts","nameLocation":"1447:7:7","nodeType":"VariableDeclaration","scope":178,"src":"1430:24:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":168,"name":"uint256","nodeType":"ElementaryTypeName","src":"1430:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":169,"nodeType":"ArrayTypeName","src":"1430:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":173,"mutability":"mutable","name":"feeAmounts","nameLocation":"1481:10:7","nodeType":"VariableDeclaration","scope":178,"src":"1464:27:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":171,"name":"uint256","nodeType":"ElementaryTypeName","src":"1464:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":172,"nodeType":"ArrayTypeName","src":"1464:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":175,"mutability":"mutable","name":"userData","nameLocation":"1514:8:7","nodeType":"VariableDeclaration","scope":178,"src":"1501:21:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":174,"name":"bytes","nodeType":"ElementaryTypeName","src":"1501:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1388:140:7"},"returnParameters":{"id":177,"nodeType":"ParameterList","parameters":[],"src":"1537:0:7"},"scope":179,"src":"1363:175:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":180,"src":"826:714:7","usedErrors":[],"usedEvents":[]}],"src":"688:853:7"},"id":7},"@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol":{"ast":{"absolutePath":"@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol","exportedSymbols":{"IAsset":[144],"IAuthentication":[10],"IAuthorizer":[159],"IERC20":[140],"IFlashLoanRecipient":[179],"IProtocolFeesCollector":[248],"ISignaturesValidator":[28],"ITemporarilyPausable":[47],"IVault":[766],"IWETH":[62]},"id":249,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":181,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"688:31:8"},{"id":182,"literals":["experimental","ABIEncoderV2"],"nodeType":"PragmaDirective","src":"720:33:8"},{"absolutePath":"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol","file":"../solidity-utils/openzeppelin/IERC20.sol","id":183,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":249,"sourceUnit":141,"src":"755:51:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol","file":"./IVault.sol","id":184,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":249,"sourceUnit":767,"src":"808:22:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol","file":"./IAuthorizer.sol","id":185,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":249,"sourceUnit":160,"src":"831:27:8","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IProtocolFeesCollector","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":248,"linearizedBaseContracts":[248],"name":"IProtocolFeesCollector","nameLocation":"870:22:8","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"a9ba3ffe0b6c366b81232caab38605a0699ad5398d6cce76f91ee809e322dafc","id":189,"name":"SwapFeePercentageChanged","nameLocation":"905:24:8","nodeType":"EventDefinition","parameters":{"id":188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":187,"indexed":false,"mutability":"mutable","name":"newSwapFeePercentage","nameLocation":"938:20:8","nodeType":"VariableDeclaration","scope":189,"src":"930:28:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":186,"name":"uint256","nodeType":"ElementaryTypeName","src":"930:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"929:30:8"},"src":"899:61:8"},{"anonymous":false,"eventSelector":"5a0b7386237e7f07fa741efc64e59c9387d2cccafec760efed4d53387f20e19a","id":193,"name":"FlashLoanFeePercentageChanged","nameLocation":"971:29:8","nodeType":"EventDefinition","parameters":{"id":192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":191,"indexed":false,"mutability":"mutable","name":"newFlashLoanFeePercentage","nameLocation":"1009:25:8","nodeType":"VariableDeclaration","scope":193,"src":"1001:33:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":190,"name":"uint256","nodeType":"ElementaryTypeName","src":"1001:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1000:35:8"},"src":"965:71:8"},{"functionSelector":"6daefab6","id":205,"implemented":false,"kind":"function","modifiers":[],"name":"withdrawCollectedFees","nameLocation":"1051:21:8","nodeType":"FunctionDefinition","parameters":{"id":203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":197,"mutability":"mutable","name":"tokens","nameLocation":"1100:6:8","nodeType":"VariableDeclaration","scope":205,"src":"1082:24:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$140_$dyn_calldata_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":195,"nodeType":"UserDefinedTypeName","pathNode":{"id":194,"name":"IERC20","nameLocations":["1082:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":140,"src":"1082:6:8"},"referencedDeclaration":140,"src":"1082:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}},"id":196,"nodeType":"ArrayTypeName","src":"1082:8:8","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$140_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":200,"mutability":"mutable","name":"amounts","nameLocation":"1135:7:8","nodeType":"VariableDeclaration","scope":205,"src":"1116:26:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":198,"name":"uint256","nodeType":"ElementaryTypeName","src":"1116:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":199,"nodeType":"ArrayTypeName","src":"1116:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":202,"mutability":"mutable","name":"recipient","nameLocation":"1160:9:8","nodeType":"VariableDeclaration","scope":205,"src":"1152:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":201,"name":"address","nodeType":"ElementaryTypeName","src":"1152:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1072:103:8"},"returnParameters":{"id":204,"nodeType":"ParameterList","parameters":[],"src":"1184:0:8"},"scope":248,"src":"1042:143:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"38e9922e","id":210,"implemented":false,"kind":"function","modifiers":[],"name":"setSwapFeePercentage","nameLocation":"1200:20:8","nodeType":"FunctionDefinition","parameters":{"id":208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":207,"mutability":"mutable","name":"newSwapFeePercentage","nameLocation":"1229:20:8","nodeType":"VariableDeclaration","scope":210,"src":"1221:28:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":206,"name":"uint256","nodeType":"ElementaryTypeName","src":"1221:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1220:30:8"},"returnParameters":{"id":209,"nodeType":"ParameterList","parameters":[],"src":"1259:0:8"},"scope":248,"src":"1191:69:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"6b6b9f69","id":215,"implemented":false,"kind":"function","modifiers":[],"name":"setFlashLoanFeePercentage","nameLocation":"1275:25:8","nodeType":"FunctionDefinition","parameters":{"id":213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":212,"mutability":"mutable","name":"newFlashLoanFeePercentage","nameLocation":"1309:25:8","nodeType":"VariableDeclaration","scope":215,"src":"1301:33:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":211,"name":"uint256","nodeType":"ElementaryTypeName","src":"1301:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1300:35:8"},"returnParameters":{"id":214,"nodeType":"ParameterList","parameters":[],"src":"1344:0:8"},"scope":248,"src":"1266:79:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"55c67628","id":220,"implemented":false,"kind":"function","modifiers":[],"name":"getSwapFeePercentage","nameLocation":"1360:20:8","nodeType":"FunctionDefinition","parameters":{"id":216,"nodeType":"ParameterList","parameters":[],"src":"1380:2:8"},"returnParameters":{"id":219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":218,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":220,"src":"1406:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":217,"name":"uint256","nodeType":"ElementaryTypeName","src":"1406:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1405:9:8"},"scope":248,"src":"1351:64:8","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"d877845c","id":225,"implemented":false,"kind":"function","modifiers":[],"name":"getFlashLoanFeePercentage","nameLocation":"1430:25:8","nodeType":"FunctionDefinition","parameters":{"id":221,"nodeType":"ParameterList","parameters":[],"src":"1455:2:8"},"returnParameters":{"id":224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":223,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":225,"src":"1481:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":222,"name":"uint256","nodeType":"ElementaryTypeName","src":"1481:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1480:9:8"},"scope":248,"src":"1421:69:8","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"e42abf35","id":235,"implemented":false,"kind":"function","modifiers":[],"name":"getCollectedFeeAmounts","nameLocation":"1505:22:8","nodeType":"FunctionDefinition","parameters":{"id":230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":229,"mutability":"mutable","name":"tokens","nameLocation":"1544:6:8","nodeType":"VariableDeclaration","scope":235,"src":"1528:22:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$140_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":227,"nodeType":"UserDefinedTypeName","pathNode":{"id":226,"name":"IERC20","nameLocations":["1528:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":140,"src":"1528:6:8"},"referencedDeclaration":140,"src":"1528:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}},"id":228,"nodeType":"ArrayTypeName","src":"1528:8:8","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$140_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"}],"src":"1527:24:8"},"returnParameters":{"id":234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":233,"mutability":"mutable","name":"feeAmounts","nameLocation":"1592:10:8","nodeType":"VariableDeclaration","scope":235,"src":"1575:27:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":231,"name":"uint256","nodeType":"ElementaryTypeName","src":"1575:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":232,"nodeType":"ArrayTypeName","src":"1575:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1574:29:8"},"scope":248,"src":"1496:108:8","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"aaabadc5","id":241,"implemented":false,"kind":"function","modifiers":[],"name":"getAuthorizer","nameLocation":"1619:13:8","nodeType":"FunctionDefinition","parameters":{"id":236,"nodeType":"ParameterList","parameters":[],"src":"1632:2:8"},"returnParameters":{"id":240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":239,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":241,"src":"1658:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$159","typeString":"contract IAuthorizer"},"typeName":{"id":238,"nodeType":"UserDefinedTypeName","pathNode":{"id":237,"name":"IAuthorizer","nameLocations":["1658:11:8"],"nodeType":"IdentifierPath","referencedDeclaration":159,"src":"1658:11:8"},"referencedDeclaration":159,"src":"1658:11:8","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$159","typeString":"contract IAuthorizer"}},"visibility":"internal"}],"src":"1657:13:8"},"scope":248,"src":"1610:61:8","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"fbfa77cf","id":247,"implemented":false,"kind":"function","modifiers":[],"name":"vault","nameLocation":"1686:5:8","nodeType":"FunctionDefinition","parameters":{"id":242,"nodeType":"ParameterList","parameters":[],"src":"1691:2:8"},"returnParameters":{"id":246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":245,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":247,"src":"1717:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$766","typeString":"contract IVault"},"typeName":{"id":244,"nodeType":"UserDefinedTypeName","pathNode":{"id":243,"name":"IVault","nameLocations":["1717:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":766,"src":"1717:6:8"},"referencedDeclaration":766,"src":"1717:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$766","typeString":"contract IVault"}},"visibility":"internal"}],"src":"1716:8:8"},"scope":248,"src":"1677:48:8","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":249,"src":"860:867:8","usedErrors":[],"usedEvents":[189,193]}],"src":"688:1040:8"},"id":8},"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol":{"ast":{"absolutePath":"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol","exportedSymbols":{"IAsset":[144],"IAuthentication":[10],"IAuthorizer":[159],"IERC20":[140],"IFlashLoanRecipient":[179],"IProtocolFeesCollector":[248],"ISignaturesValidator":[28],"ITemporarilyPausable":[47],"IVault":[766],"IWETH":[62]},"id":767,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":250,"literals":["experimental","ABIEncoderV2"],"nodeType":"PragmaDirective","src":"688:33:9"},{"absolutePath":"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol","file":"../solidity-utils/openzeppelin/IERC20.sol","id":251,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":767,"sourceUnit":141,"src":"723:51:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol","file":"../solidity-utils/helpers/IAuthentication.sol","id":252,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":767,"sourceUnit":11,"src":"775:55:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol","file":"../solidity-utils/helpers/ISignaturesValidator.sol","id":253,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":767,"sourceUnit":29,"src":"831:60:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol","file":"../solidity-utils/helpers/ITemporarilyPausable.sol","id":254,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":767,"sourceUnit":48,"src":"892:60:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol","file":"../solidity-utils/misc/IWETH.sol","id":255,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":767,"sourceUnit":63,"src":"953:42:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol","file":"./IAsset.sol","id":256,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":767,"sourceUnit":145,"src":"997:22:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol","file":"./IAuthorizer.sol","id":257,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":767,"sourceUnit":160,"src":"1020:27:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol","file":"./IFlashLoanRecipient.sol","id":258,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":767,"sourceUnit":180,"src":"1048:35:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol","file":"./IProtocolFeesCollector.sol","id":259,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":767,"sourceUnit":249,"src":"1084:38:9","symbolAliases":[],"unitAlias":""},{"id":260,"literals":["solidity",">=","0.7",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"1124:31:9"},{"abstract":false,"baseContracts":[{"baseName":{"id":262,"name":"ISignaturesValidator","nameLocations":["1349:20:9"],"nodeType":"IdentifierPath","referencedDeclaration":28,"src":"1349:20:9"},"id":263,"nodeType":"InheritanceSpecifier","src":"1349:20:9"},{"baseName":{"id":264,"name":"ITemporarilyPausable","nameLocations":["1371:20:9"],"nodeType":"IdentifierPath","referencedDeclaration":47,"src":"1371:20:9"},"id":265,"nodeType":"InheritanceSpecifier","src":"1371:20:9"},{"baseName":{"id":266,"name":"IAuthentication","nameLocations":["1393:15:9"],"nodeType":"IdentifierPath","referencedDeclaration":10,"src":"1393:15:9"},"id":267,"nodeType":"InheritanceSpecifier","src":"1393:15:9"}],"canonicalName":"IVault","contractDependencies":[],"contractKind":"interface","documentation":{"id":261,"nodeType":"StructuredDocumentation","src":"1157:171:9","text":" @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\n don't override one of these declarations."},"fullyImplemented":false,"id":766,"linearizedBaseContracts":[766,10,47,28],"name":"IVault","nameLocation":"1339:6:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":268,"nodeType":"StructuredDocumentation","src":"2906:55:9","text":" @dev Returns the Vault's Authorizer."},"functionSelector":"aaabadc5","id":274,"implemented":false,"kind":"function","modifiers":[],"name":"getAuthorizer","nameLocation":"2975:13:9","nodeType":"FunctionDefinition","parameters":{"id":269,"nodeType":"ParameterList","parameters":[],"src":"2988:2:9"},"returnParameters":{"id":273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":272,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":274,"src":"3014:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$159","typeString":"contract IAuthorizer"},"typeName":{"id":271,"nodeType":"UserDefinedTypeName","pathNode":{"id":270,"name":"IAuthorizer","nameLocations":["3014:11:9"],"nodeType":"IdentifierPath","referencedDeclaration":159,"src":"3014:11:9"},"referencedDeclaration":159,"src":"3014:11:9","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$159","typeString":"contract IAuthorizer"}},"visibility":"internal"}],"src":"3013:13:9"},"scope":766,"src":"2966:61:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":275,"nodeType":"StructuredDocumentation","src":"3033:175:9","text":" @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\n Emits an `AuthorizerChanged` event."},"functionSelector":"058a628f","id":281,"implemented":false,"kind":"function","modifiers":[],"name":"setAuthorizer","nameLocation":"3222:13:9","nodeType":"FunctionDefinition","parameters":{"id":279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":278,"mutability":"mutable","name":"newAuthorizer","nameLocation":"3248:13:9","nodeType":"VariableDeclaration","scope":281,"src":"3236:25:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$159","typeString":"contract IAuthorizer"},"typeName":{"id":277,"nodeType":"UserDefinedTypeName","pathNode":{"id":276,"name":"IAuthorizer","nameLocations":["3236:11:9"],"nodeType":"IdentifierPath","referencedDeclaration":159,"src":"3236:11:9"},"referencedDeclaration":159,"src":"3236:11:9","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$159","typeString":"contract IAuthorizer"}},"visibility":"internal"}],"src":"3235:27:9"},"returnParameters":{"id":280,"nodeType":"ParameterList","parameters":[],"src":"3271:0:9"},"scope":766,"src":"3213:59:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":{"id":282,"nodeType":"StructuredDocumentation","src":"3278:80:9","text":" @dev Emitted when a new authorizer is set by `setAuthorizer`."},"eventSelector":"94b979b6831a51293e2641426f97747feed46f17779fed9cd18d1ecefcfe92ef","id":287,"name":"AuthorizerChanged","nameLocation":"3369:17:9","nodeType":"EventDefinition","parameters":{"id":286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":285,"indexed":true,"mutability":"mutable","name":"newAuthorizer","nameLocation":"3407:13:9","nodeType":"VariableDeclaration","scope":287,"src":"3387:33:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$159","typeString":"contract IAuthorizer"},"typeName":{"id":284,"nodeType":"UserDefinedTypeName","pathNode":{"id":283,"name":"IAuthorizer","nameLocations":["3387:11:9"],"nodeType":"IdentifierPath","referencedDeclaration":159,"src":"3387:11:9"},"referencedDeclaration":159,"src":"3387:11:9","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$159","typeString":"contract IAuthorizer"}},"visibility":"internal"}],"src":"3386:35:9"},"src":"3363:59:9"},{"documentation":{"id":288,"nodeType":"StructuredDocumentation","src":"4518:99:9","text":" @dev Returns true if `user` has approved `relayer` to act as a relayer for them."},"functionSelector":"fec90d72","id":297,"implemented":false,"kind":"function","modifiers":[],"name":"hasApprovedRelayer","nameLocation":"4631:18:9","nodeType":"FunctionDefinition","parameters":{"id":293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":290,"mutability":"mutable","name":"user","nameLocation":"4658:4:9","nodeType":"VariableDeclaration","scope":297,"src":"4650:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":289,"name":"address","nodeType":"ElementaryTypeName","src":"4650:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":292,"mutability":"mutable","name":"relayer","nameLocation":"4672:7:9","nodeType":"VariableDeclaration","scope":297,"src":"4664:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":291,"name":"address","nodeType":"ElementaryTypeName","src":"4664:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4649:31:9"},"returnParameters":{"id":296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":295,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":297,"src":"4704:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":294,"name":"bool","nodeType":"ElementaryTypeName","src":"4704:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4703:6:9"},"scope":766,"src":"4622:88:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":298,"nodeType":"StructuredDocumentation","src":"4716:178:9","text":" @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\n Emits a `RelayerApprovalChanged` event."},"functionSelector":"fa6e671d","id":307,"implemented":false,"kind":"function","modifiers":[],"name":"setRelayerApproval","nameLocation":"4908:18:9","nodeType":"FunctionDefinition","parameters":{"id":305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":300,"mutability":"mutable","name":"sender","nameLocation":"4944:6:9","nodeType":"VariableDeclaration","scope":307,"src":"4936:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":299,"name":"address","nodeType":"ElementaryTypeName","src":"4936:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":302,"mutability":"mutable","name":"relayer","nameLocation":"4968:7:9","nodeType":"VariableDeclaration","scope":307,"src":"4960:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":301,"name":"address","nodeType":"ElementaryTypeName","src":"4960:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":304,"mutability":"mutable","name":"approved","nameLocation":"4990:8:9","nodeType":"VariableDeclaration","scope":307,"src":"4985:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":303,"name":"bool","nodeType":"ElementaryTypeName","src":"4985:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4926:78:9"},"returnParameters":{"id":306,"nodeType":"ParameterList","parameters":[],"src":"5013:0:9"},"scope":766,"src":"4899:115:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":{"id":308,"nodeType":"StructuredDocumentation","src":"5020:104:9","text":" @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`."},"eventSelector":"46961fdb4502b646d5095fba7600486a8ac05041d55cdf0f16ed677180b5cad8","id":316,"name":"RelayerApprovalChanged","nameLocation":"5135:22:9","nodeType":"EventDefinition","parameters":{"id":315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":310,"indexed":true,"mutability":"mutable","name":"relayer","nameLocation":"5174:7:9","nodeType":"VariableDeclaration","scope":316,"src":"5158:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":309,"name":"address","nodeType":"ElementaryTypeName","src":"5158:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":312,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"5199:6:9","nodeType":"VariableDeclaration","scope":316,"src":"5183:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":311,"name":"address","nodeType":"ElementaryTypeName","src":"5183:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":314,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"5212:8:9","nodeType":"VariableDeclaration","scope":316,"src":"5207:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":313,"name":"bool","nodeType":"ElementaryTypeName","src":"5207:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5157:64:9"},"src":"5129:93:9"},{"documentation":{"id":317,"nodeType":"StructuredDocumentation","src":"5930:78:9","text":" @dev Returns `user`'s Internal Balance for a set of tokens."},"functionSelector":"0f5a6efa","id":329,"implemented":false,"kind":"function","modifiers":[],"name":"getInternalBalance","nameLocation":"6022:18:9","nodeType":"FunctionDefinition","parameters":{"id":324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":319,"mutability":"mutable","name":"user","nameLocation":"6049:4:9","nodeType":"VariableDeclaration","scope":329,"src":"6041:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":318,"name":"address","nodeType":"ElementaryTypeName","src":"6041:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":323,"mutability":"mutable","name":"tokens","nameLocation":"6071:6:9","nodeType":"VariableDeclaration","scope":329,"src":"6055:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$140_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":321,"nodeType":"UserDefinedTypeName","pathNode":{"id":320,"name":"IERC20","nameLocations":["6055:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":140,"src":"6055:6:9"},"referencedDeclaration":140,"src":"6055:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}},"id":322,"nodeType":"ArrayTypeName","src":"6055:8:9","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$140_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"}],"src":"6040:38:9"},"returnParameters":{"id":328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":327,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":329,"src":"6102:16:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":325,"name":"uint256","nodeType":"ElementaryTypeName","src":"6102:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":326,"nodeType":"ArrayTypeName","src":"6102:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6101:18:9"},"scope":766,"src":"6013:107:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":330,"nodeType":"StructuredDocumentation","src":"6126:416:9","text":" @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\n and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\n it lets integrators reuse a user's Vault allowance.\n For each operation, if the caller is not `sender`, it must be an authorized relayer for them."},"functionSelector":"0e8e3e84","id":337,"implemented":false,"kind":"function","modifiers":[],"name":"manageUserBalance","nameLocation":"6556:17:9","nodeType":"FunctionDefinition","parameters":{"id":335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":334,"mutability":"mutable","name":"ops","nameLocation":"6597:3:9","nodeType":"VariableDeclaration","scope":337,"src":"6574:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserBalanceOp_$351_memory_ptr_$dyn_memory_ptr","typeString":"struct IVault.UserBalanceOp[]"},"typeName":{"baseType":{"id":332,"nodeType":"UserDefinedTypeName","pathNode":{"id":331,"name":"UserBalanceOp","nameLocations":["6574:13:9"],"nodeType":"IdentifierPath","referencedDeclaration":351,"src":"6574:13:9"},"referencedDeclaration":351,"src":"6574:13:9","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceOp_$351_storage_ptr","typeString":"struct IVault.UserBalanceOp"}},"id":333,"nodeType":"ArrayTypeName","src":"6574:15:9","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserBalanceOp_$351_storage_$dyn_storage_ptr","typeString":"struct IVault.UserBalanceOp[]"}},"visibility":"internal"}],"src":"6573:28:9"},"returnParameters":{"id":336,"nodeType":"ParameterList","parameters":[],"src":"6618:0:9"},"scope":766,"src":"6547:72:9","stateMutability":"payable","virtual":false,"visibility":"external"},{"canonicalName":"IVault.UserBalanceOp","documentation":{"id":338,"nodeType":"StructuredDocumentation","src":"6625:175:9","text":" @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\nwithout manual WETH wrapping or unwrapping."},"id":351,"members":[{"constant":false,"id":341,"mutability":"mutable","name":"kind","nameLocation":"6854:4:9","nodeType":"VariableDeclaration","scope":351,"src":"6836:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_UserBalanceOpKind_$356","typeString":"enum IVault.UserBalanceOpKind"},"typeName":{"id":340,"nodeType":"UserDefinedTypeName","pathNode":{"id":339,"name":"UserBalanceOpKind","nameLocations":["6836:17:9"],"nodeType":"IdentifierPath","referencedDeclaration":356,"src":"6836:17:9"},"referencedDeclaration":356,"src":"6836:17:9","typeDescriptions":{"typeIdentifier":"t_enum$_UserBalanceOpKind_$356","typeString":"enum IVault.UserBalanceOpKind"}},"visibility":"internal"},{"constant":false,"id":344,"mutability":"mutable","name":"asset","nameLocation":"6875:5:9","nodeType":"VariableDeclaration","scope":351,"src":"6868:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAsset_$144","typeString":"contract IAsset"},"typeName":{"id":343,"nodeType":"UserDefinedTypeName","pathNode":{"id":342,"name":"IAsset","nameLocations":["6868:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":144,"src":"6868:6:9"},"referencedDeclaration":144,"src":"6868:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IAsset_$144","typeString":"contract IAsset"}},"visibility":"internal"},{"constant":false,"id":346,"mutability":"mutable","name":"amount","nameLocation":"6898:6:9","nodeType":"VariableDeclaration","scope":351,"src":"6890:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":345,"name":"uint256","nodeType":"ElementaryTypeName","src":"6890:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":348,"mutability":"mutable","name":"sender","nameLocation":"6922:6:9","nodeType":"VariableDeclaration","scope":351,"src":"6914:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":347,"name":"address","nodeType":"ElementaryTypeName","src":"6914:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":350,"mutability":"mutable","name":"recipient","nameLocation":"6954:9:9","nodeType":"VariableDeclaration","scope":351,"src":"6938:25:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":349,"name":"address","nodeType":"ElementaryTypeName","src":"6938:15:9","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"name":"UserBalanceOp","nameLocation":"6812:13:9","nodeType":"StructDefinition","scope":766,"src":"6805:165:9","visibility":"public"},{"canonicalName":"IVault.UserBalanceOpKind","id":356,"members":[{"id":352,"name":"DEPOSIT_INTERNAL","nameLocation":"8608:16:9","nodeType":"EnumValue","src":"8608:16:9"},{"id":353,"name":"WITHDRAW_INTERNAL","nameLocation":"8626:17:9","nodeType":"EnumValue","src":"8626:17:9"},{"id":354,"name":"TRANSFER_INTERNAL","nameLocation":"8645:17:9","nodeType":"EnumValue","src":"8645:17:9"},{"id":355,"name":"TRANSFER_EXTERNAL","nameLocation":"8664:17:9","nodeType":"EnumValue","src":"8664:17:9"}],"name":"UserBalanceOpKind","nameLocation":"8588:17:9","nodeType":"EnumDefinition","src":"8583:100:9"},{"anonymous":false,"documentation":{"id":357,"nodeType":"StructuredDocumentation","src":"8689:317:9","text":" @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\n interacting with Pools using Internal Balance.\n Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\n address."},"eventSelector":"18e1ea4139e68413d7d08aa752e71568e36b2c5bf940893314c2c5b01eaa0c42","id":366,"name":"InternalBalanceChanged","nameLocation":"9017:22:9","nodeType":"EventDefinition","parameters":{"id":365,"nodeType":"ParameterList","parameters":[{"constant":false,"id":359,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"9056:4:9","nodeType":"VariableDeclaration","scope":366,"src":"9040:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":358,"name":"address","nodeType":"ElementaryTypeName","src":"9040:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":362,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"9077:5:9","nodeType":"VariableDeclaration","scope":366,"src":"9062:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"},"typeName":{"id":361,"nodeType":"UserDefinedTypeName","pathNode":{"id":360,"name":"IERC20","nameLocations":["9062:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":140,"src":"9062:6:9"},"referencedDeclaration":140,"src":"9062:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":364,"indexed":false,"mutability":"mutable","name":"delta","nameLocation":"9091:5:9","nodeType":"VariableDeclaration","scope":366,"src":"9084:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":363,"name":"int256","nodeType":"ElementaryTypeName","src":"9084:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"9039:58:9"},"src":"9011:87:9"},{"anonymous":false,"documentation":{"id":367,"nodeType":"StructuredDocumentation","src":"9104:131:9","text":" @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account."},"eventSelector":"540a1a3f28340caec336c81d8d7b3df139ee5cdc1839a4f283d7ebb7eaae2d5c","id":378,"name":"ExternalBalanceTransfer","nameLocation":"9246:23:9","nodeType":"EventDefinition","parameters":{"id":377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":370,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"9285:5:9","nodeType":"VariableDeclaration","scope":378,"src":"9270:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"},"typeName":{"id":369,"nodeType":"UserDefinedTypeName","pathNode":{"id":368,"name":"IERC20","nameLocations":["9270:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":140,"src":"9270:6:9"},"referencedDeclaration":140,"src":"9270:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":372,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"9308:6:9","nodeType":"VariableDeclaration","scope":378,"src":"9292:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":371,"name":"address","nodeType":"ElementaryTypeName","src":"9292:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":374,"indexed":false,"mutability":"mutable","name":"recipient","nameLocation":"9324:9:9","nodeType":"VariableDeclaration","scope":378,"src":"9316:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":373,"name":"address","nodeType":"ElementaryTypeName","src":"9316:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":376,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"9343:6:9","nodeType":"VariableDeclaration","scope":378,"src":"9335:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":375,"name":"uint256","nodeType":"ElementaryTypeName","src":"9335:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9269:81:9"},"src":"9240:111:9"},{"canonicalName":"IVault.PoolSpecialization","id":382,"members":[{"id":379,"name":"GENERAL","nameLocation":"10457:7:9","nodeType":"EnumValue","src":"10457:7:9"},{"id":380,"name":"MINIMAL_SWAP_INFO","nameLocation":"10466:17:9","nodeType":"EnumValue","src":"10466:17:9"},{"id":381,"name":"TWO_TOKEN","nameLocation":"10485:9:9","nodeType":"EnumValue","src":"10485:9:9"}],"name":"PoolSpecialization","nameLocation":"10436:18:9","nodeType":"EnumDefinition","src":"10431:65:9"},{"documentation":{"id":383,"nodeType":"StructuredDocumentation","src":"10502:702:9","text":" @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\n is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\n changed.\n The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\n depending on the chosen specialization setting. This contract is known as the Pool's contract.\n Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\n multiple Pools may share the same contract.\n Emits a `PoolRegistered` event."},"functionSelector":"09b2760f","id":391,"implemented":false,"kind":"function","modifiers":[],"name":"registerPool","nameLocation":"11218:12:9","nodeType":"FunctionDefinition","parameters":{"id":387,"nodeType":"ParameterList","parameters":[{"constant":false,"id":386,"mutability":"mutable","name":"specialization","nameLocation":"11250:14:9","nodeType":"VariableDeclaration","scope":391,"src":"11231:33:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PoolSpecialization_$382","typeString":"enum IVault.PoolSpecialization"},"typeName":{"id":385,"nodeType":"UserDefinedTypeName","pathNode":{"id":384,"name":"PoolSpecialization","nameLocations":["11231:18:9"],"nodeType":"IdentifierPath","referencedDeclaration":382,"src":"11231:18:9"},"referencedDeclaration":382,"src":"11231:18:9","typeDescriptions":{"typeIdentifier":"t_enum$_PoolSpecialization_$382","typeString":"enum IVault.PoolSpecialization"}},"visibility":"internal"}],"src":"11230:35:9"},"returnParameters":{"id":390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":389,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":391,"src":"11284:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":388,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11284:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"11283:9:9"},"scope":766,"src":"11209:84:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":{"id":392,"nodeType":"StructuredDocumentation","src":"11299:84:9","text":" @dev Emitted when a Pool is registered by calling `registerPool`."},"eventSelector":"3c13bc30b8e878c53fd2a36b679409c073afd75950be43d8858768e956fbc20e","id":401,"name":"PoolRegistered","nameLocation":"11394:14:9","nodeType":"EventDefinition","parameters":{"id":400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":394,"indexed":true,"mutability":"mutable","name":"poolId","nameLocation":"11425:6:9","nodeType":"VariableDeclaration","scope":401,"src":"11409:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":393,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11409:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":396,"indexed":true,"mutability":"mutable","name":"poolAddress","nameLocation":"11449:11:9","nodeType":"VariableDeclaration","scope":401,"src":"11433:27:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":395,"name":"address","nodeType":"ElementaryTypeName","src":"11433:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":399,"indexed":false,"mutability":"mutable","name":"specialization","nameLocation":"11481:14:9","nodeType":"VariableDeclaration","scope":401,"src":"11462:33:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PoolSpecialization_$382","typeString":"enum IVault.PoolSpecialization"},"typeName":{"id":398,"nodeType":"UserDefinedTypeName","pathNode":{"id":397,"name":"PoolSpecialization","nameLocations":["11462:18:9"],"nodeType":"IdentifierPath","referencedDeclaration":382,"src":"11462:18:9"},"referencedDeclaration":382,"src":"11462:18:9","typeDescriptions":{"typeIdentifier":"t_enum$_PoolSpecialization_$382","typeString":"enum IVault.PoolSpecialization"}},"visibility":"internal"}],"src":"11408:88:9"},"src":"11388:109:9"},{"documentation":{"id":402,"nodeType":"StructuredDocumentation","src":"11503:85:9","text":" @dev Returns a Pool's contract address and specialization setting."},"functionSelector":"f6c00927","id":412,"implemented":false,"kind":"function","modifiers":[],"name":"getPool","nameLocation":"11602:7:9","nodeType":"FunctionDefinition","parameters":{"id":405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":404,"mutability":"mutable","name":"poolId","nameLocation":"11618:6:9","nodeType":"VariableDeclaration","scope":412,"src":"11610:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":403,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11610:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"11609:16:9"},"returnParameters":{"id":411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":407,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":412,"src":"11649:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":406,"name":"address","nodeType":"ElementaryTypeName","src":"11649:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":410,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":412,"src":"11658:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PoolSpecialization_$382","typeString":"enum IVault.PoolSpecialization"},"typeName":{"id":409,"nodeType":"UserDefinedTypeName","pathNode":{"id":408,"name":"PoolSpecialization","nameLocations":["11658:18:9"],"nodeType":"IdentifierPath","referencedDeclaration":382,"src":"11658:18:9"},"referencedDeclaration":382,"src":"11658:18:9","typeDescriptions":{"typeIdentifier":"t_enum$_PoolSpecialization_$382","typeString":"enum IVault.PoolSpecialization"}},"visibility":"internal"}],"src":"11648:29:9"},"scope":766,"src":"11593:85:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":413,"nodeType":"StructuredDocumentation","src":"11684:1422:9","text":" @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\n Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\n exit by receiving registered tokens, and can only swap registered tokens.\n Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\n of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\n ascending order.\n The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\n Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\n depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\n expected to be highly secured smart contracts with sound design principles, and the decision to register an\n Asset Manager should not be made lightly.\n Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\n Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\n different Asset Manager.\n Emits a `TokensRegistered` event."},"functionSelector":"66a9c7d2","id":425,"implemented":false,"kind":"function","modifiers":[],"name":"registerTokens","nameLocation":"13120:14:9","nodeType":"FunctionDefinition","parameters":{"id":423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":415,"mutability":"mutable","name":"poolId","nameLocation":"13152:6:9","nodeType":"VariableDeclaration","scope":425,"src":"13144:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":414,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13144:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":419,"mutability":"mutable","name":"tokens","nameLocation":"13184:6:9","nodeType":"VariableDeclaration","scope":425,"src":"13168:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$140_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":417,"nodeType":"UserDefinedTypeName","pathNode":{"id":416,"name":"IERC20","nameLocations":["13168:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":140,"src":"13168:6:9"},"referencedDeclaration":140,"src":"13168:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}},"id":418,"nodeType":"ArrayTypeName","src":"13168:8:9","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$140_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":422,"mutability":"mutable","name":"assetManagers","nameLocation":"13217:13:9","nodeType":"VariableDeclaration","scope":425,"src":"13200:30:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":420,"name":"address","nodeType":"ElementaryTypeName","src":"13200:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":421,"nodeType":"ArrayTypeName","src":"13200:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"13134:102:9"},"returnParameters":{"id":424,"nodeType":"ParameterList","parameters":[],"src":"13245:0:9"},"scope":766,"src":"13111:135:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":{"id":426,"nodeType":"StructuredDocumentation","src":"13252:89:9","text":" @dev Emitted when a Pool registers tokens by calling `registerTokens`."},"eventSelector":"f5847d3f2197b16cdcd2098ec95d0905cd1abdaf415f07bb7cef2bba8ac5dec4","id":437,"name":"TokensRegistered","nameLocation":"13352:16:9","nodeType":"EventDefinition","parameters":{"id":436,"nodeType":"ParameterList","parameters":[{"constant":false,"id":428,"indexed":true,"mutability":"mutable","name":"poolId","nameLocation":"13385:6:9","nodeType":"VariableDeclaration","scope":437,"src":"13369:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":427,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13369:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":432,"indexed":false,"mutability":"mutable","name":"tokens","nameLocation":"13402:6:9","nodeType":"VariableDeclaration","scope":437,"src":"13393:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$140_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":430,"nodeType":"UserDefinedTypeName","pathNode":{"id":429,"name":"IERC20","nameLocations":["13393:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":140,"src":"13393:6:9"},"referencedDeclaration":140,"src":"13393:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}},"id":431,"nodeType":"ArrayTypeName","src":"13393:8:9","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$140_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":435,"indexed":false,"mutability":"mutable","name":"assetManagers","nameLocation":"13420:13:9","nodeType":"VariableDeclaration","scope":437,"src":"13410:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":433,"name":"address","nodeType":"ElementaryTypeName","src":"13410:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":434,"nodeType":"ArrayTypeName","src":"13410:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"13368:66:9"},"src":"13346:89:9"},{"documentation":{"id":438,"nodeType":"StructuredDocumentation","src":"13441:567:9","text":" @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\n Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\n balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\n must be deregistered in the same `deregisterTokens` call.\n A deregistered token can be re-registered later on, possibly with a different Asset Manager.\n Emits a `TokensDeregistered` event."},"functionSelector":"7d3aeb96","id":447,"implemented":false,"kind":"function","modifiers":[],"name":"deregisterTokens","nameLocation":"14022:16:9","nodeType":"FunctionDefinition","parameters":{"id":445,"nodeType":"ParameterList","parameters":[{"constant":false,"id":440,"mutability":"mutable","name":"poolId","nameLocation":"14047:6:9","nodeType":"VariableDeclaration","scope":447,"src":"14039:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":439,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14039:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":444,"mutability":"mutable","name":"tokens","nameLocation":"14071:6:9","nodeType":"VariableDeclaration","scope":447,"src":"14055:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$140_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":442,"nodeType":"UserDefinedTypeName","pathNode":{"id":441,"name":"IERC20","nameLocations":["14055:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":140,"src":"14055:6:9"},"referencedDeclaration":140,"src":"14055:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}},"id":443,"nodeType":"ArrayTypeName","src":"14055:8:9","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$140_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"}],"src":"14038:40:9"},"returnParameters":{"id":446,"nodeType":"ParameterList","parameters":[],"src":"14087:0:9"},"scope":766,"src":"14013:75:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":{"id":448,"nodeType":"StructuredDocumentation","src":"14094:93:9","text":" @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`."},"eventSelector":"7dcdc6d02ef40c7c1a7046a011b058bd7f988fa14e20a66344f9d4e60657d610","id":456,"name":"TokensDeregistered","nameLocation":"14198:18:9","nodeType":"EventDefinition","parameters":{"id":455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":450,"indexed":true,"mutability":"mutable","name":"poolId","nameLocation":"14233:6:9","nodeType":"VariableDeclaration","scope":456,"src":"14217:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":449,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14217:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":454,"indexed":false,"mutability":"mutable","name":"tokens","nameLocation":"14250:6:9","nodeType":"VariableDeclaration","scope":456,"src":"14241:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$140_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":452,"nodeType":"UserDefinedTypeName","pathNode":{"id":451,"name":"IERC20","nameLocations":["14241:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":140,"src":"14241:6:9"},"referencedDeclaration":140,"src":"14241:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}},"id":453,"nodeType":"ArrayTypeName","src":"14241:8:9","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$140_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"}],"src":"14216:41:9"},"src":"14192:66:9"},{"documentation":{"id":457,"nodeType":"StructuredDocumentation","src":"14264:1043:9","text":" @dev Returns detailed information for a Pool's registered token.\n `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\n withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\n equals the sum of `cash` and `managed`.\n Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\n `managed` or `total` balance to be greater than 2^112 - 1.\n `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\n join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\n example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\n change for this purpose, and will update `lastChangeBlock`.\n `assetManager` is the Pool's token Asset Manager."},"functionSelector":"b05f8e48","id":473,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolTokenInfo","nameLocation":"15321:16:9","nodeType":"FunctionDefinition","parameters":{"id":463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":459,"mutability":"mutable","name":"poolId","nameLocation":"15346:6:9","nodeType":"VariableDeclaration","scope":473,"src":"15338:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":458,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15338:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":462,"mutability":"mutable","name":"token","nameLocation":"15361:5:9","nodeType":"VariableDeclaration","scope":473,"src":"15354:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"},"typeName":{"id":461,"nodeType":"UserDefinedTypeName","pathNode":{"id":460,"name":"IERC20","nameLocations":["15354:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":140,"src":"15354:6:9"},"referencedDeclaration":140,"src":"15354:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"15337:30:9"},"returnParameters":{"id":472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":465,"mutability":"mutable","name":"cash","nameLocation":"15436:4:9","nodeType":"VariableDeclaration","scope":473,"src":"15428:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":464,"name":"uint256","nodeType":"ElementaryTypeName","src":"15428:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":467,"mutability":"mutable","name":"managed","nameLocation":"15462:7:9","nodeType":"VariableDeclaration","scope":473,"src":"15454:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":466,"name":"uint256","nodeType":"ElementaryTypeName","src":"15454:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":469,"mutability":"mutable","name":"lastChangeBlock","nameLocation":"15491:15:9","nodeType":"VariableDeclaration","scope":473,"src":"15483:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":468,"name":"uint256","nodeType":"ElementaryTypeName","src":"15483:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":471,"mutability":"mutable","name":"assetManager","nameLocation":"15528:12:9","nodeType":"VariableDeclaration","scope":473,"src":"15520:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":470,"name":"address","nodeType":"ElementaryTypeName","src":"15520:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"15414:136:9"},"scope":766,"src":"15312:239:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":474,"nodeType":"StructuredDocumentation","src":"15557:828:9","text":" @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\n the tokens' `balances` changed.\n The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\n Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\n If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\n order as passed to `registerTokens`.\n Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\n the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\n instead."},"functionSelector":"f94d4668","id":488,"implemented":false,"kind":"function","modifiers":[],"name":"getPoolTokens","nameLocation":"16399:13:9","nodeType":"FunctionDefinition","parameters":{"id":477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":476,"mutability":"mutable","name":"poolId","nameLocation":"16421:6:9","nodeType":"VariableDeclaration","scope":488,"src":"16413:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":475,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16413:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"16412:16:9"},"returnParameters":{"id":487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":481,"mutability":"mutable","name":"tokens","nameLocation":"16505:6:9","nodeType":"VariableDeclaration","scope":488,"src":"16489:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$140_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":479,"nodeType":"UserDefinedTypeName","pathNode":{"id":478,"name":"IERC20","nameLocations":["16489:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":140,"src":"16489:6:9"},"referencedDeclaration":140,"src":"16489:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}},"id":480,"nodeType":"ArrayTypeName","src":"16489:8:9","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$140_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":484,"mutability":"mutable","name":"balances","nameLocation":"16542:8:9","nodeType":"VariableDeclaration","scope":488,"src":"16525:25:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":482,"name":"uint256","nodeType":"ElementaryTypeName","src":"16525:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":483,"nodeType":"ArrayTypeName","src":"16525:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":486,"mutability":"mutable","name":"lastChangeBlock","nameLocation":"16572:15:9","nodeType":"VariableDeclaration","scope":488,"src":"16564:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":485,"name":"uint256","nodeType":"ElementaryTypeName","src":"16564:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16475:122:9"},"scope":766,"src":"16390:208:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":489,"nodeType":"StructuredDocumentation","src":"16604:2304:9","text":" @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\n trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\n Pool shares.\n If the caller is not `sender`, it must be an authorized relayer for them.\n The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\n to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\n these maximums.\n If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\n this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\n WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\n back to the caller (not the sender, which is important for relayers).\n `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\n interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\n sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\n `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\n If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\n be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\n withdrawn from Internal Balance: attempting to do so will trigger a revert.\n This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\n their own custom logic. This typically requires additional information from the user (such as the expected number\n of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\n directly to the Pool's contract, as is `recipient`.\n Emits a `PoolBalanceChanged` event."},"functionSelector":"b95cac28","id":501,"implemented":false,"kind":"function","modifiers":[],"name":"joinPool","nameLocation":"18922:8:9","nodeType":"FunctionDefinition","parameters":{"id":499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":491,"mutability":"mutable","name":"poolId","nameLocation":"18948:6:9","nodeType":"VariableDeclaration","scope":501,"src":"18940:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":490,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18940:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":493,"mutability":"mutable","name":"sender","nameLocation":"18972:6:9","nodeType":"VariableDeclaration","scope":501,"src":"18964:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":492,"name":"address","nodeType":"ElementaryTypeName","src":"18964:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":495,"mutability":"mutable","name":"recipient","nameLocation":"18996:9:9","nodeType":"VariableDeclaration","scope":501,"src":"18988:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":494,"name":"address","nodeType":"ElementaryTypeName","src":"18988:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":498,"mutability":"mutable","name":"request","nameLocation":"19038:7:9","nodeType":"VariableDeclaration","scope":501,"src":"19015:30:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_JoinPoolRequest_$513_memory_ptr","typeString":"struct IVault.JoinPoolRequest"},"typeName":{"id":497,"nodeType":"UserDefinedTypeName","pathNode":{"id":496,"name":"JoinPoolRequest","nameLocations":["19015:15:9"],"nodeType":"IdentifierPath","referencedDeclaration":513,"src":"19015:15:9"},"referencedDeclaration":513,"src":"19015:15:9","typeDescriptions":{"typeIdentifier":"t_struct$_JoinPoolRequest_$513_storage_ptr","typeString":"struct IVault.JoinPoolRequest"}},"visibility":"internal"}],"src":"18930:121:9"},"returnParameters":{"id":500,"nodeType":"ParameterList","parameters":[],"src":"19068:0:9"},"scope":766,"src":"18913:156:9","stateMutability":"payable","virtual":false,"visibility":"external"},{"canonicalName":"IVault.JoinPoolRequest","id":513,"members":[{"constant":false,"id":505,"mutability":"mutable","name":"assets","nameLocation":"19117:6:9","nodeType":"VariableDeclaration","scope":513,"src":"19108:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IAsset_$144_$dyn_storage_ptr","typeString":"contract IAsset[]"},"typeName":{"baseType":{"id":503,"nodeType":"UserDefinedTypeName","pathNode":{"id":502,"name":"IAsset","nameLocations":["19108:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":144,"src":"19108:6:9"},"referencedDeclaration":144,"src":"19108:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IAsset_$144","typeString":"contract IAsset"}},"id":504,"nodeType":"ArrayTypeName","src":"19108:8:9","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IAsset_$144_$dyn_storage_ptr","typeString":"contract IAsset[]"}},"visibility":"internal"},{"constant":false,"id":508,"mutability":"mutable","name":"maxAmountsIn","nameLocation":"19143:12:9","nodeType":"VariableDeclaration","scope":513,"src":"19133:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":506,"name":"uint256","nodeType":"ElementaryTypeName","src":"19133:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":507,"nodeType":"ArrayTypeName","src":"19133:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":510,"mutability":"mutable","name":"userData","nameLocation":"19171:8:9","nodeType":"VariableDeclaration","scope":513,"src":"19165:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":509,"name":"bytes","nodeType":"ElementaryTypeName","src":"19165:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":512,"mutability":"mutable","name":"fromInternalBalance","nameLocation":"19194:19:9","nodeType":"VariableDeclaration","scope":513,"src":"19189:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":511,"name":"bool","nodeType":"ElementaryTypeName","src":"19189:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"JoinPoolRequest","nameLocation":"19082:15:9","nodeType":"StructDefinition","scope":766,"src":"19075:145:9","visibility":"public"},{"documentation":{"id":514,"nodeType":"StructuredDocumentation","src":"19226:2489:9","text":" @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\n trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\n Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\n `getPoolTokenInfo`).\n If the caller is not `sender`, it must be an authorized relayer for them.\n The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\n token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\n it just enforces these minimums.\n If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\n enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\n of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\n `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\n interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\n be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\n final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\n If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\n an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\n do so will trigger a revert.\n `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\n `tokens` array. This array must match the Pool's registered tokens.\n This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\n their own custom logic. This typically requires additional information from the user (such as the expected number\n of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\n passed directly to the Pool's contract.\n Emits a `PoolBalanceChanged` event."},"functionSelector":"8bdb3913","id":526,"implemented":false,"kind":"function","modifiers":[],"name":"exitPool","nameLocation":"21729:8:9","nodeType":"FunctionDefinition","parameters":{"id":524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":516,"mutability":"mutable","name":"poolId","nameLocation":"21755:6:9","nodeType":"VariableDeclaration","scope":526,"src":"21747:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":515,"name":"bytes32","nodeType":"ElementaryTypeName","src":"21747:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":518,"mutability":"mutable","name":"sender","nameLocation":"21779:6:9","nodeType":"VariableDeclaration","scope":526,"src":"21771:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":517,"name":"address","nodeType":"ElementaryTypeName","src":"21771:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":520,"mutability":"mutable","name":"recipient","nameLocation":"21811:9:9","nodeType":"VariableDeclaration","scope":526,"src":"21795:25:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":519,"name":"address","nodeType":"ElementaryTypeName","src":"21795:15:9","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":523,"mutability":"mutable","name":"request","nameLocation":"21853:7:9","nodeType":"VariableDeclaration","scope":526,"src":"21830:30:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ExitPoolRequest_$538_memory_ptr","typeString":"struct IVault.ExitPoolRequest"},"typeName":{"id":522,"nodeType":"UserDefinedTypeName","pathNode":{"id":521,"name":"ExitPoolRequest","nameLocations":["21830:15:9"],"nodeType":"IdentifierPath","referencedDeclaration":538,"src":"21830:15:9"},"referencedDeclaration":538,"src":"21830:15:9","typeDescriptions":{"typeIdentifier":"t_struct$_ExitPoolRequest_$538_storage_ptr","typeString":"struct IVault.ExitPoolRequest"}},"visibility":"internal"}],"src":"21737:129:9"},"returnParameters":{"id":525,"nodeType":"ParameterList","parameters":[],"src":"21875:0:9"},"scope":766,"src":"21720:156:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"canonicalName":"IVault.ExitPoolRequest","id":538,"members":[{"constant":false,"id":530,"mutability":"mutable","name":"assets","nameLocation":"21924:6:9","nodeType":"VariableDeclaration","scope":538,"src":"21915:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IAsset_$144_$dyn_storage_ptr","typeString":"contract IAsset[]"},"typeName":{"baseType":{"id":528,"nodeType":"UserDefinedTypeName","pathNode":{"id":527,"name":"IAsset","nameLocations":["21915:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":144,"src":"21915:6:9"},"referencedDeclaration":144,"src":"21915:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IAsset_$144","typeString":"contract IAsset"}},"id":529,"nodeType":"ArrayTypeName","src":"21915:8:9","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IAsset_$144_$dyn_storage_ptr","typeString":"contract IAsset[]"}},"visibility":"internal"},{"constant":false,"id":533,"mutability":"mutable","name":"minAmountsOut","nameLocation":"21950:13:9","nodeType":"VariableDeclaration","scope":538,"src":"21940:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":531,"name":"uint256","nodeType":"ElementaryTypeName","src":"21940:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":532,"nodeType":"ArrayTypeName","src":"21940:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":535,"mutability":"mutable","name":"userData","nameLocation":"21979:8:9","nodeType":"VariableDeclaration","scope":538,"src":"21973:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":534,"name":"bytes","nodeType":"ElementaryTypeName","src":"21973:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":537,"mutability":"mutable","name":"toInternalBalance","nameLocation":"22002:17:9","nodeType":"VariableDeclaration","scope":538,"src":"21997:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":536,"name":"bool","nodeType":"ElementaryTypeName","src":"21997:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"ExitPoolRequest","nameLocation":"21889:15:9","nodeType":"StructDefinition","scope":766,"src":"21882:144:9","visibility":"public"},{"anonymous":false,"documentation":{"id":539,"nodeType":"StructuredDocumentation","src":"22032:116:9","text":" @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively."},"eventSelector":"e5ce249087ce04f05a957192435400fd97868dba0e6a4b4c049abf8af80dae78","id":555,"name":"PoolBalanceChanged","nameLocation":"22159:18:9","nodeType":"EventDefinition","parameters":{"id":554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":541,"indexed":true,"mutability":"mutable","name":"poolId","nameLocation":"22203:6:9","nodeType":"VariableDeclaration","scope":555,"src":"22187:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":540,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22187:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":543,"indexed":true,"mutability":"mutable","name":"liquidityProvider","nameLocation":"22235:17:9","nodeType":"VariableDeclaration","scope":555,"src":"22219:33:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":542,"name":"address","nodeType":"ElementaryTypeName","src":"22219:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":547,"indexed":false,"mutability":"mutable","name":"tokens","nameLocation":"22271:6:9","nodeType":"VariableDeclaration","scope":555,"src":"22262:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$140_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":545,"nodeType":"UserDefinedTypeName","pathNode":{"id":544,"name":"IERC20","nameLocations":["22262:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":140,"src":"22262:6:9"},"referencedDeclaration":140,"src":"22262:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}},"id":546,"nodeType":"ArrayTypeName","src":"22262:8:9","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$140_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":550,"indexed":false,"mutability":"mutable","name":"deltas","nameLocation":"22296:6:9","nodeType":"VariableDeclaration","scope":555,"src":"22287:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[]"},"typeName":{"baseType":{"id":548,"name":"int256","nodeType":"ElementaryTypeName","src":"22287:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":549,"nodeType":"ArrayTypeName","src":"22287:8:9","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_storage_ptr","typeString":"int256[]"}},"visibility":"internal"},{"constant":false,"id":553,"indexed":false,"mutability":"mutable","name":"protocolFeeAmounts","nameLocation":"22322:18:9","nodeType":"VariableDeclaration","scope":555,"src":"22312:28:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":551,"name":"uint256","nodeType":"ElementaryTypeName","src":"22312:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":552,"nodeType":"ArrayTypeName","src":"22312:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"22177:169:9"},"src":"22153:194:9"},{"canonicalName":"IVault.PoolBalanceChangeKind","id":558,"members":[{"id":556,"name":"JOIN","nameLocation":"22382:4:9","nodeType":"EnumValue","src":"22382:4:9"},{"id":557,"name":"EXIT","nameLocation":"22388:4:9","nodeType":"EnumValue","src":"22388:4:9"}],"name":"PoolBalanceChangeKind","nameLocation":"22358:21:9","nodeType":"EnumDefinition","src":"22353:41:9"},{"canonicalName":"IVault.SwapKind","id":561,"members":[{"id":559,"name":"GIVEN_IN","nameLocation":"25995:8:9","nodeType":"EnumValue","src":"25995:8:9"},{"id":560,"name":"GIVEN_OUT","nameLocation":"26005:9:9","nodeType":"EnumValue","src":"26005:9:9"}],"name":"SwapKind","nameLocation":"25984:8:9","nodeType":"EnumDefinition","src":"25979:37:9"},{"documentation":{"id":562,"nodeType":"StructuredDocumentation","src":"26022:587:9","text":" @dev Performs a swap with a single Pool.\n If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\n taken from the Pool, which must be greater than or equal to `limit`.\n If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\n sent to the Pool, which must be less than or equal to `limit`.\n Internal Balance usage and the recipient are determined by the `funds` struct.\n Emits a `Swap` event."},"functionSelector":"52bbbe29","id":577,"implemented":false,"kind":"function","modifiers":[],"name":"swap","nameLocation":"26623:4:9","nodeType":"FunctionDefinition","parameters":{"id":573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":565,"mutability":"mutable","name":"singleSwap","nameLocation":"26655:10:9","nodeType":"VariableDeclaration","scope":577,"src":"26637:28:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SingleSwap_$594_memory_ptr","typeString":"struct IVault.SingleSwap"},"typeName":{"id":564,"nodeType":"UserDefinedTypeName","pathNode":{"id":563,"name":"SingleSwap","nameLocations":["26637:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":594,"src":"26637:10:9"},"referencedDeclaration":594,"src":"26637:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_SingleSwap_$594_storage_ptr","typeString":"struct IVault.SingleSwap"}},"visibility":"internal"},{"constant":false,"id":568,"mutability":"mutable","name":"funds","nameLocation":"26697:5:9","nodeType":"VariableDeclaration","scope":577,"src":"26675:27:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_FundManagement_$657_memory_ptr","typeString":"struct IVault.FundManagement"},"typeName":{"id":567,"nodeType":"UserDefinedTypeName","pathNode":{"id":566,"name":"FundManagement","nameLocations":["26675:14:9"],"nodeType":"IdentifierPath","referencedDeclaration":657,"src":"26675:14:9"},"referencedDeclaration":657,"src":"26675:14:9","typeDescriptions":{"typeIdentifier":"t_struct$_FundManagement_$657_storage_ptr","typeString":"struct IVault.FundManagement"}},"visibility":"internal"},{"constant":false,"id":570,"mutability":"mutable","name":"limit","nameLocation":"26720:5:9","nodeType":"VariableDeclaration","scope":577,"src":"26712:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":569,"name":"uint256","nodeType":"ElementaryTypeName","src":"26712:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":572,"mutability":"mutable","name":"deadline","nameLocation":"26743:8:9","nodeType":"VariableDeclaration","scope":577,"src":"26735:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":571,"name":"uint256","nodeType":"ElementaryTypeName","src":"26735:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26627:130:9"},"returnParameters":{"id":576,"nodeType":"ParameterList","parameters":[{"constant":false,"id":575,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":577,"src":"26784:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":574,"name":"uint256","nodeType":"ElementaryTypeName","src":"26784:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26783:9:9"},"scope":766,"src":"26614:179:9","stateMutability":"payable","virtual":false,"visibility":"external"},{"canonicalName":"IVault.SingleSwap","documentation":{"id":578,"nodeType":"StructuredDocumentation","src":"26799:545:9","text":" @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\n the `kind` value.\n `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\n Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\n The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\n used to extend swap behavior."},"id":594,"members":[{"constant":false,"id":580,"mutability":"mutable","name":"poolId","nameLocation":"27385:6:9","nodeType":"VariableDeclaration","scope":594,"src":"27377:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":579,"name":"bytes32","nodeType":"ElementaryTypeName","src":"27377:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":583,"mutability":"mutable","name":"kind","nameLocation":"27410:4:9","nodeType":"VariableDeclaration","scope":594,"src":"27401:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$561","typeString":"enum IVault.SwapKind"},"typeName":{"id":582,"nodeType":"UserDefinedTypeName","pathNode":{"id":581,"name":"SwapKind","nameLocations":["27401:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":561,"src":"27401:8:9"},"referencedDeclaration":561,"src":"27401:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$561","typeString":"enum IVault.SwapKind"}},"visibility":"internal"},{"constant":false,"id":586,"mutability":"mutable","name":"assetIn","nameLocation":"27431:7:9","nodeType":"VariableDeclaration","scope":594,"src":"27424:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAsset_$144","typeString":"contract IAsset"},"typeName":{"id":585,"nodeType":"UserDefinedTypeName","pathNode":{"id":584,"name":"IAsset","nameLocations":["27424:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":144,"src":"27424:6:9"},"referencedDeclaration":144,"src":"27424:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IAsset_$144","typeString":"contract IAsset"}},"visibility":"internal"},{"constant":false,"id":589,"mutability":"mutable","name":"assetOut","nameLocation":"27455:8:9","nodeType":"VariableDeclaration","scope":594,"src":"27448:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAsset_$144","typeString":"contract IAsset"},"typeName":{"id":588,"nodeType":"UserDefinedTypeName","pathNode":{"id":587,"name":"IAsset","nameLocations":["27448:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":144,"src":"27448:6:9"},"referencedDeclaration":144,"src":"27448:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IAsset_$144","typeString":"contract IAsset"}},"visibility":"internal"},{"constant":false,"id":591,"mutability":"mutable","name":"amount","nameLocation":"27481:6:9","nodeType":"VariableDeclaration","scope":594,"src":"27473:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":590,"name":"uint256","nodeType":"ElementaryTypeName","src":"27473:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":593,"mutability":"mutable","name":"userData","nameLocation":"27503:8:9","nodeType":"VariableDeclaration","scope":594,"src":"27497:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":592,"name":"bytes","nodeType":"ElementaryTypeName","src":"27497:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"SingleSwap","nameLocation":"27356:10:9","nodeType":"StructDefinition","scope":766,"src":"27349:169:9","visibility":"public"},{"documentation":{"id":595,"nodeType":"StructuredDocumentation","src":"27524:1980:9","text":" @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\n the amount of tokens sent to or received from the Pool, depending on the `kind` value.\n Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\n Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\n the same index in the `assets` array.\n Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\n Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\n `amountOut` depending on the swap kind.\n Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\n of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\n the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\n The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\n or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\n out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\n or unwrapped from WETH by the Vault.\n Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\n the minimum or maximum amount of each token the vault is allowed to transfer.\n `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\n equivalent `swap` call.\n Emits `Swap` events."},"functionSelector":"945bcec9","id":620,"implemented":false,"kind":"function","modifiers":[],"name":"batchSwap","nameLocation":"29518:9:9","nodeType":"FunctionDefinition","parameters":{"id":615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":598,"mutability":"mutable","name":"kind","nameLocation":"29546:4:9","nodeType":"VariableDeclaration","scope":620,"src":"29537:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$561","typeString":"enum IVault.SwapKind"},"typeName":{"id":597,"nodeType":"UserDefinedTypeName","pathNode":{"id":596,"name":"SwapKind","nameLocations":["29537:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":561,"src":"29537:8:9"},"referencedDeclaration":561,"src":"29537:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$561","typeString":"enum IVault.SwapKind"}},"visibility":"internal"},{"constant":false,"id":602,"mutability":"mutable","name":"swaps","nameLocation":"29583:5:9","nodeType":"VariableDeclaration","scope":620,"src":"29560:28:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_BatchSwapStep_$632_memory_ptr_$dyn_memory_ptr","typeString":"struct IVault.BatchSwapStep[]"},"typeName":{"baseType":{"id":600,"nodeType":"UserDefinedTypeName","pathNode":{"id":599,"name":"BatchSwapStep","nameLocations":["29560:13:9"],"nodeType":"IdentifierPath","referencedDeclaration":632,"src":"29560:13:9"},"referencedDeclaration":632,"src":"29560:13:9","typeDescriptions":{"typeIdentifier":"t_struct$_BatchSwapStep_$632_storage_ptr","typeString":"struct IVault.BatchSwapStep"}},"id":601,"nodeType":"ArrayTypeName","src":"29560:15:9","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_BatchSwapStep_$632_storage_$dyn_storage_ptr","typeString":"struct IVault.BatchSwapStep[]"}},"visibility":"internal"},{"constant":false,"id":606,"mutability":"mutable","name":"assets","nameLocation":"29614:6:9","nodeType":"VariableDeclaration","scope":620,"src":"29598:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IAsset_$144_$dyn_memory_ptr","typeString":"contract IAsset[]"},"typeName":{"baseType":{"id":604,"nodeType":"UserDefinedTypeName","pathNode":{"id":603,"name":"IAsset","nameLocations":["29598:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":144,"src":"29598:6:9"},"referencedDeclaration":144,"src":"29598:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IAsset_$144","typeString":"contract IAsset"}},"id":605,"nodeType":"ArrayTypeName","src":"29598:8:9","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IAsset_$144_$dyn_storage_ptr","typeString":"contract IAsset[]"}},"visibility":"internal"},{"constant":false,"id":609,"mutability":"mutable","name":"funds","nameLocation":"29652:5:9","nodeType":"VariableDeclaration","scope":620,"src":"29630:27:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_FundManagement_$657_memory_ptr","typeString":"struct IVault.FundManagement"},"typeName":{"id":608,"nodeType":"UserDefinedTypeName","pathNode":{"id":607,"name":"FundManagement","nameLocations":["29630:14:9"],"nodeType":"IdentifierPath","referencedDeclaration":657,"src":"29630:14:9"},"referencedDeclaration":657,"src":"29630:14:9","typeDescriptions":{"typeIdentifier":"t_struct$_FundManagement_$657_storage_ptr","typeString":"struct IVault.FundManagement"}},"visibility":"internal"},{"constant":false,"id":612,"mutability":"mutable","name":"limits","nameLocation":"29683:6:9","nodeType":"VariableDeclaration","scope":620,"src":"29667:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[]"},"typeName":{"baseType":{"id":610,"name":"int256","nodeType":"ElementaryTypeName","src":"29667:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":611,"nodeType":"ArrayTypeName","src":"29667:8:9","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_storage_ptr","typeString":"int256[]"}},"visibility":"internal"},{"constant":false,"id":614,"mutability":"mutable","name":"deadline","nameLocation":"29707:8:9","nodeType":"VariableDeclaration","scope":620,"src":"29699:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":613,"name":"uint256","nodeType":"ElementaryTypeName","src":"29699:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"29527:194:9"},"returnParameters":{"id":619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":618,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":620,"src":"29748:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[]"},"typeName":{"baseType":{"id":616,"name":"int256","nodeType":"ElementaryTypeName","src":"29748:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":617,"nodeType":"ArrayTypeName","src":"29748:8:9","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_storage_ptr","typeString":"int256[]"}},"visibility":"internal"}],"src":"29747:17:9"},"scope":766,"src":"29509:256:9","stateMutability":"payable","virtual":false,"visibility":"external"},{"canonicalName":"IVault.BatchSwapStep","documentation":{"id":621,"nodeType":"StructuredDocumentation","src":"29771:551:9","text":" @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\n `assets` array passed to that function, and ETH assets are converted to WETH.\n If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\n from the previous swap, depending on the swap kind.\n The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\n used to extend swap behavior."},"id":632,"members":[{"constant":false,"id":623,"mutability":"mutable","name":"poolId","nameLocation":"30366:6:9","nodeType":"VariableDeclaration","scope":632,"src":"30358:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":622,"name":"bytes32","nodeType":"ElementaryTypeName","src":"30358:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":625,"mutability":"mutable","name":"assetInIndex","nameLocation":"30390:12:9","nodeType":"VariableDeclaration","scope":632,"src":"30382:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":624,"name":"uint256","nodeType":"ElementaryTypeName","src":"30382:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":627,"mutability":"mutable","name":"assetOutIndex","nameLocation":"30420:13:9","nodeType":"VariableDeclaration","scope":632,"src":"30412:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":626,"name":"uint256","nodeType":"ElementaryTypeName","src":"30412:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":629,"mutability":"mutable","name":"amount","nameLocation":"30451:6:9","nodeType":"VariableDeclaration","scope":632,"src":"30443:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":628,"name":"uint256","nodeType":"ElementaryTypeName","src":"30443:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":631,"mutability":"mutable","name":"userData","nameLocation":"30473:8:9","nodeType":"VariableDeclaration","scope":632,"src":"30467:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":630,"name":"bytes","nodeType":"ElementaryTypeName","src":"30467:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BatchSwapStep","nameLocation":"30334:13:9","nodeType":"StructDefinition","scope":766,"src":"30327:161:9","visibility":"public"},{"anonymous":false,"documentation":{"id":633,"nodeType":"StructuredDocumentation","src":"30494:92:9","text":" @dev Emitted for each individual swap performed by `swap` or `batchSwap`."},"eventSelector":"2170c741c41531aec20e7c107c24eecfdd15e69c9bb0a8dd37b1840b9e0b207b","id":647,"name":"Swap","nameLocation":"30597:4:9","nodeType":"EventDefinition","parameters":{"id":646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":635,"indexed":true,"mutability":"mutable","name":"poolId","nameLocation":"30627:6:9","nodeType":"VariableDeclaration","scope":647,"src":"30611:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":634,"name":"bytes32","nodeType":"ElementaryTypeName","src":"30611:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":638,"indexed":true,"mutability":"mutable","name":"tokenIn","nameLocation":"30658:7:9","nodeType":"VariableDeclaration","scope":647,"src":"30643:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"},"typeName":{"id":637,"nodeType":"UserDefinedTypeName","pathNode":{"id":636,"name":"IERC20","nameLocations":["30643:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":140,"src":"30643:6:9"},"referencedDeclaration":140,"src":"30643:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":641,"indexed":true,"mutability":"mutable","name":"tokenOut","nameLocation":"30690:8:9","nodeType":"VariableDeclaration","scope":647,"src":"30675:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"},"typeName":{"id":640,"nodeType":"UserDefinedTypeName","pathNode":{"id":639,"name":"IERC20","nameLocations":["30675:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":140,"src":"30675:6:9"},"referencedDeclaration":140,"src":"30675:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":643,"indexed":false,"mutability":"mutable","name":"amountIn","nameLocation":"30716:8:9","nodeType":"VariableDeclaration","scope":647,"src":"30708:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":642,"name":"uint256","nodeType":"ElementaryTypeName","src":"30708:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":645,"indexed":false,"mutability":"mutable","name":"amountOut","nameLocation":"30742:9:9","nodeType":"VariableDeclaration","scope":647,"src":"30734:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":644,"name":"uint256","nodeType":"ElementaryTypeName","src":"30734:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"30601:156:9"},"src":"30591:167:9"},{"canonicalName":"IVault.FundManagement","documentation":{"id":648,"nodeType":"StructuredDocumentation","src":"30764:920:9","text":" @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\n `recipient` account.\n If the caller is not `sender`, it must be an authorized relayer for them.\n If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\n transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\n must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\n `joinPool`.\n If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\n transferred. This matches the behavior of `exitPool`.\n Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\n revert."},"id":657,"members":[{"constant":false,"id":650,"mutability":"mutable","name":"sender","nameLocation":"31729:6:9","nodeType":"VariableDeclaration","scope":657,"src":"31721:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":649,"name":"address","nodeType":"ElementaryTypeName","src":"31721:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":652,"mutability":"mutable","name":"fromInternalBalance","nameLocation":"31750:19:9","nodeType":"VariableDeclaration","scope":657,"src":"31745:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":651,"name":"bool","nodeType":"ElementaryTypeName","src":"31745:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":654,"mutability":"mutable","name":"recipient","nameLocation":"31795:9:9","nodeType":"VariableDeclaration","scope":657,"src":"31779:25:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":653,"name":"address","nodeType":"ElementaryTypeName","src":"31779:15:9","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":656,"mutability":"mutable","name":"toInternalBalance","nameLocation":"31819:17:9","nodeType":"VariableDeclaration","scope":657,"src":"31814:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":655,"name":"bool","nodeType":"ElementaryTypeName","src":"31814:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"FundManagement","nameLocation":"31696:14:9","nodeType":"StructDefinition","scope":766,"src":"31689:154:9","visibility":"public"},{"documentation":{"id":658,"nodeType":"StructuredDocumentation","src":"31849:1027:9","text":" @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\n simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\n Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\n the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\n receives are the same that an equivalent `batchSwap` call would receive.\n Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\n This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\n approve them for the Vault, or even know a user's address.\n Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\n eth_call instead of eth_sendTransaction."},"functionSelector":"f84d066e","id":678,"implemented":false,"kind":"function","modifiers":[],"name":"queryBatchSwap","nameLocation":"32890:14:9","nodeType":"FunctionDefinition","parameters":{"id":673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":661,"mutability":"mutable","name":"kind","nameLocation":"32923:4:9","nodeType":"VariableDeclaration","scope":678,"src":"32914:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$561","typeString":"enum IVault.SwapKind"},"typeName":{"id":660,"nodeType":"UserDefinedTypeName","pathNode":{"id":659,"name":"SwapKind","nameLocations":["32914:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":561,"src":"32914:8:9"},"referencedDeclaration":561,"src":"32914:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$561","typeString":"enum IVault.SwapKind"}},"visibility":"internal"},{"constant":false,"id":665,"mutability":"mutable","name":"swaps","nameLocation":"32960:5:9","nodeType":"VariableDeclaration","scope":678,"src":"32937:28:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_BatchSwapStep_$632_memory_ptr_$dyn_memory_ptr","typeString":"struct IVault.BatchSwapStep[]"},"typeName":{"baseType":{"id":663,"nodeType":"UserDefinedTypeName","pathNode":{"id":662,"name":"BatchSwapStep","nameLocations":["32937:13:9"],"nodeType":"IdentifierPath","referencedDeclaration":632,"src":"32937:13:9"},"referencedDeclaration":632,"src":"32937:13:9","typeDescriptions":{"typeIdentifier":"t_struct$_BatchSwapStep_$632_storage_ptr","typeString":"struct IVault.BatchSwapStep"}},"id":664,"nodeType":"ArrayTypeName","src":"32937:15:9","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_BatchSwapStep_$632_storage_$dyn_storage_ptr","typeString":"struct IVault.BatchSwapStep[]"}},"visibility":"internal"},{"constant":false,"id":669,"mutability":"mutable","name":"assets","nameLocation":"32991:6:9","nodeType":"VariableDeclaration","scope":678,"src":"32975:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IAsset_$144_$dyn_memory_ptr","typeString":"contract IAsset[]"},"typeName":{"baseType":{"id":667,"nodeType":"UserDefinedTypeName","pathNode":{"id":666,"name":"IAsset","nameLocations":["32975:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":144,"src":"32975:6:9"},"referencedDeclaration":144,"src":"32975:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IAsset_$144","typeString":"contract IAsset"}},"id":668,"nodeType":"ArrayTypeName","src":"32975:8:9","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IAsset_$144_$dyn_storage_ptr","typeString":"contract IAsset[]"}},"visibility":"internal"},{"constant":false,"id":672,"mutability":"mutable","name":"funds","nameLocation":"33029:5:9","nodeType":"VariableDeclaration","scope":678,"src":"33007:27:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_FundManagement_$657_memory_ptr","typeString":"struct IVault.FundManagement"},"typeName":{"id":671,"nodeType":"UserDefinedTypeName","pathNode":{"id":670,"name":"FundManagement","nameLocations":["33007:14:9"],"nodeType":"IdentifierPath","referencedDeclaration":657,"src":"33007:14:9"},"referencedDeclaration":657,"src":"33007:14:9","typeDescriptions":{"typeIdentifier":"t_struct$_FundManagement_$657_storage_ptr","typeString":"struct IVault.FundManagement"}},"visibility":"internal"}],"src":"32904:136:9"},"returnParameters":{"id":677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":676,"mutability":"mutable","name":"assetDeltas","nameLocation":"33075:11:9","nodeType":"VariableDeclaration","scope":678,"src":"33059:27:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[]"},"typeName":{"baseType":{"id":674,"name":"int256","nodeType":"ElementaryTypeName","src":"33059:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":675,"nodeType":"ArrayTypeName","src":"33059:8:9","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_storage_ptr","typeString":"int256[]"}},"visibility":"internal"}],"src":"33058:29:9"},"scope":766,"src":"32881:207:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":679,"nodeType":"StructuredDocumentation","src":"33114:604:9","text":" @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\n and then reverting unless the tokens plus a proportional protocol fee have been returned.\n The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\n for each token contract. `tokens` must be sorted in ascending order.\n The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\n `receiveFlashLoan` call.\n Emits `FlashLoan` events."},"functionSelector":"5c38449e","id":694,"implemented":false,"kind":"function","modifiers":[],"name":"flashLoan","nameLocation":"33732:9:9","nodeType":"FunctionDefinition","parameters":{"id":692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":682,"mutability":"mutable","name":"recipient","nameLocation":"33771:9:9","nodeType":"VariableDeclaration","scope":694,"src":"33751:29:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IFlashLoanRecipient_$179","typeString":"contract IFlashLoanRecipient"},"typeName":{"id":681,"nodeType":"UserDefinedTypeName","pathNode":{"id":680,"name":"IFlashLoanRecipient","nameLocations":["33751:19:9"],"nodeType":"IdentifierPath","referencedDeclaration":179,"src":"33751:19:9"},"referencedDeclaration":179,"src":"33751:19:9","typeDescriptions":{"typeIdentifier":"t_contract$_IFlashLoanRecipient_$179","typeString":"contract IFlashLoanRecipient"}},"visibility":"internal"},{"constant":false,"id":686,"mutability":"mutable","name":"tokens","nameLocation":"33806:6:9","nodeType":"VariableDeclaration","scope":694,"src":"33790:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$140_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":684,"nodeType":"UserDefinedTypeName","pathNode":{"id":683,"name":"IERC20","nameLocations":["33790:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":140,"src":"33790:6:9"},"referencedDeclaration":140,"src":"33790:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}},"id":685,"nodeType":"ArrayTypeName","src":"33790:8:9","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$140_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":689,"mutability":"mutable","name":"amounts","nameLocation":"33839:7:9","nodeType":"VariableDeclaration","scope":694,"src":"33822:24:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":687,"name":"uint256","nodeType":"ElementaryTypeName","src":"33822:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":688,"nodeType":"ArrayTypeName","src":"33822:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":691,"mutability":"mutable","name":"userData","nameLocation":"33869:8:9","nodeType":"VariableDeclaration","scope":694,"src":"33856:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":690,"name":"bytes","nodeType":"ElementaryTypeName","src":"33856:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"33741:142:9"},"returnParameters":{"id":693,"nodeType":"ParameterList","parameters":[],"src":"33892:0:9"},"scope":766,"src":"33723:170:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":{"id":695,"nodeType":"StructuredDocumentation","src":"33899:88:9","text":" @dev Emitted for each individual flash loan performed by `flashLoan`."},"eventSelector":"0d7d75e01ab95780d3cd1c8ec0dd6c2ce19e3a20427eec8bf53283b6fb8e95f0","id":707,"name":"FlashLoan","nameLocation":"33998:9:9","nodeType":"EventDefinition","parameters":{"id":706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":698,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"34036:9:9","nodeType":"VariableDeclaration","scope":707,"src":"34008:37:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IFlashLoanRecipient_$179","typeString":"contract IFlashLoanRecipient"},"typeName":{"id":697,"nodeType":"UserDefinedTypeName","pathNode":{"id":696,"name":"IFlashLoanRecipient","nameLocations":["34008:19:9"],"nodeType":"IdentifierPath","referencedDeclaration":179,"src":"34008:19:9"},"referencedDeclaration":179,"src":"34008:19:9","typeDescriptions":{"typeIdentifier":"t_contract$_IFlashLoanRecipient_$179","typeString":"contract IFlashLoanRecipient"}},"visibility":"internal"},{"constant":false,"id":701,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"34062:5:9","nodeType":"VariableDeclaration","scope":707,"src":"34047:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"},"typeName":{"id":700,"nodeType":"UserDefinedTypeName","pathNode":{"id":699,"name":"IERC20","nameLocations":["34047:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":140,"src":"34047:6:9"},"referencedDeclaration":140,"src":"34047:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":703,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"34077:6:9","nodeType":"VariableDeclaration","scope":707,"src":"34069:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":702,"name":"uint256","nodeType":"ElementaryTypeName","src":"34069:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":705,"indexed":false,"mutability":"mutable","name":"feeAmount","nameLocation":"34093:9:9","nodeType":"VariableDeclaration","scope":707,"src":"34085:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":704,"name":"uint256","nodeType":"ElementaryTypeName","src":"34085:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"34007:96:9"},"src":"33992:112:9"},{"documentation":{"id":708,"nodeType":"StructuredDocumentation","src":"35100:434:9","text":" @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\n Pool Balance management features batching, which means a single contract call can be used to perform multiple\n operations of different kinds, with different Pools and tokens, at once.\n For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`."},"functionSelector":"e6c46092","id":715,"implemented":false,"kind":"function","modifiers":[],"name":"managePoolBalance","nameLocation":"35548:17:9","nodeType":"FunctionDefinition","parameters":{"id":713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":712,"mutability":"mutable","name":"ops","nameLocation":"35589:3:9","nodeType":"VariableDeclaration","scope":715,"src":"35566:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_PoolBalanceOp_$726_memory_ptr_$dyn_memory_ptr","typeString":"struct IVault.PoolBalanceOp[]"},"typeName":{"baseType":{"id":710,"nodeType":"UserDefinedTypeName","pathNode":{"id":709,"name":"PoolBalanceOp","nameLocations":["35566:13:9"],"nodeType":"IdentifierPath","referencedDeclaration":726,"src":"35566:13:9"},"referencedDeclaration":726,"src":"35566:13:9","typeDescriptions":{"typeIdentifier":"t_struct$_PoolBalanceOp_$726_storage_ptr","typeString":"struct IVault.PoolBalanceOp"}},"id":711,"nodeType":"ArrayTypeName","src":"35566:15:9","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_PoolBalanceOp_$726_storage_$dyn_storage_ptr","typeString":"struct IVault.PoolBalanceOp[]"}},"visibility":"internal"}],"src":"35565:28:9"},"returnParameters":{"id":714,"nodeType":"ParameterList","parameters":[],"src":"35602:0:9"},"scope":766,"src":"35539:64:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"canonicalName":"IVault.PoolBalanceOp","id":726,"members":[{"constant":false,"id":718,"mutability":"mutable","name":"kind","nameLocation":"35658:4:9","nodeType":"VariableDeclaration","scope":726,"src":"35640:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PoolBalanceOpKind_$731","typeString":"enum IVault.PoolBalanceOpKind"},"typeName":{"id":717,"nodeType":"UserDefinedTypeName","pathNode":{"id":716,"name":"PoolBalanceOpKind","nameLocations":["35640:17:9"],"nodeType":"IdentifierPath","referencedDeclaration":731,"src":"35640:17:9"},"referencedDeclaration":731,"src":"35640:17:9","typeDescriptions":{"typeIdentifier":"t_enum$_PoolBalanceOpKind_$731","typeString":"enum IVault.PoolBalanceOpKind"}},"visibility":"internal"},{"constant":false,"id":720,"mutability":"mutable","name":"poolId","nameLocation":"35680:6:9","nodeType":"VariableDeclaration","scope":726,"src":"35672:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":719,"name":"bytes32","nodeType":"ElementaryTypeName","src":"35672:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":723,"mutability":"mutable","name":"token","nameLocation":"35703:5:9","nodeType":"VariableDeclaration","scope":726,"src":"35696:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"},"typeName":{"id":722,"nodeType":"UserDefinedTypeName","pathNode":{"id":721,"name":"IERC20","nameLocations":["35696:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":140,"src":"35696:6:9"},"referencedDeclaration":140,"src":"35696:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":725,"mutability":"mutable","name":"amount","nameLocation":"35726:6:9","nodeType":"VariableDeclaration","scope":726,"src":"35718:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":724,"name":"uint256","nodeType":"ElementaryTypeName","src":"35718:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"PoolBalanceOp","nameLocation":"35616:13:9","nodeType":"StructDefinition","scope":766,"src":"35609:130:9","visibility":"public"},{"canonicalName":"IVault.PoolBalanceOpKind","documentation":{"id":727,"nodeType":"StructuredDocumentation","src":"35745:486:9","text":" Withdrawals decrease the Pool's cash, but increase its managed balance, leaving the total balance unchanged.\n Deposits increase the Pool's cash, but decrease its managed balance, leaving the total balance unchanged.\n Updates don't affect the Pool's cash balance, but because the managed balance changes, it does alter the total.\n The external amount can be either increased or decreased by this call (i.e., reporting a gain or a loss)."},"id":731,"members":[{"id":728,"name":"WITHDRAW","nameLocation":"36261:8:9","nodeType":"EnumValue","src":"36261:8:9"},{"id":729,"name":"DEPOSIT","nameLocation":"36271:7:9","nodeType":"EnumValue","src":"36271:7:9"},{"id":730,"name":"UPDATE","nameLocation":"36280:6:9","nodeType":"EnumValue","src":"36280:6:9"}],"name":"PoolBalanceOpKind","nameLocation":"36241:17:9","nodeType":"EnumDefinition","src":"36236:52:9"},{"anonymous":false,"documentation":{"id":732,"nodeType":"StructuredDocumentation","src":"36294:109:9","text":" @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`."},"eventSelector":"6edcaf6241105b4c94c2efdbf3a6b12458eb3d07be3a0e81d24b13c44045fe7a","id":745,"name":"PoolBalanceManaged","nameLocation":"36414:18:9","nodeType":"EventDefinition","parameters":{"id":744,"nodeType":"ParameterList","parameters":[{"constant":false,"id":734,"indexed":true,"mutability":"mutable","name":"poolId","nameLocation":"36458:6:9","nodeType":"VariableDeclaration","scope":745,"src":"36442:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":733,"name":"bytes32","nodeType":"ElementaryTypeName","src":"36442:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":736,"indexed":true,"mutability":"mutable","name":"assetManager","nameLocation":"36490:12:9","nodeType":"VariableDeclaration","scope":745,"src":"36474:28:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":735,"name":"address","nodeType":"ElementaryTypeName","src":"36474:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":739,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"36527:5:9","nodeType":"VariableDeclaration","scope":745,"src":"36512:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"},"typeName":{"id":738,"nodeType":"UserDefinedTypeName","pathNode":{"id":737,"name":"IERC20","nameLocations":["36512:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":140,"src":"36512:6:9"},"referencedDeclaration":140,"src":"36512:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":741,"indexed":false,"mutability":"mutable","name":"cashDelta","nameLocation":"36549:9:9","nodeType":"VariableDeclaration","scope":745,"src":"36542:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":740,"name":"int256","nodeType":"ElementaryTypeName","src":"36542:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":743,"indexed":false,"mutability":"mutable","name":"managedDelta","nameLocation":"36575:12:9","nodeType":"VariableDeclaration","scope":745,"src":"36568:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":742,"name":"int256","nodeType":"ElementaryTypeName","src":"36568:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"36432:161:9"},"src":"36408:186:9"},{"documentation":{"id":746,"nodeType":"StructuredDocumentation","src":"37471:64:9","text":" @dev Returns the current protocol fee module."},"functionSelector":"d2946c2b","id":752,"implemented":false,"kind":"function","modifiers":[],"name":"getProtocolFeesCollector","nameLocation":"37549:24:9","nodeType":"FunctionDefinition","parameters":{"id":747,"nodeType":"ParameterList","parameters":[],"src":"37573:2:9"},"returnParameters":{"id":751,"nodeType":"ParameterList","parameters":[{"constant":false,"id":750,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":752,"src":"37599:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeesCollector_$248","typeString":"contract IProtocolFeesCollector"},"typeName":{"id":749,"nodeType":"UserDefinedTypeName","pathNode":{"id":748,"name":"IProtocolFeesCollector","nameLocations":["37599:22:9"],"nodeType":"IdentifierPath","referencedDeclaration":248,"src":"37599:22:9"},"referencedDeclaration":248,"src":"37599:22:9","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeesCollector_$248","typeString":"contract IProtocolFeesCollector"}},"visibility":"internal"}],"src":"37598:24:9"},"scope":766,"src":"37540:83:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":753,"nodeType":"StructuredDocumentation","src":"37629:635:9","text":" @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\n error in some part of the system.\n The Vault can only be paused during an initial time period, after which pausing is forever disabled.\n While the contract is paused, the following features are disabled:\n - depositing and transferring internal balance\n - transferring external balance (using the Vault's allowance)\n - swaps\n - joining Pools\n - Asset Manager interactions\n Internal Balance can still be withdrawn, and Pools exited."},"functionSelector":"16c38b3c","id":758,"implemented":false,"kind":"function","modifiers":[],"name":"setPaused","nameLocation":"38278:9:9","nodeType":"FunctionDefinition","parameters":{"id":756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":755,"mutability":"mutable","name":"paused","nameLocation":"38293:6:9","nodeType":"VariableDeclaration","scope":758,"src":"38288:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":754,"name":"bool","nodeType":"ElementaryTypeName","src":"38288:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"38287:13:9"},"returnParameters":{"id":757,"nodeType":"ParameterList","parameters":[],"src":"38309:0:9"},"scope":766,"src":"38269:41:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":759,"nodeType":"StructuredDocumentation","src":"38316:58:9","text":" @dev Returns the Vault's WETH instance."},"functionSelector":"ad5c4648","id":765,"implemented":false,"kind":"function","modifiers":[],"name":"WETH","nameLocation":"38388:4:9","nodeType":"FunctionDefinition","parameters":{"id":760,"nodeType":"ParameterList","parameters":[],"src":"38392:2:9"},"returnParameters":{"id":764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":763,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":765,"src":"38418:5:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IWETH_$62","typeString":"contract IWETH"},"typeName":{"id":762,"nodeType":"UserDefinedTypeName","pathNode":{"id":761,"name":"IWETH","nameLocations":["38418:5:9"],"nodeType":"IdentifierPath","referencedDeclaration":62,"src":"38418:5:9"},"referencedDeclaration":62,"src":"38418:5:9","typeDescriptions":{"typeIdentifier":"t_contract$_IWETH_$62","typeString":"contract IWETH"}},"visibility":"internal"}],"src":"38417:7:9"},"scope":766,"src":"38379:46:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":767,"src":"1329:37155:9","usedErrors":[],"usedEvents":[36,287,316,366,378,401,437,456,555,647,707,745]}],"src":"688:37797:9"},"id":9},"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[944],"Ownable":[914]},"id":915,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":768,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"102:24:10"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":770,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":915,"sourceUnit":945,"src":"128:45:10","symbolAliases":[{"foreign":{"id":769,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"136:7:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":772,"name":"Context","nameLocations":["692:7:10"],"nodeType":"IdentifierPath","referencedDeclaration":944,"src":"692:7:10"},"id":773,"nodeType":"InheritanceSpecifier","src":"692:7:10"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":771,"nodeType":"StructuredDocumentation","src":"175:487:10","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":914,"linearizedBaseContracts":[914,944],"name":"Ownable","nameLocation":"681:7:10","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":775,"mutability":"mutable","name":"_owner","nameLocation":"722:6:10","nodeType":"VariableDeclaration","scope":914,"src":"706:22:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":774,"name":"address","nodeType":"ElementaryTypeName","src":"706:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"documentation":{"id":776,"nodeType":"StructuredDocumentation","src":"735:85:10","text":" @dev The caller account is not authorized to perform an operation."},"errorSelector":"118cdaa7","id":780,"name":"OwnableUnauthorizedAccount","nameLocation":"831:26:10","nodeType":"ErrorDefinition","parameters":{"id":779,"nodeType":"ParameterList","parameters":[{"constant":false,"id":778,"mutability":"mutable","name":"account","nameLocation":"866:7:10","nodeType":"VariableDeclaration","scope":780,"src":"858:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":777,"name":"address","nodeType":"ElementaryTypeName","src":"858:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"857:17:10"},"src":"825:50:10"},{"documentation":{"id":781,"nodeType":"StructuredDocumentation","src":"881:82:10","text":" @dev The owner is not a valid owner account. (eg. `address(0)`)"},"errorSelector":"1e4fbdf7","id":785,"name":"OwnableInvalidOwner","nameLocation":"974:19:10","nodeType":"ErrorDefinition","parameters":{"id":784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":783,"mutability":"mutable","name":"owner","nameLocation":"1002:5:10","nodeType":"VariableDeclaration","scope":785,"src":"994:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":782,"name":"address","nodeType":"ElementaryTypeName","src":"994:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"993:15:10"},"src":"968:41:10"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":791,"name":"OwnershipTransferred","nameLocation":"1021:20:10","nodeType":"EventDefinition","parameters":{"id":790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":787,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"1058:13:10","nodeType":"VariableDeclaration","scope":791,"src":"1042:29:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":786,"name":"address","nodeType":"ElementaryTypeName","src":"1042:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":789,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"1089:8:10","nodeType":"VariableDeclaration","scope":791,"src":"1073:24:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":788,"name":"address","nodeType":"ElementaryTypeName","src":"1073:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1041:57:10"},"src":"1015:84:10"},{"body":{"id":816,"nodeType":"Block","src":"1259:153:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":797,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":794,"src":"1273:12:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1297:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":799,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1289:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":798,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:10","typeDescriptions":{}}},"id":801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1289:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1273:26:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":811,"nodeType":"IfStatement","src":"1269:95:10","trueBody":{"id":810,"nodeType":"Block","src":"1301:63:10","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1350:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":805,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1342:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":804,"name":"address","nodeType":"ElementaryTypeName","src":"1342:7:10","typeDescriptions":{}}},"id":807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1342:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":803,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"1322:19:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1322:31:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":809,"nodeType":"RevertStatement","src":"1315:38:10"}]}},{"expression":{"arguments":[{"id":813,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":794,"src":"1392:12:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":812,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"1373:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":814,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1373:32:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":815,"nodeType":"ExpressionStatement","src":"1373:32:10"}]},"documentation":{"id":792,"nodeType":"StructuredDocumentation","src":"1105:115:10","text":" @dev Initializes the contract setting the address provided by the deployer as the initial owner."},"id":817,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":794,"mutability":"mutable","name":"initialOwner","nameLocation":"1245:12:10","nodeType":"VariableDeclaration","scope":817,"src":"1237:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":793,"name":"address","nodeType":"ElementaryTypeName","src":"1237:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1236:22:10"},"returnParameters":{"id":796,"nodeType":"ParameterList","parameters":[],"src":"1259:0:10"},"scope":914,"src":"1225:187:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":824,"nodeType":"Block","src":"1521:41:10","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":820,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"1531:11:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1531:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":822,"nodeType":"ExpressionStatement","src":"1531:13:10"},{"id":823,"nodeType":"PlaceholderStatement","src":"1554:1:10"}]},"documentation":{"id":818,"nodeType":"StructuredDocumentation","src":"1418:77:10","text":" @dev Throws if called by any account other than the owner."},"id":825,"name":"onlyOwner","nameLocation":"1509:9:10","nodeType":"ModifierDefinition","parameters":{"id":819,"nodeType":"ParameterList","parameters":[],"src":"1518:2:10"},"src":"1500:62:10","virtual":false,"visibility":"internal"},{"body":{"id":833,"nodeType":"Block","src":"1693:30:10","statements":[{"expression":{"id":831,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"1710:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":830,"id":832,"nodeType":"Return","src":"1703:13:10"}]},"documentation":{"id":826,"nodeType":"StructuredDocumentation","src":"1568:65:10","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":834,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1647:5:10","nodeType":"FunctionDefinition","parameters":{"id":827,"nodeType":"ParameterList","parameters":[],"src":"1652:2:10"},"returnParameters":{"id":830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":829,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":834,"src":"1684:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":828,"name":"address","nodeType":"ElementaryTypeName","src":"1684:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1683:9:10"},"scope":914,"src":"1638:85:10","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":850,"nodeType":"Block","src":"1841:117:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":838,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"1855:5:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1855:7:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":840,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"1866:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1866:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1855:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":849,"nodeType":"IfStatement","src":"1851:101:10","trueBody":{"id":848,"nodeType":"Block","src":"1880:72:10","statements":[{"errorCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":844,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"1928:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1928:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":843,"name":"OwnableUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"1901:26:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:40:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":847,"nodeType":"RevertStatement","src":"1894:47:10"}]}}]},"documentation":{"id":835,"nodeType":"StructuredDocumentation","src":"1729:62:10","text":" @dev Throws if the sender is not the owner."},"id":851,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1805:11:10","nodeType":"FunctionDefinition","parameters":{"id":836,"nodeType":"ParameterList","parameters":[],"src":"1816:2:10"},"returnParameters":{"id":837,"nodeType":"ParameterList","parameters":[],"src":"1841:0:10"},"scope":914,"src":"1796:162:10","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":864,"nodeType":"Block","src":"2347:47:10","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2384:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":859,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2376:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":858,"name":"address","nodeType":"ElementaryTypeName","src":"2376:7:10","typeDescriptions":{}}},"id":861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2376:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":857,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"2357:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2357:30:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":863,"nodeType":"ExpressionStatement","src":"2357:30:10"}]},"documentation":{"id":852,"nodeType":"StructuredDocumentation","src":"1964:324:10","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":865,"implemented":true,"kind":"function","modifiers":[{"id":855,"kind":"modifierInvocation","modifierName":{"id":854,"name":"onlyOwner","nameLocations":["2337:9:10"],"nodeType":"IdentifierPath","referencedDeclaration":825,"src":"2337:9:10"},"nodeType":"ModifierInvocation","src":"2337:9:10"}],"name":"renounceOwnership","nameLocation":"2302:17:10","nodeType":"FunctionDefinition","parameters":{"id":853,"nodeType":"ParameterList","parameters":[],"src":"2319:2:10"},"returnParameters":{"id":856,"nodeType":"ParameterList","parameters":[],"src":"2347:0:10"},"scope":914,"src":"2293:101:10","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":892,"nodeType":"Block","src":"2613:145:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":873,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"2627:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2647:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":875,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2639:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":874,"name":"address","nodeType":"ElementaryTypeName","src":"2639:7:10","typeDescriptions":{}}},"id":877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2627:22:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":887,"nodeType":"IfStatement","src":"2623:91:10","trueBody":{"id":886,"nodeType":"Block","src":"2651:63:10","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2700:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":881,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2692:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":880,"name":"address","nodeType":"ElementaryTypeName","src":"2692:7:10","typeDescriptions":{}}},"id":883,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2692:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":879,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"2672:19:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":884,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2672:31:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":885,"nodeType":"RevertStatement","src":"2665:38:10"}]}},{"expression":{"arguments":[{"id":889,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"2742:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":888,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"2723:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":890,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2723:28:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":891,"nodeType":"ExpressionStatement","src":"2723:28:10"}]},"documentation":{"id":866,"nodeType":"StructuredDocumentation","src":"2400:138:10","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":893,"implemented":true,"kind":"function","modifiers":[{"id":871,"kind":"modifierInvocation","modifierName":{"id":870,"name":"onlyOwner","nameLocations":["2603:9:10"],"nodeType":"IdentifierPath","referencedDeclaration":825,"src":"2603:9:10"},"nodeType":"ModifierInvocation","src":"2603:9:10"}],"name":"transferOwnership","nameLocation":"2552:17:10","nodeType":"FunctionDefinition","parameters":{"id":869,"nodeType":"ParameterList","parameters":[{"constant":false,"id":868,"mutability":"mutable","name":"newOwner","nameLocation":"2578:8:10","nodeType":"VariableDeclaration","scope":893,"src":"2570:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":867,"name":"address","nodeType":"ElementaryTypeName","src":"2570:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2569:18:10"},"returnParameters":{"id":872,"nodeType":"ParameterList","parameters":[],"src":"2613:0:10"},"scope":914,"src":"2543:215:10","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":912,"nodeType":"Block","src":"2975:124:10","statements":[{"assignments":[900],"declarations":[{"constant":false,"id":900,"mutability":"mutable","name":"oldOwner","nameLocation":"2993:8:10","nodeType":"VariableDeclaration","scope":912,"src":"2985:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":899,"name":"address","nodeType":"ElementaryTypeName","src":"2985:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":902,"initialValue":{"id":901,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"3004:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2985:25:10"},{"expression":{"id":905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":903,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"3020:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":904,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":896,"src":"3029:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3020:17:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":906,"nodeType":"ExpressionStatement","src":"3020:17:10"},{"eventCall":{"arguments":[{"id":908,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":900,"src":"3073:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":909,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":896,"src":"3083:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":907,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"3052:20:10","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3052:40:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":911,"nodeType":"EmitStatement","src":"3047:45:10"}]},"documentation":{"id":894,"nodeType":"StructuredDocumentation","src":"2764:143:10","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":913,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2921:18:10","nodeType":"FunctionDefinition","parameters":{"id":897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":896,"mutability":"mutable","name":"newOwner","nameLocation":"2948:8:10","nodeType":"VariableDeclaration","scope":913,"src":"2940:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":895,"name":"address","nodeType":"ElementaryTypeName","src":"2940:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2939:18:10"},"returnParameters":{"id":898,"nodeType":"ParameterList","parameters":[],"src":"2975:0:10"},"scope":914,"src":"2912:187:10","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":915,"src":"663:2438:10","usedErrors":[780,785],"usedEvents":[791]}],"src":"102:3000:10"},"id":10},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[944]},"id":945,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":916,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:11"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":917,"nodeType":"StructuredDocumentation","src":"127:496:11","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":944,"linearizedBaseContracts":[944],"name":"Context","nameLocation":"642:7:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":925,"nodeType":"Block","src":"718:34:11","statements":[{"expression":{"expression":{"id":922,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:11","memberName":"sender","nodeType":"MemberAccess","src":"735:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":921,"id":924,"nodeType":"Return","src":"728:17:11"}]},"id":926,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:11","nodeType":"FunctionDefinition","parameters":{"id":918,"nodeType":"ParameterList","parameters":[],"src":"675:2:11"},"returnParameters":{"id":921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":920,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":926,"src":"709:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":919,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:11"},"scope":944,"src":"656:96:11","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":934,"nodeType":"Block","src":"825:32:11","statements":[{"expression":{"expression":{"id":931,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:11","memberName":"data","nodeType":"MemberAccess","src":"842:8:11","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":930,"id":933,"nodeType":"Return","src":"835:15:11"}]},"id":935,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:11","nodeType":"FunctionDefinition","parameters":{"id":927,"nodeType":"ParameterList","parameters":[],"src":"775:2:11"},"returnParameters":{"id":930,"nodeType":"ParameterList","parameters":[{"constant":false,"id":929,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":935,"src":"809:14:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":928,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:11"},"scope":944,"src":"758:99:11","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":942,"nodeType":"Block","src":"935:25:11","statements":[{"expression":{"hexValue":"30","id":940,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":939,"id":941,"nodeType":"Return","src":"945:8:11"}]},"id":943,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:11","nodeType":"FunctionDefinition","parameters":{"id":936,"nodeType":"ParameterList","parameters":[],"src":"892:2:11"},"returnParameters":{"id":939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":938,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":943,"src":"926:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":937,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:11"},"scope":944,"src":"863:97:11","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":945,"src":"624:338:11","usedErrors":[],"usedEvents":[]}],"src":"101:862:11"},"id":11},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","exportedSymbols":{"ReentrancyGuard":[1013]},"id":1014,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":946,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:12"},{"abstract":true,"baseContracts":[],"canonicalName":"ReentrancyGuard","contractDependencies":[],"contractKind":"contract","documentation":{"id":947,"nodeType":"StructuredDocumentation","src":"135:894:12","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n consider using {ReentrancyGuardTransient} instead.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":1013,"linearizedBaseContracts":[1013],"name":"ReentrancyGuard","nameLocation":"1048:15:12","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":950,"mutability":"constant","name":"NOT_ENTERED","nameLocation":"1843:11:12","nodeType":"VariableDeclaration","scope":1013,"src":"1818:40:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":948,"name":"uint256","nodeType":"ElementaryTypeName","src":"1818:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1857:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":953,"mutability":"constant","name":"ENTERED","nameLocation":"1889:7:12","nodeType":"VariableDeclaration","scope":1013,"src":"1864:36:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":951,"name":"uint256","nodeType":"ElementaryTypeName","src":"1864:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":952,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1899:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":955,"mutability":"mutable","name":"_status","nameLocation":"1923:7:12","nodeType":"VariableDeclaration","scope":1013,"src":"1907:23:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":954,"name":"uint256","nodeType":"ElementaryTypeName","src":"1907:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"documentation":{"id":956,"nodeType":"StructuredDocumentation","src":"1937:52:12","text":" @dev Unauthorized reentrant call."},"errorSelector":"3ee5aeb5","id":958,"name":"ReentrancyGuardReentrantCall","nameLocation":"2000:28:12","nodeType":"ErrorDefinition","parameters":{"id":957,"nodeType":"ParameterList","parameters":[],"src":"2028:2:12"},"src":"1994:37:12"},{"body":{"id":965,"nodeType":"Block","src":"2051:38:12","statements":[{"expression":{"id":963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":961,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":955,"src":"2061:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":962,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":950,"src":"2071:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2061:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":964,"nodeType":"ExpressionStatement","src":"2061:21:12"}]},"id":966,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":959,"nodeType":"ParameterList","parameters":[],"src":"2048:2:12"},"returnParameters":{"id":960,"nodeType":"ParameterList","parameters":[],"src":"2051:0:12"},"scope":1013,"src":"2037:52:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":976,"nodeType":"Block","src":"2490:79:12","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":969,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":993,"src":"2500:19:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":970,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2500:21:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":971,"nodeType":"ExpressionStatement","src":"2500:21:12"},{"id":972,"nodeType":"PlaceholderStatement","src":"2531:1:12"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":973,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"2542:18:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2542:20:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":975,"nodeType":"ExpressionStatement","src":"2542:20:12"}]},"documentation":{"id":967,"nodeType":"StructuredDocumentation","src":"2095:366:12","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":977,"name":"nonReentrant","nameLocation":"2475:12:12","nodeType":"ModifierDefinition","parameters":{"id":968,"nodeType":"ParameterList","parameters":[],"src":"2487:2:12"},"src":"2466:103:12","virtual":false,"visibility":"internal"},{"body":{"id":992,"nodeType":"Block","src":"2614:268:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":980,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":955,"src":"2702:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":981,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":953,"src":"2713:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2702:18:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":987,"nodeType":"IfStatement","src":"2698:86:12","trueBody":{"id":986,"nodeType":"Block","src":"2722:62:12","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":983,"name":"ReentrancyGuardReentrantCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":958,"src":"2743:28:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2743:30:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":985,"nodeType":"RevertStatement","src":"2736:37:12"}]}},{"expression":{"id":990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":988,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":955,"src":"2858:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":989,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":953,"src":"2868:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2858:17:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":991,"nodeType":"ExpressionStatement","src":"2858:17:12"}]},"id":993,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2584:19:12","nodeType":"FunctionDefinition","parameters":{"id":978,"nodeType":"ParameterList","parameters":[],"src":"2603:2:12"},"returnParameters":{"id":979,"nodeType":"ParameterList","parameters":[],"src":"2614:0:12"},"scope":1013,"src":"2575:307:12","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1000,"nodeType":"Block","src":"2926:170:12","statements":[{"expression":{"id":998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":996,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":955,"src":"3068:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":997,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":950,"src":"3078:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3068:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":999,"nodeType":"ExpressionStatement","src":"3068:21:12"}]},"id":1001,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2897:18:12","nodeType":"FunctionDefinition","parameters":{"id":994,"nodeType":"ParameterList","parameters":[],"src":"2915:2:12"},"returnParameters":{"id":995,"nodeType":"ParameterList","parameters":[],"src":"2926:0:12"},"scope":1013,"src":"2888:208:12","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1011,"nodeType":"Block","src":"3339:42:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1007,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":955,"src":"3356:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1008,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":953,"src":"3367:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3356:18:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1006,"id":1010,"nodeType":"Return","src":"3349:25:12"}]},"documentation":{"id":1002,"nodeType":"StructuredDocumentation","src":"3102:168:12","text":" @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."},"id":1012,"implemented":true,"kind":"function","modifiers":[],"name":"_reentrancyGuardEntered","nameLocation":"3284:23:12","nodeType":"FunctionDefinition","parameters":{"id":1003,"nodeType":"ParameterList","parameters":[],"src":"3307:2:12"},"returnParameters":{"id":1006,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1005,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1012,"src":"3333:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1004,"name":"bool","nodeType":"ElementaryTypeName","src":"3333:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3332:6:12"},"scope":1013,"src":"3275:106:12","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1014,"src":"1030:2353:12","usedErrors":[958],"usedEvents":[]}],"src":"109:3275:12"},"id":12},"contracts/BalancerFlashLoanArb.sol":{"ast":{"absolutePath":"contracts/BalancerFlashLoanArb.sol","exportedSymbols":{"BalancerFlashLoanArb":[1383],"Context":[944],"IAsset":[144],"IAuthentication":[10],"IAuthorizer":[159],"IERC20":[140],"IFlashLoanRecipient":[179],"IProtocolFeesCollector":[248],"ISignaturesValidator":[28],"ITemporarilyPausable":[47],"IVault":[766],"IWETH":[62],"Ownable":[914],"ReentrancyGuard":[1013]},"id":1384,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1015,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:13"},{"absolutePath":"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol","file":"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol","id":1016,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1384,"sourceUnit":767,"src":"58:65:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol","file":"@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol","id":1017,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1384,"sourceUnit":180,"src":"124:78:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol","file":"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol","id":1018,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1384,"sourceUnit":141,"src":"203:87:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":1019,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1384,"sourceUnit":915,"src":"291:52:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","file":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","id":1020,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1384,"sourceUnit":1014,"src":"344:59:13","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1021,"name":"IFlashLoanRecipient","nameLocations":["438:19:13"],"nodeType":"IdentifierPath","referencedDeclaration":179,"src":"438:19:13"},"id":1022,"nodeType":"InheritanceSpecifier","src":"438:19:13"},{"baseName":{"id":1023,"name":"Ownable","nameLocations":["459:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":914,"src":"459:7:13"},"id":1024,"nodeType":"InheritanceSpecifier","src":"459:7:13"},{"baseName":{"id":1025,"name":"ReentrancyGuard","nameLocations":["468:15:13"],"nodeType":"IdentifierPath","referencedDeclaration":1013,"src":"468:15:13"},"id":1026,"nodeType":"InheritanceSpecifier","src":"468:15:13"}],"canonicalName":"BalancerFlashLoanArb","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1383,"linearizedBaseContracts":[1383,1013,914,944,179],"name":"BalancerFlashLoanArb","nameLocation":"414:20:13","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":1029,"mutability":"immutable","name":"vault","nameLocation":"515:5:13","nodeType":"VariableDeclaration","scope":1383,"src":"490:30:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$766","typeString":"contract IVault"},"typeName":{"id":1028,"nodeType":"UserDefinedTypeName","pathNode":{"id":1027,"name":"IVault","nameLocations":["490:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":766,"src":"490:6:13"},"referencedDeclaration":766,"src":"490:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$766","typeString":"contract IVault"}},"visibility":"private"},{"constant":true,"functionSelector":"f840f3fc","id":1032,"mutability":"constant","name":"PERMIT2_CONTRACT","nameLocation":"587:16:13","nodeType":"VariableDeclaration","scope":1383,"src":"563:93:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1030,"name":"address","nodeType":"ElementaryTypeName","src":"563:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307830303030303030303030323244343733303330463131366444454539463642343361433738424133","id":1031,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"614:42:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0x000000000022D473030F116dDEE9F6B43aC78BA3"},"visibility":"public"},{"anonymous":false,"eventSelector":"e03a36d920ad8de5a978a8f1917280e202ae9193e6dc19e08ef1f6c2a051eba4","id":1042,"name":"FlashLoanExecuted","nameLocation":"689:17:13","nodeType":"EventDefinition","parameters":{"id":1041,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1034,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"732:5:13","nodeType":"VariableDeclaration","scope":1042,"src":"716:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1033,"name":"address","nodeType":"ElementaryTypeName","src":"716:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1036,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"755:6:13","nodeType":"VariableDeclaration","scope":1042,"src":"747:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1035,"name":"uint256","nodeType":"ElementaryTypeName","src":"747:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1038,"indexed":false,"mutability":"mutable","name":"feeAmount","nameLocation":"779:9:13","nodeType":"VariableDeclaration","scope":1042,"src":"771:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1037,"name":"uint256","nodeType":"ElementaryTypeName","src":"771:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1040,"indexed":false,"mutability":"mutable","name":"profit","nameLocation":"806:6:13","nodeType":"VariableDeclaration","scope":1042,"src":"798:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1039,"name":"uint256","nodeType":"ElementaryTypeName","src":"798:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"706:112:13"},"src":"683:136:13"},{"anonymous":false,"eventSelector":"5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd9695","id":1048,"name":"EmergencyWithdraw","nameLocation":"830:17:13","nodeType":"EventDefinition","parameters":{"id":1047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1044,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"864:5:13","nodeType":"VariableDeclaration","scope":1048,"src":"848:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1043,"name":"address","nodeType":"ElementaryTypeName","src":"848:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1046,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"879:6:13","nodeType":"VariableDeclaration","scope":1048,"src":"871:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1045,"name":"uint256","nodeType":"ElementaryTypeName","src":"871:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"847:39:13"},"src":"824:63:13"},{"errorSelector":"82b42900","id":1050,"name":"Unauthorized","nameLocation":"922:12:13","nodeType":"ErrorDefinition","parameters":{"id":1049,"nodeType":"ParameterList","parameters":[],"src":"934:2:13"},"src":"916:21:13"},{"errorSelector":"81ceff30","id":1052,"name":"SwapFailed","nameLocation":"948:10:13","nodeType":"ErrorDefinition","parameters":{"id":1051,"nodeType":"ParameterList","parameters":[],"src":"958:2:13"},"src":"942:19:13"},{"errorSelector":"4e47f8ea","id":1054,"name":"InsufficientProfit","nameLocation":"972:18:13","nodeType":"ErrorDefinition","parameters":{"id":1053,"nodeType":"ParameterList","parameters":[],"src":"990:2:13"},"src":"966:27:13"},{"errorSelector":"2c5211c6","id":1056,"name":"InvalidAmount","nameLocation":"1004:13:13","nodeType":"ErrorDefinition","parameters":{"id":1055,"nodeType":"ParameterList","parameters":[],"src":"1017:2:13"},"src":"998:22:13"},{"errorSelector":"90b8ec18","id":1058,"name":"TransferFailed","nameLocation":"1031:14:13","nodeType":"ErrorDefinition","parameters":{"id":1057,"nodeType":"ParameterList","parameters":[],"src":"1045:2:13"},"src":"1025:23:13"},{"body":{"id":1073,"nodeType":"Block","src":"1102:39:13","statements":[{"expression":{"id":1071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1067,"name":"vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1029,"src":"1112:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$766","typeString":"contract IVault"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1069,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1060,"src":"1127:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1068,"name":"IVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"1120:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IVault_$766_$","typeString":"type(contract IVault)"}},"id":1070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1120:14:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$766","typeString":"contract IVault"}},"src":"1112:22:13","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$766","typeString":"contract IVault"}},"id":1072,"nodeType":"ExpressionStatement","src":"1112:22:13"}]},"id":1074,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"expression":{"id":1063,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1090:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1094:6:13","memberName":"sender","nodeType":"MemberAccess","src":"1090:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":1065,"kind":"baseConstructorSpecifier","modifierName":{"id":1062,"name":"Ownable","nameLocations":["1082:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":914,"src":"1082:7:13"},"nodeType":"ModifierInvocation","src":"1082:19:13"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1060,"mutability":"mutable","name":"_vault","nameLocation":"1074:6:13","nodeType":"VariableDeclaration","scope":1074,"src":"1066:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1059,"name":"address","nodeType":"ElementaryTypeName","src":"1066:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1065:16:13"},"returnParameters":{"id":1066,"nodeType":"ParameterList","parameters":[],"src":"1102:0:13"},"scope":1383,"src":"1054:87:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1117,"nodeType":"Block","src":"1550:249:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1092,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"1568:6:13","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$140_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},"id":1093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1575:6:13","memberName":"length","nodeType":"MemberAccess","src":"1568:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1094,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1082,"src":"1585:7:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1593:6:13","memberName":"length","nodeType":"MemberAccess","src":"1585:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1568:31:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4172726179206c656e677468206d69736d61746368","id":1097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1601:23:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_179ae693e0c70d403e6d1a2bebe6454a8d095a8abd12c6f3f032c5018f3e2aea","typeString":"literal_string \"Array length mismatch\""},"value":"Array length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_179ae693e0c70d403e6d1a2bebe6454a8d095a8abd12c6f3f032c5018f3e2aea","typeString":"literal_string \"Array length mismatch\""}],"id":1091,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1560:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1560:65:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1099,"nodeType":"ExpressionStatement","src":"1560:65:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1101,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"1643:6:13","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$140_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},"id":1102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1650:6:13","memberName":"length","nodeType":"MemberAccess","src":"1643:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1659:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1643:17:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"456d70747920617272617973","id":1105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1662:14:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_920fc87d8e9a45232b5e4c2c36e3c0fff5f09b5434a80d6ec35d7f09f9d69c29","typeString":"literal_string \"Empty arrays\""},"value":"Empty arrays"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_920fc87d8e9a45232b5e4c2c36e3c0fff5f09b5434a80d6ec35d7f09f9d69c29","typeString":"literal_string \"Empty arrays\""}],"id":1100,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1635:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1635:42:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1107,"nodeType":"ExpressionStatement","src":"1635:42:13"},{"expression":{"arguments":[{"id":1111,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1760:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_BalancerFlashLoanArb_$1383","typeString":"contract BalancerFlashLoanArb"}},{"id":1112,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"1766:6:13","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$140_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},{"id":1113,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1082,"src":"1774:7:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1114,"name":"swapData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1084,"src":"1783:8:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BalancerFlashLoanArb_$1383","typeString":"contract BalancerFlashLoanArb"},{"typeIdentifier":"t_array$_t_contract$_IERC20_$140_$dyn_memory_ptr","typeString":"contract IERC20[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1108,"name":"vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1029,"src":"1744:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$766","typeString":"contract IVault"}},"id":1110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1750:9:13","memberName":"flashLoan","nodeType":"MemberAccess","referencedDeclaration":694,"src":"1744:15:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_contract$_IFlashLoanRecipient_$179_$_t_array$_t_contract$_IERC20_$140_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IFlashLoanRecipient,contract IERC20[] memory,uint256[] memory,bytes memory) external"}},"id":1115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1744:48:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1116,"nodeType":"ExpressionStatement","src":"1744:48:13"}]},"documentation":{"id":1075,"nodeType":"StructuredDocumentation","src":"1147:237:13","text":"@notice フラッシュローンを実行\n @param tokens 借りるトークンの配列（通常は1つのトークン）\n @param amounts 借りる量の配列\n @param swapData 0x Protocolのスワップデータ"},"functionSelector":"76ec49ba","id":1118,"implemented":true,"kind":"function","modifiers":[{"id":1087,"kind":"modifierInvocation","modifierName":{"id":1086,"name":"onlyOwner","nameLocations":["1527:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":825,"src":"1527:9:13"},"nodeType":"ModifierInvocation","src":"1527:9:13"},{"id":1089,"kind":"modifierInvocation","modifierName":{"id":1088,"name":"nonReentrant","nameLocations":["1537:12:13"],"nodeType":"IdentifierPath","referencedDeclaration":977,"src":"1537:12:13"},"nodeType":"ModifierInvocation","src":"1537:12:13"}],"name":"executeFlashLoan","nameLocation":"1398:16:13","nodeType":"FunctionDefinition","parameters":{"id":1085,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1079,"mutability":"mutable","name":"tokens","nameLocation":"1440:6:13","nodeType":"VariableDeclaration","scope":1118,"src":"1424:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$140_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":1077,"nodeType":"UserDefinedTypeName","pathNode":{"id":1076,"name":"IERC20","nameLocations":["1424:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":140,"src":"1424:6:13"},"referencedDeclaration":140,"src":"1424:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}},"id":1078,"nodeType":"ArrayTypeName","src":"1424:8:13","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$140_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":1082,"mutability":"mutable","name":"amounts","nameLocation":"1473:7:13","nodeType":"VariableDeclaration","scope":1118,"src":"1456:24:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1080,"name":"uint256","nodeType":"ElementaryTypeName","src":"1456:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1081,"nodeType":"ArrayTypeName","src":"1456:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1084,"mutability":"mutable","name":"swapData","nameLocation":"1503:8:13","nodeType":"VariableDeclaration","scope":1118,"src":"1490:21:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1083,"name":"bytes","nodeType":"ElementaryTypeName","src":"1490:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1414:103:13"},"returnParameters":{"id":1090,"nodeType":"ParameterList","parameters":[],"src":"1550:0:13"},"scope":1383,"src":"1389:410:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[178],"body":{"id":1246,"nodeType":"Block","src":"2053:1694:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1135,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2126:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2130:6:13","memberName":"sender","nodeType":"MemberAccess","src":"2126:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":1139,"name":"vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1029,"src":"2148:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$766","typeString":"contract IVault"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IVault_$766","typeString":"contract IVault"}],"id":1138,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2140:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1137,"name":"address","nodeType":"ElementaryTypeName","src":"2140:7:13","typeDescriptions":{}}},"id":1140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2140:14:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2126:28:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1145,"nodeType":"IfStatement","src":"2122:55:13","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1142,"name":"Unauthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"2163:12:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2163:14:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1144,"nodeType":"RevertStatement","src":"2156:21:13"}},{"assignments":[1148],"declarations":[{"constant":false,"id":1148,"mutability":"mutable","name":"token","nameLocation":"2258:5:13","nodeType":"VariableDeclaration","scope":1246,"src":"2251:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"},"typeName":{"id":1147,"nodeType":"UserDefinedTypeName","pathNode":{"id":1146,"name":"IERC20","nameLocations":["2251:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":140,"src":"2251:6:13"},"referencedDeclaration":140,"src":"2251:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}},"visibility":"internal"}],"id":1152,"initialValue":{"baseExpression":{"id":1149,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1123,"src":"2266:6:13","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$140_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},"id":1151,"indexExpression":{"hexValue":"30","id":1150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2273:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2266:9:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}},"nodeType":"VariableDeclarationStatement","src":"2251:24:13"},{"assignments":[1154],"declarations":[{"constant":false,"id":1154,"mutability":"mutable","name":"amount","nameLocation":"2293:6:13","nodeType":"VariableDeclaration","scope":1246,"src":"2285:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1153,"name":"uint256","nodeType":"ElementaryTypeName","src":"2285:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1158,"initialValue":{"baseExpression":{"id":1155,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"2302:7:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1157,"indexExpression":{"hexValue":"30","id":1156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2310:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2302:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2285:27:13"},{"assignments":[1160],"declarations":[{"constant":false,"id":1160,"mutability":"mutable","name":"feeAmount","nameLocation":"2330:9:13","nodeType":"VariableDeclaration","scope":1246,"src":"2322:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1159,"name":"uint256","nodeType":"ElementaryTypeName","src":"2322:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1164,"initialValue":{"baseExpression":{"id":1161,"name":"feeAmounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"2342:10:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1163,"indexExpression":{"hexValue":"30","id":1162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2353:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2342:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2322:33:13"},{"assignments":[1166],"declarations":[{"constant":false,"id":1166,"mutability":"mutable","name":"balanceBefore","nameLocation":"2404:13:13","nodeType":"VariableDeclaration","scope":1246,"src":"2396:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1165,"name":"uint256","nodeType":"ElementaryTypeName","src":"2396:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1174,"initialValue":{"arguments":[{"arguments":[{"id":1171,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2444:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_BalancerFlashLoanArb_$1383","typeString":"contract BalancerFlashLoanArb"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BalancerFlashLoanArb_$1383","typeString":"contract BalancerFlashLoanArb"}],"id":1170,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2436:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1169,"name":"address","nodeType":"ElementaryTypeName","src":"2436:7:13","typeDescriptions":{}}},"id":1172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2436:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1167,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1148,"src":"2420:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}},"id":1168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2426:9:13","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":79,"src":"2420:15:13","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2420:30:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2396:54:13"},{"expression":{"arguments":[{"arguments":[{"id":1178,"name":"PERMIT2_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1032,"src":"2540:16:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1179,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1154,"src":"2558:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1176,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1148,"src":"2526:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}},"id":1177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2532:7:13","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":109,"src":"2526:13:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2526:39:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"417070726f76616c206661696c6564","id":1181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2567:17:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_943d1e3eddd033b0757a7ad9dc3dff9f8f150c5b720d6ee708e13ac5fc8e5d07","typeString":"literal_string \"Approval failed\""},"value":"Approval failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_943d1e3eddd033b0757a7ad9dc3dff9f8f150c5b720d6ee708e13ac5fc8e5d07","typeString":"literal_string \"Approval failed\""}],"id":1175,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2518:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2518:67:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1183,"nodeType":"ExpressionStatement","src":"2518:67:13"},{"assignments":[1185,null],"declarations":[{"constant":false,"id":1185,"mutability":"mutable","name":"success","nameLocation":"2977:7:13","nodeType":"VariableDeclaration","scope":1246,"src":"2972:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1184,"name":"bool","nodeType":"ElementaryTypeName","src":"2972:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1190,"initialValue":{"arguments":[{"id":1188,"name":"userData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1131,"src":"3012:8:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1186,"name":"PERMIT2_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1032,"src":"2990:16:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3007:4:13","memberName":"call","nodeType":"MemberAccess","src":"2990:21:13","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2990:31:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2971:50:13"},{"condition":{"id":1192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3035:8:13","subExpression":{"id":1191,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1185,"src":"3036:7:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1196,"nodeType":"IfStatement","src":"3031:33:13","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1193,"name":"SwapFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1052,"src":"3052:10:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3052:12:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1195,"nodeType":"RevertStatement","src":"3045:19:13"}},{"assignments":[1198],"declarations":[{"constant":false,"id":1198,"mutability":"mutable","name":"balanceAfter","nameLocation":"3119:12:13","nodeType":"VariableDeclaration","scope":1246,"src":"3111:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1197,"name":"uint256","nodeType":"ElementaryTypeName","src":"3111:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1206,"initialValue":{"arguments":[{"arguments":[{"id":1203,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3158:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_BalancerFlashLoanArb_$1383","typeString":"contract BalancerFlashLoanArb"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BalancerFlashLoanArb_$1383","typeString":"contract BalancerFlashLoanArb"}],"id":1202,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3150:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1201,"name":"address","nodeType":"ElementaryTypeName","src":"3150:7:13","typeDescriptions":{}}},"id":1204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3150:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1199,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1148,"src":"3134:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}},"id":1200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3140:9:13","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":79,"src":"3134:15:13","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3134:30:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3111:53:13"},{"assignments":[1208],"declarations":[{"constant":false,"id":1208,"mutability":"mutable","name":"amountToRepay","nameLocation":"3236:13:13","nodeType":"VariableDeclaration","scope":1246,"src":"3228:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1207,"name":"uint256","nodeType":"ElementaryTypeName","src":"3228:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1210,"initialValue":{"id":1209,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1154,"src":"3252:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3228:30:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1211,"name":"balanceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1198,"src":"3407:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":1212,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1154,"src":"3423:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3407:22:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1217,"nodeType":"IfStatement","src":"3403:55:13","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1214,"name":"InsufficientProfit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"3438:18:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3438:20:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1216,"nodeType":"RevertStatement","src":"3431:27:13"}},{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1223,"name":"vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1029,"src":"3535:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$766","typeString":"contract IVault"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IVault_$766","typeString":"contract IVault"}],"id":1222,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3527:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1221,"name":"address","nodeType":"ElementaryTypeName","src":"3527:7:13","typeDescriptions":{}}},"id":1224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3527:14:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1225,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1154,"src":"3543:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1219,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1148,"src":"3512:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}},"id":1220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3518:8:13","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":89,"src":"3512:14:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3512:38:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5472616e73666572206661696c6564","id":1227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3552:17:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51","typeString":"literal_string \"Transfer failed\""},"value":"Transfer failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51","typeString":"literal_string \"Transfer failed\""}],"id":1218,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3504:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3504:66:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1229,"nodeType":"ExpressionStatement","src":"3504:66:13"},{"assignments":[1231],"declarations":[{"constant":false,"id":1231,"mutability":"mutable","name":"profit","nameLocation":"3643:6:13","nodeType":"VariableDeclaration","scope":1246,"src":"3635:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1230,"name":"uint256","nodeType":"ElementaryTypeName","src":"3635:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1235,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1232,"name":"balanceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1198,"src":"3652:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1233,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1154,"src":"3667:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3652:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3635:38:13"},{"eventCall":{"arguments":[{"arguments":[{"id":1239,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1148,"src":"3714:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}],"id":1238,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3706:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1237,"name":"address","nodeType":"ElementaryTypeName","src":"3706:7:13","typeDescriptions":{}}},"id":1240,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3706:14:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1241,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1154,"src":"3722:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":1242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3730:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1243,"name":"profit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"3733:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1236,"name":"FlashLoanExecuted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1042,"src":"3688:17:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256,uint256)"}},"id":1244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3688:52:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1245,"nodeType":"EmitStatement","src":"3683:57:13"}]},"documentation":{"id":1119,"nodeType":"StructuredDocumentation","src":"1805:59:13","text":"@notice Balancerが呼び出すコールバック関数"},"functionSelector":"f04f2707","id":1247,"implemented":true,"kind":"function","modifiers":[],"name":"receiveFlashLoan","nameLocation":"1878:16:13","nodeType":"FunctionDefinition","overrides":{"id":1133,"nodeType":"OverrideSpecifier","overrides":[],"src":"2044:8:13"},"parameters":{"id":1132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1123,"mutability":"mutable","name":"tokens","nameLocation":"1920:6:13","nodeType":"VariableDeclaration","scope":1247,"src":"1904:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$140_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":1121,"nodeType":"UserDefinedTypeName","pathNode":{"id":1120,"name":"IERC20","nameLocations":["1904:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":140,"src":"1904:6:13"},"referencedDeclaration":140,"src":"1904:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}},"id":1122,"nodeType":"ArrayTypeName","src":"1904:8:13","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$140_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":1126,"mutability":"mutable","name":"amounts","nameLocation":"1953:7:13","nodeType":"VariableDeclaration","scope":1247,"src":"1936:24:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1124,"name":"uint256","nodeType":"ElementaryTypeName","src":"1936:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1125,"nodeType":"ArrayTypeName","src":"1936:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1129,"mutability":"mutable","name":"feeAmounts","nameLocation":"1987:10:13","nodeType":"VariableDeclaration","scope":1247,"src":"1970:27:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1127,"name":"uint256","nodeType":"ElementaryTypeName","src":"1970:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1128,"nodeType":"ArrayTypeName","src":"1970:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1131,"mutability":"mutable","name":"userData","nameLocation":"2020:8:13","nodeType":"VariableDeclaration","scope":1247,"src":"2007:21:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1130,"name":"bytes","nodeType":"ElementaryTypeName","src":"2007:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1894:140:13"},"returnParameters":{"id":1134,"nodeType":"ParameterList","parameters":[],"src":"2053:0:13"},"scope":1383,"src":"1869:1878:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1342,"nodeType":"Block","src":"3939:722:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1255,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1250,"src":"3953:12:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3977:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1257,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3969:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1256,"name":"address","nodeType":"ElementaryTypeName","src":"3969:7:13","typeDescriptions":{}}},"id":1259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3969:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3953:26:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1340,"nodeType":"Block","src":"4310:345:13","statements":[{"assignments":[1303],"declarations":[{"constant":false,"id":1303,"mutability":"mutable","name":"token","nameLocation":"4367:5:13","nodeType":"VariableDeclaration","scope":1340,"src":"4360:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"},"typeName":{"id":1302,"nodeType":"UserDefinedTypeName","pathNode":{"id":1301,"name":"IERC20","nameLocations":["4360:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":140,"src":"4360:6:13"},"referencedDeclaration":140,"src":"4360:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}},"visibility":"internal"}],"id":1307,"initialValue":{"arguments":[{"id":1305,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1250,"src":"4382:12:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1304,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":140,"src":"4375:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$140_$","typeString":"type(contract IERC20)"}},"id":1306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4375:20:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}},"nodeType":"VariableDeclarationStatement","src":"4360:35:13"},{"assignments":[1309],"declarations":[{"constant":false,"id":1309,"mutability":"mutable","name":"balance","nameLocation":"4417:7:13","nodeType":"VariableDeclaration","scope":1340,"src":"4409:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1308,"name":"uint256","nodeType":"ElementaryTypeName","src":"4409:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1317,"initialValue":{"arguments":[{"arguments":[{"id":1314,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4451:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_BalancerFlashLoanArb_$1383","typeString":"contract BalancerFlashLoanArb"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BalancerFlashLoanArb_$1383","typeString":"contract BalancerFlashLoanArb"}],"id":1313,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4443:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1312,"name":"address","nodeType":"ElementaryTypeName","src":"4443:7:13","typeDescriptions":{}}},"id":1315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4443:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1310,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"4427:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}},"id":1311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4433:9:13","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":79,"src":"4427:15:13","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4427:30:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4409:48:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1319,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1309,"src":"4479:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4489:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4479:11:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f20746f6b656e2062616c616e6365","id":1322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4492:18:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_f8536626b412a46c35de6ed74b090726e51e6188c2c2bdfef9a7161e6f493992","typeString":"literal_string \"No token balance\""},"value":"No token balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f8536626b412a46c35de6ed74b090726e51e6188c2c2bdfef9a7161e6f493992","typeString":"literal_string \"No token balance\""}],"id":1318,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4471:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4471:40:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1324,"nodeType":"ExpressionStatement","src":"4471:40:13"},{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1328,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"4548:5:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1329,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4548:7:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1330,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1309,"src":"4557:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1326,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"4533:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$140","typeString":"contract IERC20"}},"id":1327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4539:8:13","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":89,"src":"4533:14:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4533:32:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5472616e73666572206661696c6564","id":1332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4567:17:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51","typeString":"literal_string \"Transfer failed\""},"value":"Transfer failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51","typeString":"literal_string \"Transfer failed\""}],"id":1325,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4525:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4525:60:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1334,"nodeType":"ExpressionStatement","src":"4525:60:13"},{"eventCall":{"arguments":[{"id":1336,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1250,"src":"4622:12:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1337,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1309,"src":"4636:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1335,"name":"EmergencyWithdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"4604:17:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1338,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4604:40:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1339,"nodeType":"EmitStatement","src":"4599:45:13"}]},"id":1341,"nodeType":"IfStatement","src":"3949:706:13","trueBody":{"id":1300,"nodeType":"Block","src":"3981:323:13","statements":[{"assignments":[1262],"declarations":[{"constant":false,"id":1262,"mutability":"mutable","name":"balance","nameLocation":"4037:7:13","nodeType":"VariableDeclaration","scope":1300,"src":"4029:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1261,"name":"uint256","nodeType":"ElementaryTypeName","src":"4029:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1268,"initialValue":{"expression":{"arguments":[{"id":1265,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4055:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_BalancerFlashLoanArb_$1383","typeString":"contract BalancerFlashLoanArb"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BalancerFlashLoanArb_$1383","typeString":"contract BalancerFlashLoanArb"}],"id":1264,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4047:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1263,"name":"address","nodeType":"ElementaryTypeName","src":"4047:7:13","typeDescriptions":{}}},"id":1266,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4047:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4061:7:13","memberName":"balance","nodeType":"MemberAccess","src":"4047:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4029:39:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1270,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1262,"src":"4090:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4100:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4090:11:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f204554482062616c616e6365","id":1273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4103:16:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_a59a84690063b053e17f07f5c73996b4ba2242b8ef998b4347da8fd090922bcd","typeString":"literal_string \"No ETH balance\""},"value":"No ETH balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a59a84690063b053e17f07f5c73996b4ba2242b8ef998b4347da8fd090922bcd","typeString":"literal_string \"No ETH balance\""}],"id":1269,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4082:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4082:38:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1275,"nodeType":"ExpressionStatement","src":"4082:38:13"},{"assignments":[1277,null],"declarations":[{"constant":false,"id":1277,"mutability":"mutable","name":"success","nameLocation":"4140:7:13","nodeType":"VariableDeclaration","scope":1300,"src":"4135:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1276,"name":"bool","nodeType":"ElementaryTypeName","src":"4135:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1285,"initialValue":{"arguments":[{"hexValue":"","id":1283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4182:2:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1278,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"4153:5:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4153:7:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4161:4:13","memberName":"call","nodeType":"MemberAccess","src":"4153:12:13","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1281,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1262,"src":"4173:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"4153:28:13","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4153:32:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4134:51:13"},{"condition":{"id":1287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4203:8:13","subExpression":{"id":1286,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1277,"src":"4204:7:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1291,"nodeType":"IfStatement","src":"4199:37:13","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1288,"name":"TransferFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1058,"src":"4220:14:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4220:16:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1290,"nodeType":"RevertStatement","src":"4213:23:13"}},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1295,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4281:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1294,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4273:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1293,"name":"address","nodeType":"ElementaryTypeName","src":"4273:7:13","typeDescriptions":{}}},"id":1296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4273:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1297,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1262,"src":"4285:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1292,"name":"EmergencyWithdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"4255:17:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1298,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4255:38:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1299,"nodeType":"EmitStatement","src":"4250:43:13"}]}}]},"documentation":{"id":1248,"nodeType":"StructuredDocumentation","src":"3753:122:13","text":"@notice トークンを引き出す\n @param tokenAddress 引き出すトークンのアドレス（0x0でETH）"},"functionSelector":"51cff8d9","id":1343,"implemented":true,"kind":"function","modifiers":[{"id":1253,"kind":"modifierInvocation","modifierName":{"id":1252,"name":"onlyOwner","nameLocations":["3929:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":825,"src":"3929:9:13"},"nodeType":"ModifierInvocation","src":"3929:9:13"}],"name":"withdraw","nameLocation":"3889:8:13","nodeType":"FunctionDefinition","parameters":{"id":1251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1250,"mutability":"mutable","name":"tokenAddress","nameLocation":"3906:12:13","nodeType":"VariableDeclaration","scope":1343,"src":"3898:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1249,"name":"address","nodeType":"ElementaryTypeName","src":"3898:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3897:22:13"},"returnParameters":{"id":1254,"nodeType":"ParameterList","parameters":[],"src":"3939:0:13"},"scope":1383,"src":"3880:781:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1376,"nodeType":"Block","src":"4874:124:13","statements":[{"body":{"id":1374,"nodeType":"Block","src":"4928:64:13","statements":[{"clauses":[{"block":{"id":1369,"nodeType":"Block","src":"4971:2:13","statements":[]},"errorName":"","id":1370,"nodeType":"TryCatchClause","src":"4971:2:13"},{"block":{"id":1371,"nodeType":"Block","src":"4980:2:13","statements":[]},"errorName":"","id":1372,"nodeType":"TryCatchClause","src":"4974:8:13"}],"externalCall":{"arguments":[{"baseExpression":{"id":1365,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1347,"src":"4960:6:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":1367,"indexExpression":{"id":1366,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1353,"src":"4967:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4960:9:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1363,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4946:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_BalancerFlashLoanArb_$1383","typeString":"contract BalancerFlashLoanArb"}},"id":1364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4951:8:13","memberName":"withdraw","nodeType":"MemberAccess","referencedDeclaration":1343,"src":"4946:13:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$__$","typeString":"function (address) external"}},"id":1368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4946:24:13","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1373,"nodeType":"TryStatement","src":"4942:40:13"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1356,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1353,"src":"4904:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1357,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1347,"src":"4908:6:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":1358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4915:6:13","memberName":"length","nodeType":"MemberAccess","src":"4908:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4904:17:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1375,"initializationExpression":{"assignments":[1353],"declarations":[{"constant":false,"id":1353,"mutability":"mutable","name":"i","nameLocation":"4897:1:13","nodeType":"VariableDeclaration","scope":1375,"src":"4889:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1352,"name":"uint256","nodeType":"ElementaryTypeName","src":"4889:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1355,"initialValue":{"hexValue":"30","id":1354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4901:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4889:13:13"},"loopExpression":{"expression":{"id":1361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4923:3:13","subExpression":{"id":1360,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1353,"src":"4923:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1362,"nodeType":"ExpressionStatement","src":"4923:3:13"},"nodeType":"ForStatement","src":"4884:108:13"}]},"documentation":{"id":1344,"nodeType":"StructuredDocumentation","src":"4667:107:13","text":"@notice 複数トークンの一括引き出し\n @param tokens トークンアドレスの配列"},"functionSelector":"12867764","id":1377,"implemented":true,"kind":"function","modifiers":[{"id":1350,"kind":"modifierInvocation","modifierName":{"id":1349,"name":"onlyOwner","nameLocations":["4864:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":825,"src":"4864:9:13"},"nodeType":"ModifierInvocation","src":"4864:9:13"}],"name":"emergencyWithdrawMultiple","nameLocation":"4788:25:13","nodeType":"FunctionDefinition","parameters":{"id":1348,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1347,"mutability":"mutable","name":"tokens","nameLocation":"4842:6:13","nodeType":"VariableDeclaration","scope":1377,"src":"4823:25:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1345,"name":"address","nodeType":"ElementaryTypeName","src":"4823:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1346,"nodeType":"ArrayTypeName","src":"4823:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"4813:41:13"},"returnParameters":{"id":1351,"nodeType":"ParameterList","parameters":[],"src":"4874:0:13"},"scope":1383,"src":"4779:219:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1381,"nodeType":"Block","src":"5084:2:13","statements":[]},"documentation":{"id":1378,"nodeType":"StructuredDocumentation","src":"5004:48:13","text":"@notice ETHを受け取れるようにする"},"id":1382,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1379,"nodeType":"ParameterList","parameters":[],"src":"5064:2:13"},"returnParameters":{"id":1380,"nodeType":"ParameterList","parameters":[],"src":"5084:0:13"},"scope":1383,"src":"5057:29:13","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":1384,"src":"405:4683:13","usedErrors":[780,785,958,1050,1052,1054,1056,1058],"usedEvents":[791,1042,1048]}],"src":"32:5057:13"},"id":13}},"contracts":{"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol":{"IAuthentication":{"abi":[{"inputs":[{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"getActionId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"getActionId(bytes4)":"851c1bb3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getActionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getActionId(bytes4)\":{\"details\":\"Returns the action identifier associated with the external function described by `selector`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":\"IAuthentication\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0x2d45ea7c14dc950acf5917377d9eb67d2b1d9f8b8d81fa60eeaad345cf257655\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c387331bc3da670d45d54af96b067ea6fce6f3e0e5fac53b86fba73d5e9e874a\",\"dweb:/ipfs/QmYkY4d2TDA4BXpjz1RPQn8rdWvZVTi3pSBbiUSaPFKwtM\"]}},\"version\":1}"}},"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol":{"ISignaturesValidator":{"abi":[{"inputs":[],"name":"getDomainSeparator","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"getNextNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"getDomainSeparator()":"ed24911d","getNextNonce(address)":"90193b7c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNextNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the SignatureValidator helper, used to support meta-transactions.\",\"kind\":\"dev\",\"methods\":{\"getDomainSeparator()\":{\"details\":\"Returns the EIP712 domain separator.\"},\"getNextNonce(address)\":{\"details\":\"Returns the next nonce used by an address to sign messages.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol\":\"ISignaturesValidator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol\":{\"keccak256\":\"0x571907ff5a68a10937b13e0828dd78bf9508f6e74eaafe7faf525453160c3627\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://afb73b213075954086eb7fa4eb4fac4962b779c8dd8c9c72902336d64c13210e\",\"dweb:/ipfs/QmNWFPnoPxo8ToVHrqXaQQF8RPYeNNhV2eZN9EwFS3iHpz\"]}},\"version\":1}"}},"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol":{"ITemporarilyPausable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"paused","type":"bool"}],"name":"PausedStateChanged","type":"event"},{"inputs":[],"name":"getPausedState","outputs":[{"internalType":"bool","name":"paused","type":"bool"},{"internalType":"uint256","name":"pauseWindowEndTime","type":"uint256"},{"internalType":"uint256","name":"bufferPeriodEndTime","type":"uint256"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"getPausedState()":"1c0de051"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"PausedStateChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bufferPeriodEndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the TemporarilyPausable helper.\",\"events\":{\"PausedStateChanged(bool)\":{\"details\":\"Emitted every time the pause state changes by `_setPaused`.\"}},\"kind\":\"dev\",\"methods\":{\"getPausedState()\":{\"details\":\"Returns the current paused state.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol\":\"ITemporarilyPausable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol\":{\"keccak256\":\"0x7d98e4751329dd9effc016cbc5acdf6399d3592407b9d3e28b38c10c621e56a3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://a70c4c16829f31c75dd0a3987137ed1572a0343ff933dcdcfbef17d5d63307ae\",\"dweb:/ipfs/QmSGBafawe525NbvK8LVN1rsD2yJxaS83QoTNC84evwM2E\"]}},\"version\":1}"}},"@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol":{"IWETH":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"deposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","deposit()":"d0e30db0","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd","withdraw(uint256)":"2e1a7d4d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for WETH9. See https://github.com/gnosis/canonical-weth/blob/0dd1ea3e295eef916d0c6223ec63141137d22d67/contracts/WETH9.sol\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol\":\"IWETH\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol\":{\"keccak256\":\"0x41c26d92fde92c927352c447ff80e3b2216d076662f2b222b735e4c865a481dc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://291a4b4f141ea187a61c3bb1ab16b370012e7e80ddc045671015ab2bfaf3c52c\",\"dweb:/ipfs/QmXvvVdfZC3pAqLst3bW9Fbj8mS9y1t1k7Zqr9BXuKdUHP\"]},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\":{\"keccak256\":\"0x3c415102b8b53a3efe0209b7fa4fd052a48b35a1df99e1b37572597d25030249\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8aac0d9f5ff03e0edeb07e1c400b78edea5948acff7e113ba52fd32f86cad72d\",\"dweb:/ipfs/Qmbh6C53fCjvjoHEVZHNadpRq5KZJzfHpDeR3qYfPgKvZt\"]}},\"version\":1}"}},"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\":{\"keccak256\":\"0x3c415102b8b53a3efe0209b7fa4fd052a48b35a1df99e1b37572597d25030249\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8aac0d9f5ff03e0edeb07e1c400b78edea5948acff7e113ba52fd32f86cad72d\",\"dweb:/ipfs/Qmbh6C53fCjvjoHEVZHNadpRq5KZJzfHpDeR3qYfPgKvZt\"]}},\"version\":1}"}},"@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol":{"IAsset":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like types. This concept is unrelated to a Pool's Asset Managers.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol\":\"IAsset\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol\":{\"keccak256\":\"0x780769a0bd8655d8a05a75b062b32a65b775b9deb923b2e8f42f57a0ee263a2d\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b63d22729102954a657432d81b31764e6dbdc7216a6deb991499a73dc4ebbd7b\",\"dweb:/ipfs/QmWRyByegCCJr37yesLi7urtzNk2BBiDEjzbkPpV8TKy1X\"]}},\"version\":1}"}},"@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol":{"IAuthorizer":{"abi":[{"inputs":[{"internalType":"bytes32","name":"actionId","type":"bytes32"},{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"where","type":"address"}],"name":"canPerform","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"canPerform(bytes32,address,address)":"9be2a884"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"actionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"}],\"name\":\"canPerform\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"canPerform(bytes32,address,address)\":{\"details\":\"Returns true if `account` can perform the action described by `actionId` in the contract `where`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol\":\"IAuthorizer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x1407e18b806b109e6a878697d2942eeb17bfc6cc601da725941658b90dc9dcc6\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://e2695f5ae435de2de9fa9dc3b165f05b5bf876217aba0e4bcbd20943a23fc831\",\"dweb:/ipfs/QmYTmazrQQqjb4znByMiUUviqbXKTebrhpP8MDERZ5PLxz\"]}},\"version\":1}"}},"@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol":{"IFlashLoanRecipient":{"abi":[{"inputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"uint256[]","name":"feeAmounts","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"receiveFlashLoan","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"receiveFlashLoan(address[],uint256[],uint256[],bytes)":"f04f2707"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"receiveFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"receiveFlashLoan(address[],uint256[],uint256[],bytes)\":{\"details\":\"When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient. At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the Vault, or else the entire flash loan will revert. `userData` is the same value passed in the `IVault.flashLoan` call.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol\":\"IFlashLoanRecipient\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\":{\"keccak256\":\"0x3c415102b8b53a3efe0209b7fa4fd052a48b35a1df99e1b37572597d25030249\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8aac0d9f5ff03e0edeb07e1c400b78edea5948acff7e113ba52fd32f86cad72d\",\"dweb:/ipfs/Qmbh6C53fCjvjoHEVZHNadpRq5KZJzfHpDeR3qYfPgKvZt\"]},\"@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol\":{\"keccak256\":\"0xadcf6e9f8677de9ec51a1bbb419da349b7c0c17af8b8cddad85ee0e80107036e\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://e9b30c1b15e3d0990a4a343fac14d2263c4bae4c3bdbeb38489103b4f6f66c39\",\"dweb:/ipfs/QmeQjBDidkLAoq4nknwPPPmunSTvQEZ9shaAhPiJAPmbk6\"]}},\"version\":1}"}},"@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol":{"IProtocolFeesCollector":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"newFlashLoanFeePercentage","type":"uint256"}],"name":"FlashLoanFeePercentageChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"newSwapFeePercentage","type":"uint256"}],"name":"SwapFeePercentageChanged","type":"event"},{"inputs":[],"name":"getAuthorizer","outputs":[{"internalType":"contract IAuthorizer","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"}],"name":"getCollectedFeeAmounts","outputs":[{"internalType":"uint256[]","name":"feeAmounts","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getFlashLoanFeePercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSwapFeePercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"newFlashLoanFeePercentage","type":"uint256"}],"name":"setFlashLoanFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newSwapFeePercentage","type":"uint256"}],"name":"setSwapFeePercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"vault","outputs":[{"internalType":"contract IVault","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"address","name":"recipient","type":"address"}],"name":"withdrawCollectedFees","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"getAuthorizer()":"aaabadc5","getCollectedFeeAmounts(address[])":"e42abf35","getFlashLoanFeePercentage()":"d877845c","getSwapFeePercentage()":"55c67628","setFlashLoanFeePercentage(uint256)":"6b6b9f69","setSwapFeePercentage(uint256)":"38e9922e","vault()":"fbfa77cf","withdrawCollectedFees(address[],uint256[],address)":"6daefab6"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFlashLoanFeePercentage\",\"type\":\"uint256\"}],\"name\":\"FlashLoanFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"SwapFeePercentageChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getCollectedFeeAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFlashLoanFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFlashLoanFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setFlashLoanFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawCollectedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol\":\"IProtocolFeesCollector\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0x2d45ea7c14dc950acf5917377d9eb67d2b1d9f8b8d81fa60eeaad345cf257655\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c387331bc3da670d45d54af96b067ea6fce6f3e0e5fac53b86fba73d5e9e874a\",\"dweb:/ipfs/QmYkY4d2TDA4BXpjz1RPQn8rdWvZVTi3pSBbiUSaPFKwtM\"]},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol\":{\"keccak256\":\"0x571907ff5a68a10937b13e0828dd78bf9508f6e74eaafe7faf525453160c3627\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://afb73b213075954086eb7fa4eb4fac4962b779c8dd8c9c72902336d64c13210e\",\"dweb:/ipfs/QmNWFPnoPxo8ToVHrqXaQQF8RPYeNNhV2eZN9EwFS3iHpz\"]},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol\":{\"keccak256\":\"0x7d98e4751329dd9effc016cbc5acdf6399d3592407b9d3e28b38c10c621e56a3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://a70c4c16829f31c75dd0a3987137ed1572a0343ff933dcdcfbef17d5d63307ae\",\"dweb:/ipfs/QmSGBafawe525NbvK8LVN1rsD2yJxaS83QoTNC84evwM2E\"]},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol\":{\"keccak256\":\"0x41c26d92fde92c927352c447ff80e3b2216d076662f2b222b735e4c865a481dc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://291a4b4f141ea187a61c3bb1ab16b370012e7e80ddc045671015ab2bfaf3c52c\",\"dweb:/ipfs/QmXvvVdfZC3pAqLst3bW9Fbj8mS9y1t1k7Zqr9BXuKdUHP\"]},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\":{\"keccak256\":\"0x3c415102b8b53a3efe0209b7fa4fd052a48b35a1df99e1b37572597d25030249\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8aac0d9f5ff03e0edeb07e1c400b78edea5948acff7e113ba52fd32f86cad72d\",\"dweb:/ipfs/Qmbh6C53fCjvjoHEVZHNadpRq5KZJzfHpDeR3qYfPgKvZt\"]},\"@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol\":{\"keccak256\":\"0x780769a0bd8655d8a05a75b062b32a65b775b9deb923b2e8f42f57a0ee263a2d\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b63d22729102954a657432d81b31764e6dbdc7216a6deb991499a73dc4ebbd7b\",\"dweb:/ipfs/QmWRyByegCCJr37yesLi7urtzNk2BBiDEjzbkPpV8TKy1X\"]},\"@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x1407e18b806b109e6a878697d2942eeb17bfc6cc601da725941658b90dc9dcc6\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://e2695f5ae435de2de9fa9dc3b165f05b5bf876217aba0e4bcbd20943a23fc831\",\"dweb:/ipfs/QmYTmazrQQqjb4znByMiUUviqbXKTebrhpP8MDERZ5PLxz\"]},\"@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol\":{\"keccak256\":\"0xadcf6e9f8677de9ec51a1bbb419da349b7c0c17af8b8cddad85ee0e80107036e\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://e9b30c1b15e3d0990a4a343fac14d2263c4bae4c3bdbeb38489103b4f6f66c39\",\"dweb:/ipfs/QmeQjBDidkLAoq4nknwPPPmunSTvQEZ9shaAhPiJAPmbk6\"]},\"@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol\":{\"keccak256\":\"0xe18a4e04a4a4e828c81548cc50d9d8ab6461dafbe88929c0342fa2b6c08e0d76\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://7056ea1221db4eacc3e263ea8b9d741c11b1871f745169a39c6f926dab9c403f\",\"dweb:/ipfs/QmabGZff9x43RJUororFfmMzocB2UuZDDBMhhfELEeSJue\"]},\"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\":{\"keccak256\":\"0x63425148b27356cee63cf843ef8918d3ff6cdd8d5c00371326bca8b4331b773c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6764d2a22a2e23de5235ceb0d06ebb9006f694c59547b8dc82dbc2e215d1f230\",\"dweb:/ipfs/Qmb6BQBgUQno6RAqPPR8qeC3smNEC3Bm6y8ZcWEWZKAfhF\"]}},\"version\":1}"}},"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol":{"IVault":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IAuthorizer","name":"newAuthorizer","type":"address"}],"name":"AuthorizerChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ExternalBalanceTransfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IFlashLoanRecipient","name":"recipient","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"feeAmount","type":"uint256"}],"name":"FlashLoan","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":false,"internalType":"int256","name":"delta","type":"int256"}],"name":"InternalBalanceChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"paused","type":"bool"}],"name":"PausedStateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"poolId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"liquidityProvider","type":"address"},{"indexed":false,"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"indexed":false,"internalType":"int256[]","name":"deltas","type":"int256[]"},{"indexed":false,"internalType":"uint256[]","name":"protocolFeeAmounts","type":"uint256[]"}],"name":"PoolBalanceChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"poolId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"assetManager","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"token","type":"address"},{"indexed":false,"internalType":"int256","name":"cashDelta","type":"int256"},{"indexed":false,"internalType":"int256","name":"managedDelta","type":"int256"}],"name":"PoolBalanceManaged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"poolId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"poolAddress","type":"address"},{"indexed":false,"internalType":"enum IVault.PoolSpecialization","name":"specialization","type":"uint8"}],"name":"PoolRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"relayer","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"RelayerApprovalChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"poolId","type":"bytes32"},{"indexed":true,"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"indexed":true,"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountOut","type":"uint256"}],"name":"Swap","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"poolId","type":"bytes32"},{"indexed":false,"internalType":"contract IERC20[]","name":"tokens","type":"address[]"}],"name":"TokensDeregistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"poolId","type":"bytes32"},{"indexed":false,"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"indexed":false,"internalType":"address[]","name":"assetManagers","type":"address[]"}],"name":"TokensRegistered","type":"event"},{"inputs":[],"name":"WETH","outputs":[{"internalType":"contract IWETH","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum IVault.SwapKind","name":"kind","type":"uint8"},{"components":[{"internalType":"bytes32","name":"poolId","type":"bytes32"},{"internalType":"uint256","name":"assetInIndex","type":"uint256"},{"internalType":"uint256","name":"assetOutIndex","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct IVault.BatchSwapStep[]","name":"swaps","type":"tuple[]"},{"internalType":"contract IAsset[]","name":"assets","type":"address[]"},{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"bool","name":"fromInternalBalance","type":"bool"},{"internalType":"address payable","name":"recipient","type":"address"},{"internalType":"bool","name":"toInternalBalance","type":"bool"}],"internalType":"struct IVault.FundManagement","name":"funds","type":"tuple"},{"internalType":"int256[]","name":"limits","type":"int256[]"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"batchSwap","outputs":[{"internalType":"int256[]","name":"","type":"int256[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"}],"name":"deregisterTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"address payable","name":"recipient","type":"address"},{"components":[{"internalType":"contract IAsset[]","name":"assets","type":"address[]"},{"internalType":"uint256[]","name":"minAmountsOut","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"},{"internalType":"bool","name":"toInternalBalance","type":"bool"}],"internalType":"struct IVault.ExitPoolRequest","name":"request","type":"tuple"}],"name":"exitPool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IFlashLoanRecipient","name":"recipient","type":"address"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"flashLoan","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"getActionId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAuthorizer","outputs":[{"internalType":"contract IAuthorizer","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getDomainSeparator","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"}],"name":"getInternalBalance","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"getNextNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPausedState","outputs":[{"internalType":"bool","name":"paused","type":"bool"},{"internalType":"uint256","name":"pauseWindowEndTime","type":"uint256"},{"internalType":"uint256","name":"bufferPeriodEndTime","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32"}],"name":"getPool","outputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"enum IVault.PoolSpecialization","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32"},{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"getPoolTokenInfo","outputs":[{"internalType":"uint256","name":"cash","type":"uint256"},{"internalType":"uint256","name":"managed","type":"uint256"},{"internalType":"uint256","name":"lastChangeBlock","type":"uint256"},{"internalType":"address","name":"assetManager","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32"}],"name":"getPoolTokens","outputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"balances","type":"uint256[]"},{"internalType":"uint256","name":"lastChangeBlock","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getProtocolFeesCollector","outputs":[{"internalType":"contract IProtocolFeesCollector","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"address","name":"relayer","type":"address"}],"name":"hasApprovedRelayer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"components":[{"internalType":"contract IAsset[]","name":"assets","type":"address[]"},{"internalType":"uint256[]","name":"maxAmountsIn","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"},{"internalType":"bool","name":"fromInternalBalance","type":"bool"}],"internalType":"struct IVault.JoinPoolRequest","name":"request","type":"tuple"}],"name":"joinPool","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"enum IVault.PoolBalanceOpKind","name":"kind","type":"uint8"},{"internalType":"bytes32","name":"poolId","type":"bytes32"},{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct IVault.PoolBalanceOp[]","name":"ops","type":"tuple[]"}],"name":"managePoolBalance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"enum IVault.UserBalanceOpKind","name":"kind","type":"uint8"},{"internalType":"contract IAsset","name":"asset","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"address payable","name":"recipient","type":"address"}],"internalType":"struct IVault.UserBalanceOp[]","name":"ops","type":"tuple[]"}],"name":"manageUserBalance","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"enum IVault.SwapKind","name":"kind","type":"uint8"},{"components":[{"internalType":"bytes32","name":"poolId","type":"bytes32"},{"internalType":"uint256","name":"assetInIndex","type":"uint256"},{"internalType":"uint256","name":"assetOutIndex","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct IVault.BatchSwapStep[]","name":"swaps","type":"tuple[]"},{"internalType":"contract IAsset[]","name":"assets","type":"address[]"},{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"bool","name":"fromInternalBalance","type":"bool"},{"internalType":"address payable","name":"recipient","type":"address"},{"internalType":"bool","name":"toInternalBalance","type":"bool"}],"internalType":"struct IVault.FundManagement","name":"funds","type":"tuple"}],"name":"queryBatchSwap","outputs":[{"internalType":"int256[]","name":"assetDeltas","type":"int256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum IVault.PoolSpecialization","name":"specialization","type":"uint8"}],"name":"registerPool","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"address[]","name":"assetManagers","type":"address[]"}],"name":"registerTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IAuthorizer","name":"newAuthorizer","type":"address"}],"name":"setAuthorizer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"paused","type":"bool"}],"name":"setPaused","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"relayer","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setRelayerApproval","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"poolId","type":"bytes32"},{"internalType":"enum IVault.SwapKind","name":"kind","type":"uint8"},{"internalType":"contract IAsset","name":"assetIn","type":"address"},{"internalType":"contract IAsset","name":"assetOut","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"userData","type":"bytes"}],"internalType":"struct IVault.SingleSwap","name":"singleSwap","type":"tuple"},{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"bool","name":"fromInternalBalance","type":"bool"},{"internalType":"address payable","name":"recipient","type":"address"},{"internalType":"bool","name":"toInternalBalance","type":"bool"}],"internalType":"struct IVault.FundManagement","name":"funds","type":"tuple"},{"internalType":"uint256","name":"limit","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"payable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"WETH()":"ad5c4648","batchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool),int256[],uint256)":"945bcec9","deregisterTokens(bytes32,address[])":"7d3aeb96","exitPool(bytes32,address,address,(address[],uint256[],bytes,bool))":"8bdb3913","flashLoan(address,address[],uint256[],bytes)":"5c38449e","getActionId(bytes4)":"851c1bb3","getAuthorizer()":"aaabadc5","getDomainSeparator()":"ed24911d","getInternalBalance(address,address[])":"0f5a6efa","getNextNonce(address)":"90193b7c","getPausedState()":"1c0de051","getPool(bytes32)":"f6c00927","getPoolTokenInfo(bytes32,address)":"b05f8e48","getPoolTokens(bytes32)":"f94d4668","getProtocolFeesCollector()":"d2946c2b","hasApprovedRelayer(address,address)":"fec90d72","joinPool(bytes32,address,address,(address[],uint256[],bytes,bool))":"b95cac28","managePoolBalance((uint8,bytes32,address,uint256)[])":"e6c46092","manageUserBalance((uint8,address,uint256,address,address)[])":"0e8e3e84","queryBatchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool))":"f84d066e","registerPool(uint8)":"09b2760f","registerTokens(bytes32,address[],address[])":"66a9c7d2","setAuthorizer(address)":"058a628f","setPaused(bool)":"16c38b3c","setRelayerApproval(address,address,bool)":"fa6e671d","swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address,bool),uint256,uint256)":"52bbbe29"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IAuthorizer\",\"name\":\"newAuthorizer\",\"type\":\"address\"}],\"name\":\"AuthorizerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExternalBalanceTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IFlashLoanRecipient\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"FlashLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"name\":\"InternalBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"PausedStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"deltas\",\"type\":\"int256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"protocolFeeAmounts\",\"type\":\"uint256[]\"}],\"name\":\"PoolBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cashDelta\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"managedDelta\",\"type\":\"int256\"}],\"name\":\"PoolBalanceManaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IVault.PoolSpecialization\",\"name\":\"specialization\",\"type\":\"uint8\"}],\"name\":\"PoolRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"RelayerApprovalChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"TokensDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"assetManagers\",\"type\":\"address[]\"}],\"name\":\"TokensRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"assetInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.BatchSwapStep[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"},{\"internalType\":\"int256[]\",\"name\":\"limits\",\"type\":\"int256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"batchSwap\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"deregisterTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.ExitPoolRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"exitPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFlashLoanRecipient\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getActionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getInternalBalance\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNextNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bufferPeriodEndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum IVault.PoolSpecialization\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPoolTokenInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"managed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetManager\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeesCollector\",\"outputs\":[{\"internalType\":\"contract IProtocolFeesCollector\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"hasApprovedRelayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.JoinPoolRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"joinPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IVault.PoolBalanceOpKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.PoolBalanceOp[]\",\"name\":\"ops\",\"type\":\"tuple[]\"}],\"name\":\"managePoolBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IVault.UserBalanceOpKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"contract IAsset\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct IVault.UserBalanceOp[]\",\"name\":\"ops\",\"type\":\"tuple[]\"}],\"name\":\"manageUserBalance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"assetInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.BatchSwapStep[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"}],\"name\":\"queryBatchSwap\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"assetDeltas\",\"type\":\"int256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IVault.PoolSpecialization\",\"name\":\"specialization\",\"type\":\"uint8\"}],\"name\":\"registerPool\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"assetManagers\",\"type\":\"address[]\"}],\"name\":\"registerTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"newAuthorizer\",\"type\":\"address\"}],\"name\":\"setAuthorizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setRelayerApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"enum IVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"contract IAsset\",\"name\":\"assetIn\",\"type\":\"address\"},{\"internalType\":\"contract IAsset\",\"name\":\"assetOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.SingleSwap\",\"name\":\"singleSwap\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Full external interface for the Vault core contract - no external or public methods exist in the contract that don't override one of these declarations.\",\"events\":{\"AuthorizerChanged(address)\":{\"details\":\"Emitted when a new authorizer is set by `setAuthorizer`.\"},\"ExternalBalanceTransfer(address,address,address,uint256)\":{\"details\":\"Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\"},\"FlashLoan(address,address,uint256,uint256)\":{\"details\":\"Emitted for each individual flash loan performed by `flashLoan`.\"},\"InternalBalanceChanged(address,address,int256)\":{\"details\":\"Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through interacting with Pools using Internal Balance. Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH address.\"},\"PausedStateChanged(bool)\":{\"details\":\"Emitted every time the pause state changes by `_setPaused`.\"},\"PoolBalanceChanged(bytes32,address,address[],int256[],uint256[])\":{\"details\":\"Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\"},\"PoolBalanceManaged(bytes32,address,address,int256,int256)\":{\"details\":\"Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\"},\"PoolRegistered(bytes32,address,uint8)\":{\"details\":\"Emitted when a Pool is registered by calling `registerPool`.\"},\"RelayerApprovalChanged(address,address,bool)\":{\"details\":\"Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\"},\"Swap(bytes32,address,address,uint256,uint256)\":{\"details\":\"Emitted for each individual swap performed by `swap` or `batchSwap`.\"},\"TokensDeregistered(bytes32,address[])\":{\"details\":\"Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\"},\"TokensRegistered(bytes32,address[],address[])\":{\"details\":\"Emitted when a Pool registers tokens by calling `registerTokens`.\"}},\"kind\":\"dev\",\"methods\":{\"WETH()\":{\"details\":\"Returns the Vault's WETH instance.\"},\"batchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool),int256[],uint256)\":{\"details\":\"Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either the amount of tokens sent to or received from the Pool, depending on the `kind` value. Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at the same index in the `assets` array. Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or `amountOut` depending on the swap kind. Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`. The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses, or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault. Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies the minimum or maximum amount of each token the vault is allowed to transfer. `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the equivalent `swap` call. Emits `Swap` events.\"},\"deregisterTokens(bytes32,address[])\":{\"details\":\"Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract. Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens must be deregistered in the same `deregisterTokens` call. A deregistered token can be re-registered later on, possibly with a different Asset Manager. Emits a `TokensDeregistered` event.\"},\"exitPool(bytes32,address,address,(address[],uint256[],bytes,bool))\":{\"details\":\"Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see `getPoolTokenInfo`). If the caller is not `sender`, it must be an authorized relayer for them. The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault: it just enforces these minimums. If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit. `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final `assets` array might not be sorted. Pools with no registered tokens cannot be exited. If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise, an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to do so will trigger a revert. `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the `tokens` array. This array must match the Pool's registered tokens. This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement their own custom logic. This typically requires additional information from the user (such as the expected number of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and passed directly to the Pool's contract. Emits a `PoolBalanceChanged` event.\"},\"flashLoan(address,address[],uint256[],bytes)\":{\"details\":\"Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it, and then reverting unless the tokens plus a proportional protocol fee have been returned. The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount for each token contract. `tokens` must be sorted in ascending order. The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the `receiveFlashLoan` call. Emits `FlashLoan` events.\"},\"getActionId(bytes4)\":{\"details\":\"Returns the action identifier associated with the external function described by `selector`.\"},\"getAuthorizer()\":{\"details\":\"Returns the Vault's Authorizer.\"},\"getDomainSeparator()\":{\"details\":\"Returns the EIP712 domain separator.\"},\"getInternalBalance(address,address[])\":{\"details\":\"Returns `user`'s Internal Balance for a set of tokens.\"},\"getNextNonce(address)\":{\"details\":\"Returns the next nonce used by an address to sign messages.\"},\"getPausedState()\":{\"details\":\"Returns the current paused state.\"},\"getPool(bytes32)\":{\"details\":\"Returns a Pool's contract address and specialization setting.\"},\"getPoolTokenInfo(bytes32,address)\":{\"details\":\"Returns detailed information for a Pool's registered token. `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token` equals the sum of `cash` and `managed`. Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`, `managed` or `total` balance to be greater than 2^112 - 1. `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a change for this purpose, and will update `lastChangeBlock`. `assetManager` is the Pool's token Asset Manager.\"},\"getPoolTokens(bytes32)\":{\"details\":\"Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of the tokens' `balances` changed. The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order. If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same order as passed to `registerTokens`. Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo` instead.\"},\"getProtocolFeesCollector()\":{\"details\":\"Returns the current protocol fee module.\"},\"hasApprovedRelayer(address,address)\":{\"details\":\"Returns true if `user` has approved `relayer` to act as a relayer for them.\"},\"joinPool(bytes32,address,address,(address[],uint256[],bytes,bool))\":{\"details\":\"Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized Pool shares. If the caller is not `sender`, it must be an authorized relayer for them. The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces these maximums. If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent back to the caller (not the sender, which is important for relayers). `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final `assets` array might not be sorted. Pools with no registered tokens cannot be joined. If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be withdrawn from Internal Balance: attempting to do so will trigger a revert. This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement their own custom logic. This typically requires additional information from the user (such as the expected number of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed directly to the Pool's contract, as is `recipient`. Emits a `PoolBalanceChanged` event.\"},\"managePoolBalance((uint8,bytes32,address,uint256)[])\":{\"details\":\"Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates. Pool Balance management features batching, which means a single contract call can be used to perform multiple operations of different kinds, with different Pools and tokens, at once. For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\"},\"manageUserBalance((uint8,address,uint256,address,address)[])\":{\"details\":\"Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer) and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as it lets integrators reuse a user's Vault allowance. For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\"},\"queryBatchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool))\":{\"details\":\"Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result. Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH) the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it receives are the same that an equivalent `batchSwap` call would receive. Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct. This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens, approve them for the Vault, or even know a user's address. Note that this function is not 'view' (due to implementation details): the client code must explicitly execute eth_call instead of eth_sendTransaction.\"},\"registerPool(uint8)\":{\"details\":\"Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be changed. The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`, depending on the chosen specialization setting. This contract is known as the Pool's contract. Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words, multiple Pools may share the same contract. Emits a `PoolRegistered` event.\"},\"registerTokens(bytes32,address[],address[])\":{\"details\":\"Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract. Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens, exit by receiving registered tokens, and can only swap registered tokens. Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in ascending order. The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`, depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore expected to be highly secured smart contracts with sound design principles, and the decision to register an Asset Manager should not be made lightly. Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset Manager is set, it cannot be changed except by deregistering the associated token and registering again with a different Asset Manager. Emits a `TokensRegistered` event.\"},\"setAuthorizer(address)\":{\"details\":\"Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this. Emits an `AuthorizerChanged` event.\"},\"setPaused(bool)\":{\"details\":\"Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an error in some part of the system. The Vault can only be paused during an initial time period, after which pausing is forever disabled. While the contract is paused, the following features are disabled: - depositing and transferring internal balance - transferring external balance (using the Vault's allowance) - swaps - joining Pools - Asset Manager interactions Internal Balance can still be withdrawn, and Pools exited.\"},\"setRelayerApproval(address,address,bool)\":{\"details\":\"Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise. Emits a `RelayerApprovalChanged` event.\"},\"swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address,bool),uint256,uint256)\":{\"details\":\"Performs a swap with a single Pool. If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens taken from the Pool, which must be greater than or equal to `limit`. If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens sent to the Pool, which must be less than or equal to `limit`. Internal Balance usage and the recipient are determined by the `funds` struct. Emits a `Swap` event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\":\"IVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0x2d45ea7c14dc950acf5917377d9eb67d2b1d9f8b8d81fa60eeaad345cf257655\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c387331bc3da670d45d54af96b067ea6fce6f3e0e5fac53b86fba73d5e9e874a\",\"dweb:/ipfs/QmYkY4d2TDA4BXpjz1RPQn8rdWvZVTi3pSBbiUSaPFKwtM\"]},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol\":{\"keccak256\":\"0x571907ff5a68a10937b13e0828dd78bf9508f6e74eaafe7faf525453160c3627\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://afb73b213075954086eb7fa4eb4fac4962b779c8dd8c9c72902336d64c13210e\",\"dweb:/ipfs/QmNWFPnoPxo8ToVHrqXaQQF8RPYeNNhV2eZN9EwFS3iHpz\"]},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol\":{\"keccak256\":\"0x7d98e4751329dd9effc016cbc5acdf6399d3592407b9d3e28b38c10c621e56a3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://a70c4c16829f31c75dd0a3987137ed1572a0343ff933dcdcfbef17d5d63307ae\",\"dweb:/ipfs/QmSGBafawe525NbvK8LVN1rsD2yJxaS83QoTNC84evwM2E\"]},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol\":{\"keccak256\":\"0x41c26d92fde92c927352c447ff80e3b2216d076662f2b222b735e4c865a481dc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://291a4b4f141ea187a61c3bb1ab16b370012e7e80ddc045671015ab2bfaf3c52c\",\"dweb:/ipfs/QmXvvVdfZC3pAqLst3bW9Fbj8mS9y1t1k7Zqr9BXuKdUHP\"]},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\":{\"keccak256\":\"0x3c415102b8b53a3efe0209b7fa4fd052a48b35a1df99e1b37572597d25030249\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8aac0d9f5ff03e0edeb07e1c400b78edea5948acff7e113ba52fd32f86cad72d\",\"dweb:/ipfs/Qmbh6C53fCjvjoHEVZHNadpRq5KZJzfHpDeR3qYfPgKvZt\"]},\"@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol\":{\"keccak256\":\"0x780769a0bd8655d8a05a75b062b32a65b775b9deb923b2e8f42f57a0ee263a2d\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b63d22729102954a657432d81b31764e6dbdc7216a6deb991499a73dc4ebbd7b\",\"dweb:/ipfs/QmWRyByegCCJr37yesLi7urtzNk2BBiDEjzbkPpV8TKy1X\"]},\"@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x1407e18b806b109e6a878697d2942eeb17bfc6cc601da725941658b90dc9dcc6\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://e2695f5ae435de2de9fa9dc3b165f05b5bf876217aba0e4bcbd20943a23fc831\",\"dweb:/ipfs/QmYTmazrQQqjb4znByMiUUviqbXKTebrhpP8MDERZ5PLxz\"]},\"@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol\":{\"keccak256\":\"0xadcf6e9f8677de9ec51a1bbb419da349b7c0c17af8b8cddad85ee0e80107036e\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://e9b30c1b15e3d0990a4a343fac14d2263c4bae4c3bdbeb38489103b4f6f66c39\",\"dweb:/ipfs/QmeQjBDidkLAoq4nknwPPPmunSTvQEZ9shaAhPiJAPmbk6\"]},\"@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol\":{\"keccak256\":\"0xe18a4e04a4a4e828c81548cc50d9d8ab6461dafbe88929c0342fa2b6c08e0d76\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://7056ea1221db4eacc3e263ea8b9d741c11b1871f745169a39c6f926dab9c403f\",\"dweb:/ipfs/QmabGZff9x43RJUororFfmMzocB2UuZDDBMhhfELEeSJue\"]},\"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\":{\"keccak256\":\"0x63425148b27356cee63cf843ef8918d3ff6cdd8d5c00371326bca8b4331b773c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6764d2a22a2e23de5235ceb0d06ebb9006f694c59547b8dc82dbc2e215d1f230\",\"dweb:/ipfs/Qmb6BQBgUQno6RAqPPR8qeC3smNEC3Bm6y8ZcWEWZKAfhF\"]}},\"version\":1}"}},"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"ReentrancyGuard":{"abi":[{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at, consider using {ReentrancyGuardTransient} instead. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3cf0c69ab827e3251db9ee6a50647d62c90ba580a4d7bbff21f2bea39e7b2f4a\",\"dweb:/ipfs/QmZiKwtKU1SBX4RGfQtY7PZfiapbbu6SZ9vizGQD9UHjRA\"]}},\"version\":1}"}},"contracts/BalancerFlashLoanArb.sol":{"BalancerFlashLoanArb":{"abi":[{"inputs":[{"internalType":"address","name":"_vault","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"InsufficientProfit","type":"error"},{"inputs":[],"name":"InvalidAmount","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"inputs":[],"name":"SwapFailed","type":"error"},{"inputs":[],"name":"TransferFailed","type":"error"},{"inputs":[],"name":"Unauthorized","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"EmergencyWithdraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"feeAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"profit","type":"uint256"}],"name":"FlashLoanExecuted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"PERMIT2_CONTRACT","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"tokens","type":"address[]"}],"name":"emergencyWithdrawMultiple","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"swapData","type":"bytes"}],"name":"executeFlashLoan","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"uint256[]","name":"feeAmounts","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"}],"name":"receiveFlashLoan","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"evm":{"bytecode":{"functionDebugData":{"@_1074":{"entryPoint":null,"id":1074,"parameterSlots":1,"returnSlots":0},"@_817":{"entryPoint":null,"id":817,"parameterSlots":1,"returnSlots":0},"@_966":{"entryPoint":null,"id":966,"parameterSlots":0,"returnSlots":0},"@_transferOwnership_913":{"entryPoint":116,"id":913,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":196,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:514:14","statements":[{"nodeType":"YulBlock","src":"6:3:14","statements":[]},{"body":{"nodeType":"YulBlock","src":"95:209:14","statements":[{"body":{"nodeType":"YulBlock","src":"141:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"153:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"143:6:14"},"nodeType":"YulFunctionCall","src":"143:12:14"},"nodeType":"YulExpressionStatement","src":"143:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"116:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"125:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"112:3:14"},"nodeType":"YulFunctionCall","src":"112:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"137:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"108:3:14"},"nodeType":"YulFunctionCall","src":"108:32:14"},"nodeType":"YulIf","src":"105:52:14"},{"nodeType":"YulVariableDeclaration","src":"166:29:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"185:9:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"179:5:14"},"nodeType":"YulFunctionCall","src":"179:16:14"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"170:5:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"258:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"267:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"270:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"260:6:14"},"nodeType":"YulFunctionCall","src":"260:12:14"},"nodeType":"YulExpressionStatement","src":"260:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"217:5:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"228:5:14"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"243:3:14","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"248:1:14","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"239:3:14"},"nodeType":"YulFunctionCall","src":"239:11:14"},{"kind":"number","nodeType":"YulLiteral","src":"252:1:14","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"235:3:14"},"nodeType":"YulFunctionCall","src":"235:19:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"224:3:14"},"nodeType":"YulFunctionCall","src":"224:31:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"214:2:14"},"nodeType":"YulFunctionCall","src":"214:42:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"207:6:14"},"nodeType":"YulFunctionCall","src":"207:50:14"},"nodeType":"YulIf","src":"204:70:14"},{"nodeType":"YulAssignment","src":"283:15:14","value":{"name":"value","nodeType":"YulIdentifier","src":"293:5:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"283:6:14"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"61:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"72:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"84:6:14","type":""}],"src":"14:290:14"},{"body":{"nodeType":"YulBlock","src":"410:102:14","statements":[{"nodeType":"YulAssignment","src":"420:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"432:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"443:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"428:3:14"},"nodeType":"YulFunctionCall","src":"428:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"420:4:14"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"462:9:14"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"477:6:14"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"493:3:14","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"498:1:14","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"489:3:14"},"nodeType":"YulFunctionCall","src":"489:11:14"},{"kind":"number","nodeType":"YulLiteral","src":"502:1:14","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"485:3:14"},"nodeType":"YulFunctionCall","src":"485:19:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"473:3:14"},"nodeType":"YulFunctionCall","src":"473:32:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"455:6:14"},"nodeType":"YulFunctionCall","src":"455:51:14"},"nodeType":"YulExpressionStatement","src":"455:51:14"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"379:9:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"390:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"401:4:14","type":""}],"src":"309:203:14"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n}","id":14,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x11E1 CODESIZE SUB DUP1 PUSH2 0x11E1 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0xC4 JUMP JUMPDEST CALLER DUP1 PUSH2 0x55 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E DUP2 PUSH2 0x74 JUMP JUMPDEST POP PUSH1 0x1 DUP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 MSTORE PUSH2 0xF4 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x10C4 PUSH2 0x11D PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x5D3 ADD MSTORE DUP2 DUP2 PUSH2 0x654 ADD MSTORE PUSH2 0x950 ADD MSTORE PUSH2 0x10C4 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x4E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x102 JUMPI DUP1 PUSH4 0xF04F2707 EQ PUSH2 0x138 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x158 JUMPI DUP1 PUSH4 0xF840F3FC EQ PUSH2 0x178 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x12867764 EQ PUSH2 0x8B JUMPI DUP1 PUSH4 0x51CFF8D9 EQ PUSH2 0xAD JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xCD JUMPI DUP1 PUSH4 0x76EC49BA EQ PUSH2 0xE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x86 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH2 0xA6 CALLDATASIZE PUSH1 0x4 PUSH2 0xB55 JUMP JUMPDEST PUSH2 0x19B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH2 0xC8 CALLDATASIZE PUSH1 0x4 PUSH2 0xBDF JUMP JUMPDEST PUSH2 0x245 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH2 0x50F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH2 0xFD CALLDATASIZE PUSH1 0x4 PUSH2 0xDAD JUMP JUMPDEST PUSH2 0x523 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x144 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH2 0x153 CALLDATASIZE PUSH1 0x4 PUSH2 0xE35 JUMP JUMPDEST PUSH2 0x649 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x164 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH2 0x173 CALLDATASIZE PUSH1 0x4 PUSH2 0xBDF JUMP JUMPDEST PUSH2 0xA73 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x184 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11C PUSH15 0x22D473030F116DDEE9F6B43AC78BA3 DUP2 JUMP JUMPDEST PUSH2 0x1A3 PUSH2 0xAAE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x240 JUMPI ADDRESS PUSH4 0x51CFF8D9 DUP5 DUP5 DUP5 DUP2 DUP2 LT PUSH2 0x1C6 JUMPI PUSH2 0x1C6 PUSH2 0xEE2 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1DB SWAP2 SWAP1 PUSH2 0xBDF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x21C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x22D JUMPI POP PUSH1 0x1 JUMPDEST POP DUP1 PUSH2 0x238 DUP2 PUSH2 0xF0E JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1A6 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x24D PUSH2 0xAAE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x34F JUMPI SELFBALANCE DUP1 PUSH2 0x29F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x4E6F204554482062616C616E6365 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2EC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2F1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x313 JUMPI PUSH1 0x40 MLOAD PUSH4 0x12171D83 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH32 0x5FAFA99D0643513820BE26656B45130B01E1C03062E1266BF36F88CBD3BD9695 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE DUP2 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x398 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3BC SWAP2 SWAP1 PUSH2 0xF27 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x401 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x4E6F20746F6B656E2062616C616E6365 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x296 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB PUSH2 0x422 PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x46F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x493 SWAP2 SWAP1 PUSH2 0xF40 JUMP JUMPDEST PUSH2 0x4D1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x151C985B9CD9995C8819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x296 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x5FAFA99D0643513820BE26656B45130B01E1C03062E1266BF36F88CBD3BD9695 DUP3 PUSH1 0x40 MLOAD PUSH2 0x342 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x517 PUSH2 0xAAE JUMP JUMPDEST PUSH2 0x521 PUSH1 0x0 PUSH2 0xADB JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x52B PUSH2 0xAAE JUMP JUMPDEST PUSH2 0x533 PUSH2 0xB2B JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x57C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x82E4E4C2F240D8CADCCEE8D040DAD2E6DAC2E8C6D PUSH1 0x5B SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x296 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD GT PUSH2 0x5BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x456D70747920617272617973 PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x296 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2E1C224F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x5C38449E SWAP1 PUSH2 0x60E SWAP1 ADDRESS SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0xFB2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x628 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x63C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x240 PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x691 JUMPI PUSH1 0x40 MLOAD PUSH3 0x82B429 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6A6 JUMPI PUSH2 0x6A6 PUSH2 0xEE2 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6C5 JUMPI PUSH2 0x6C5 PUSH2 0xEE2 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6E4 JUMPI PUSH2 0x6E4 PUSH2 0xEE2 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x739 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x75D SWAP2 SWAP1 PUSH2 0xF27 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH15 0x22D473030F116DDEE9F6B43AC78BA3 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7BC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7E0 SWAP2 SWAP1 PUSH2 0xF40 JUMP JUMPDEST PUSH2 0x81E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x105C1C1C9BDD985B0819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x296 JUMP JUMPDEST PUSH1 0x0 PUSH15 0x22D473030F116DDEE9F6B43AC78BA3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x40 MLOAD PUSH2 0x847 SWAP2 SWAP1 PUSH2 0x1059 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x884 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x889 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x8AB JUMPI PUSH1 0x40 MLOAD PUSH4 0x81CEFF3 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8F2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x916 SWAP2 SWAP1 PUSH2 0xF27 JUMP JUMPDEST SWAP1 POP DUP5 DUP1 DUP3 GT PUSH2 0x939 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2723FC75 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP9 SWAP1 MSTORE DUP9 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x9A8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9CC SWAP2 SWAP1 PUSH2 0xF40 JUMP JUMPDEST PUSH2 0xA0A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x151C985B9CD9995C8819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x296 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA16 DUP8 DUP5 PUSH2 0x1075 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP10 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH32 0xE03A36D920AD8DE5A978A8F1917280E202AE9193E6DC19E08EF1F6C2A051EBA4 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xA7B PUSH2 0xAAE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xAA5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x296 JUMP JUMPDEST PUSH2 0x50C DUP2 PUSH2 0xADB JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x521 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x296 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD SUB PUSH2 0xB4E JUMPI PUSH1 0x40 MLOAD PUSH4 0x3EE5AEB5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xB80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xB94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xBA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xBB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x50C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xBFC DUP2 PUSH2 0xBCA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xC42 JUMPI PUSH2 0xC42 PUSH2 0xC03 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xC64 JUMPI PUSH2 0xC64 PUSH2 0xC03 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xC7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xC94 PUSH2 0xC8F DUP4 PUSH2 0xC4A JUMP JUMPDEST PUSH2 0xC19 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0xCB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xCD7 JUMPI DUP1 CALLDATALOAD PUSH2 0xCCA DUP2 PUSH2 0xBCA JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0xCB7 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xCF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xD03 PUSH2 0xC8F DUP4 PUSH2 0xC4A JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0xD22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xCD7 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0xD26 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xD4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD68 JUMPI PUSH2 0xD68 PUSH2 0xC03 JUMP JUMPDEST PUSH2 0xD7B PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0xC19 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0xD90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xDC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xDDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDE6 DUP8 DUP4 DUP9 ADD PUSH2 0xC6E JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xDFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE08 DUP8 DUP4 DUP9 ADD PUSH2 0xCE2 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xE1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE2B DUP7 DUP3 DUP8 ADD PUSH2 0xD3D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xE4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xE63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE6F DUP9 DUP4 DUP10 ADD PUSH2 0xC6E JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xE85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE91 DUP9 DUP4 DUP10 ADD PUSH2 0xCE2 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xEA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEB3 DUP9 DUP4 DUP10 ADD PUSH2 0xCE2 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xEC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xED6 DUP8 DUP3 DUP9 ADD PUSH2 0xD3D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0xF20 JUMPI PUSH2 0xF20 PUSH2 0xEF8 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xBFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF7D JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xF65 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xF9E DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xF62 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE PUSH1 0x80 PUSH1 0x20 DUP1 DUP5 ADD DUP3 SWAP1 MSTORE DUP7 MLOAD SWAP2 DUP5 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP3 DUP8 DUP3 ADD SWAP3 SWAP1 SWAP2 SWAP1 PUSH1 0xA0 DUP7 ADD SWAP1 DUP6 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1000 JUMPI DUP6 MLOAD DUP6 AND DUP4 MSTORE SWAP5 DUP4 ADD SWAP5 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xFE2 JUMP JUMPDEST POP POP DUP6 DUP2 SUB PUSH1 0x40 DUP8 ADD MSTORE DUP8 MLOAD DUP1 DUP3 MSTORE SWAP1 DUP3 ADD SWAP4 POP SWAP2 POP DUP1 DUP8 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1038 JUMPI DUP2 MLOAD DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x101C JUMP JUMPDEST POP POP POP POP DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x104E DUP2 DUP6 PUSH2 0xF86 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x106B DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xF62 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x1088 JUMPI PUSH2 0x1088 PUSH2 0xEF8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH32 0x1E06B77DACD51B2563BD325F9429C5AB4B5D5F210F763918EFE6870A6381264 PUSH20 0x6F6C634300081400330000000000000000000000 ","sourceMap":"405:4683:13:-:0;;;1054:87;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1090:10;;1269:95:10;;1322:31;;-1:-1:-1;;;1322:31:10;;1350:1;1322:31;;;455:51:14;428:18;;1322:31:10;;;;;;;1269:95;1373:32;1392:12;1373:18;:32::i;:::-;-1:-1:-1;1857:1:12;2061:21;;-1:-1:-1;;;;;1112:22:13::1;;::::0;405:4683;;2912:187:10;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:10;;;-1:-1:-1;;;;;;3020:17:10;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;14:290:14:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:14;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:14:o;309:203::-;405:4683:13;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@PERMIT2_CONTRACT_1032":{"entryPoint":null,"id":1032,"parameterSlots":0,"returnSlots":0},"@_1382":{"entryPoint":null,"id":1382,"parameterSlots":0,"returnSlots":0},"@_checkOwner_851":{"entryPoint":2734,"id":851,"parameterSlots":0,"returnSlots":0},"@_msgSender_926":{"entryPoint":null,"id":926,"parameterSlots":0,"returnSlots":1},"@_nonReentrantAfter_1001":{"entryPoint":null,"id":1001,"parameterSlots":0,"returnSlots":0},"@_nonReentrantBefore_993":{"entryPoint":2859,"id":993,"parameterSlots":0,"returnSlots":0},"@_transferOwnership_913":{"entryPoint":2779,"id":913,"parameterSlots":1,"returnSlots":0},"@emergencyWithdrawMultiple_1377":{"entryPoint":411,"id":1377,"parameterSlots":2,"returnSlots":0},"@executeFlashLoan_1118":{"entryPoint":1315,"id":1118,"parameterSlots":3,"returnSlots":0},"@owner_834":{"entryPoint":null,"id":834,"parameterSlots":0,"returnSlots":1},"@receiveFlashLoan_1247":{"entryPoint":1609,"id":1247,"parameterSlots":4,"returnSlots":0},"@renounceOwnership_865":{"entryPoint":1295,"id":865,"parameterSlots":0,"returnSlots":0},"@transferOwnership_893":{"entryPoint":2675,"id":893,"parameterSlots":1,"returnSlots":0},"@withdraw_1343":{"entryPoint":581,"id":1343,"parameterSlots":1,"returnSlots":0},"abi_decode_array_contract_IERC20_dyn":{"entryPoint":3182,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_array_uint256_dyn":{"entryPoint":3298,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes":{"entryPoint":3389,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3039,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptr":{"entryPoint":2901,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_contract$_IERC20_$140_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr":{"entryPoint":3637,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_array$_t_contract$_IERC20_$140_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr":{"entryPoint":3501,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":3904,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":3879,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bytes":{"entryPoint":3974,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":4185,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_contract$_BalancerFlashLoanArb_$1383_t_array$_t_contract$_IERC20_$140_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":4018,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_stringliteral_179ae693e0c70d403e6d1a2bebe6454a8d095a8abd12c6f3f032c5018f3e2aea__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_920fc87d8e9a45232b5e4c2c36e3c0fff5f09b5434a80d6ec35d7f09f9d69c29__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_943d1e3eddd033b0757a7ad9dc3dff9f8f150c5b720d6ee708e13ac5fc8e5d07__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a59a84690063b053e17f07f5c73996b4ba2242b8ef998b4347da8fd090922bcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f8536626b412a46c35de6ed74b090726e51e6188c2c2bdfef9a7161e6f493992__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_rational_0_by_1_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"allocate_memory":{"entryPoint":3097,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_array_contract_IERC20_dyn":{"entryPoint":3146,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":4213,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":3938,"id":null,"parameterSlots":3,"returnSlots":0},"increment_t_uint256":{"entryPoint":3854,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":3832,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":3810,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":3075,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":3018,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:12028:14","statements":[{"nodeType":"YulBlock","src":"6:3:14","statements":[]},{"body":{"nodeType":"YulBlock","src":"119:510:14","statements":[{"body":{"nodeType":"YulBlock","src":"165:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"174:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"177:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"167:6:14"},"nodeType":"YulFunctionCall","src":"167:12:14"},"nodeType":"YulExpressionStatement","src":"167:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"140:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"149:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"136:3:14"},"nodeType":"YulFunctionCall","src":"136:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"161:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"132:3:14"},"nodeType":"YulFunctionCall","src":"132:32:14"},"nodeType":"YulIf","src":"129:52:14"},{"nodeType":"YulVariableDeclaration","src":"190:37:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"217:9:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"204:12:14"},"nodeType":"YulFunctionCall","src":"204:23:14"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"194:6:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"236:28:14","value":{"kind":"number","nodeType":"YulLiteral","src":"246:18:14","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"240:2:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"291:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"300:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"303:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"293:6:14"},"nodeType":"YulFunctionCall","src":"293:12:14"},"nodeType":"YulExpressionStatement","src":"293:12:14"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"279:6:14"},{"name":"_1","nodeType":"YulIdentifier","src":"287:2:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"276:2:14"},"nodeType":"YulFunctionCall","src":"276:14:14"},"nodeType":"YulIf","src":"273:34:14"},{"nodeType":"YulVariableDeclaration","src":"316:32:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"330:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"341:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"326:3:14"},"nodeType":"YulFunctionCall","src":"326:22:14"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"320:2:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"396:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"405:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"408:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"398:6:14"},"nodeType":"YulFunctionCall","src":"398:12:14"},"nodeType":"YulExpressionStatement","src":"398:12:14"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"375:2:14"},{"kind":"number","nodeType":"YulLiteral","src":"379:4:14","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"371:3:14"},"nodeType":"YulFunctionCall","src":"371:13:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"386:7:14"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"367:3:14"},"nodeType":"YulFunctionCall","src":"367:27:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"360:6:14"},"nodeType":"YulFunctionCall","src":"360:35:14"},"nodeType":"YulIf","src":"357:55:14"},{"nodeType":"YulVariableDeclaration","src":"421:30:14","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"448:2:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"435:12:14"},"nodeType":"YulFunctionCall","src":"435:16:14"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"425:6:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"478:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"487:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"490:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"480:6:14"},"nodeType":"YulFunctionCall","src":"480:12:14"},"nodeType":"YulExpressionStatement","src":"480:12:14"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"466:6:14"},{"name":"_1","nodeType":"YulIdentifier","src":"474:2:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"463:2:14"},"nodeType":"YulFunctionCall","src":"463:14:14"},"nodeType":"YulIf","src":"460:34:14"},{"body":{"nodeType":"YulBlock","src":"552:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"561:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"564:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"554:6:14"},"nodeType":"YulFunctionCall","src":"554:12:14"},"nodeType":"YulExpressionStatement","src":"554:12:14"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"517:2:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"525:1:14","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"528:6:14"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"521:3:14"},"nodeType":"YulFunctionCall","src":"521:14:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"513:3:14"},"nodeType":"YulFunctionCall","src":"513:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"538:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"509:3:14"},"nodeType":"YulFunctionCall","src":"509:32:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"543:7:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"506:2:14"},"nodeType":"YulFunctionCall","src":"506:45:14"},"nodeType":"YulIf","src":"503:65:14"},{"nodeType":"YulAssignment","src":"577:21:14","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"591:2:14"},{"kind":"number","nodeType":"YulLiteral","src":"595:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"587:3:14"},"nodeType":"YulFunctionCall","src":"587:11:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"577:6:14"}]},{"nodeType":"YulAssignment","src":"607:16:14","value":{"name":"length","nodeType":"YulIdentifier","src":"617:6:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"607:6:14"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"77:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"88:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"100:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"108:6:14","type":""}],"src":"14:615:14"},{"body":{"nodeType":"YulBlock","src":"679:86:14","statements":[{"body":{"nodeType":"YulBlock","src":"743:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"752:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"755:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"745:6:14"},"nodeType":"YulFunctionCall","src":"745:12:14"},"nodeType":"YulExpressionStatement","src":"745:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"702:5:14"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"713:5:14"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"728:3:14","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"733:1:14","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"724:3:14"},"nodeType":"YulFunctionCall","src":"724:11:14"},{"kind":"number","nodeType":"YulLiteral","src":"737:1:14","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"720:3:14"},"nodeType":"YulFunctionCall","src":"720:19:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"709:3:14"},"nodeType":"YulFunctionCall","src":"709:31:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"699:2:14"},"nodeType":"YulFunctionCall","src":"699:42:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"692:6:14"},"nodeType":"YulFunctionCall","src":"692:50:14"},"nodeType":"YulIf","src":"689:70:14"}]},"name":"validator_revert_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"668:5:14","type":""}],"src":"634:131:14"},{"body":{"nodeType":"YulBlock","src":"840:177:14","statements":[{"body":{"nodeType":"YulBlock","src":"886:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"895:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"898:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"888:6:14"},"nodeType":"YulFunctionCall","src":"888:12:14"},"nodeType":"YulExpressionStatement","src":"888:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"861:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"870:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"857:3:14"},"nodeType":"YulFunctionCall","src":"857:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"882:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"853:3:14"},"nodeType":"YulFunctionCall","src":"853:32:14"},"nodeType":"YulIf","src":"850:52:14"},{"nodeType":"YulVariableDeclaration","src":"911:36:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"937:9:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"924:12:14"},"nodeType":"YulFunctionCall","src":"924:23:14"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"915:5:14","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"981:5:14"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"956:24:14"},"nodeType":"YulFunctionCall","src":"956:31:14"},"nodeType":"YulExpressionStatement","src":"956:31:14"},{"nodeType":"YulAssignment","src":"996:15:14","value":{"name":"value","nodeType":"YulIdentifier","src":"1006:5:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"996:6:14"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"806:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"817:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"829:6:14","type":""}],"src":"770:247:14"},{"body":{"nodeType":"YulBlock","src":"1054:95:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1071:1:14","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1078:3:14","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1083:10:14","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1074:3:14"},"nodeType":"YulFunctionCall","src":"1074:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1064:6:14"},"nodeType":"YulFunctionCall","src":"1064:31:14"},"nodeType":"YulExpressionStatement","src":"1064:31:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1111:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1114:4:14","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1104:6:14"},"nodeType":"YulFunctionCall","src":"1104:15:14"},"nodeType":"YulExpressionStatement","src":"1104:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1135:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1138:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1128:6:14"},"nodeType":"YulFunctionCall","src":"1128:15:14"},"nodeType":"YulExpressionStatement","src":"1128:15:14"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"1022:127:14"},{"body":{"nodeType":"YulBlock","src":"1199:230:14","statements":[{"nodeType":"YulAssignment","src":"1209:19:14","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1225:2:14","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1219:5:14"},"nodeType":"YulFunctionCall","src":"1219:9:14"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1209:6:14"}]},{"nodeType":"YulVariableDeclaration","src":"1237:58:14","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1259:6:14"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1275:4:14"},{"kind":"number","nodeType":"YulLiteral","src":"1281:2:14","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1271:3:14"},"nodeType":"YulFunctionCall","src":"1271:13:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1290:2:14","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1286:3:14"},"nodeType":"YulFunctionCall","src":"1286:7:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1267:3:14"},"nodeType":"YulFunctionCall","src":"1267:27:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1255:3:14"},"nodeType":"YulFunctionCall","src":"1255:40:14"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1241:10:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"1370:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1372:16:14"},"nodeType":"YulFunctionCall","src":"1372:18:14"},"nodeType":"YulExpressionStatement","src":"1372:18:14"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1313:10:14"},{"kind":"number","nodeType":"YulLiteral","src":"1325:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1310:2:14"},"nodeType":"YulFunctionCall","src":"1310:34:14"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1349:10:14"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1361:6:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1346:2:14"},"nodeType":"YulFunctionCall","src":"1346:22:14"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1307:2:14"},"nodeType":"YulFunctionCall","src":"1307:62:14"},"nodeType":"YulIf","src":"1304:88:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1408:2:14","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1412:10:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1401:6:14"},"nodeType":"YulFunctionCall","src":"1401:22:14"},"nodeType":"YulExpressionStatement","src":"1401:22:14"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1179:4:14","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1188:6:14","type":""}],"src":"1154:275:14"},{"body":{"nodeType":"YulBlock","src":"1511:114:14","statements":[{"body":{"nodeType":"YulBlock","src":"1555:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1557:16:14"},"nodeType":"YulFunctionCall","src":"1557:18:14"},"nodeType":"YulExpressionStatement","src":"1557:18:14"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1527:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"1535:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1524:2:14"},"nodeType":"YulFunctionCall","src":"1524:30:14"},"nodeType":"YulIf","src":"1521:56:14"},{"nodeType":"YulAssignment","src":"1586:33:14","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1602:1:14","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"1605:6:14"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1598:3:14"},"nodeType":"YulFunctionCall","src":"1598:14:14"},{"kind":"number","nodeType":"YulLiteral","src":"1614:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1594:3:14"},"nodeType":"YulFunctionCall","src":"1594:25:14"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1586:4:14"}]}]},"name":"array_allocation_size_array_contract_IERC20_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1491:6:14","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1502:4:14","type":""}],"src":"1434:191:14"},{"body":{"nodeType":"YulBlock","src":"1702:681:14","statements":[{"body":{"nodeType":"YulBlock","src":"1751:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1760:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1763:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1753:6:14"},"nodeType":"YulFunctionCall","src":"1753:12:14"},"nodeType":"YulExpressionStatement","src":"1753:12:14"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1730:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"1738:4:14","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1726:3:14"},"nodeType":"YulFunctionCall","src":"1726:17:14"},{"name":"end","nodeType":"YulIdentifier","src":"1745:3:14"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1722:3:14"},"nodeType":"YulFunctionCall","src":"1722:27:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1715:6:14"},"nodeType":"YulFunctionCall","src":"1715:35:14"},"nodeType":"YulIf","src":"1712:55:14"},{"nodeType":"YulVariableDeclaration","src":"1776:30:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1799:6:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1786:12:14"},"nodeType":"YulFunctionCall","src":"1786:20:14"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1780:2:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1815:14:14","value":{"kind":"number","nodeType":"YulLiteral","src":"1825:4:14","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1819:2:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1838:79:14","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"1913:2:14"}],"functionName":{"name":"array_allocation_size_array_contract_IERC20_dyn","nodeType":"YulIdentifier","src":"1865:47:14"},"nodeType":"YulFunctionCall","src":"1865:51:14"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"1849:15:14"},"nodeType":"YulFunctionCall","src":"1849:68:14"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"1842:3:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1926:16:14","value":{"name":"dst","nodeType":"YulIdentifier","src":"1939:3:14"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"1930:5:14","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1958:3:14"},{"name":"_1","nodeType":"YulIdentifier","src":"1963:2:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1951:6:14"},"nodeType":"YulFunctionCall","src":"1951:15:14"},"nodeType":"YulExpressionStatement","src":"1951:15:14"},{"nodeType":"YulAssignment","src":"1975:19:14","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1986:3:14"},{"name":"_2","nodeType":"YulIdentifier","src":"1991:2:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1982:3:14"},"nodeType":"YulFunctionCall","src":"1982:12:14"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1975:3:14"}]},{"nodeType":"YulVariableDeclaration","src":"2003:46:14","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2025:6:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2037:1:14","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"2040:2:14"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2033:3:14"},"nodeType":"YulFunctionCall","src":"2033:10:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2021:3:14"},"nodeType":"YulFunctionCall","src":"2021:23:14"},{"name":"_2","nodeType":"YulIdentifier","src":"2046:2:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2017:3:14"},"nodeType":"YulFunctionCall","src":"2017:32:14"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"2007:6:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"2077:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2086:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2089:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2079:6:14"},"nodeType":"YulFunctionCall","src":"2079:12:14"},"nodeType":"YulExpressionStatement","src":"2079:12:14"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"2064:6:14"},{"name":"end","nodeType":"YulIdentifier","src":"2072:3:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2061:2:14"},"nodeType":"YulFunctionCall","src":"2061:15:14"},"nodeType":"YulIf","src":"2058:35:14"},{"nodeType":"YulVariableDeclaration","src":"2102:26:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2117:6:14"},{"name":"_2","nodeType":"YulIdentifier","src":"2125:2:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2113:3:14"},"nodeType":"YulFunctionCall","src":"2113:15:14"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"2106:3:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"2193:161:14","statements":[{"nodeType":"YulVariableDeclaration","src":"2207:30:14","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2233:3:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2220:12:14"},"nodeType":"YulFunctionCall","src":"2220:17:14"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2211:5:14","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2275:5:14"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"2250:24:14"},"nodeType":"YulFunctionCall","src":"2250:31:14"},"nodeType":"YulExpressionStatement","src":"2250:31:14"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2301:3:14"},{"name":"value","nodeType":"YulIdentifier","src":"2306:5:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2294:6:14"},"nodeType":"YulFunctionCall","src":"2294:18:14"},"nodeType":"YulExpressionStatement","src":"2294:18:14"},{"nodeType":"YulAssignment","src":"2325:19:14","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2336:3:14"},{"name":"_2","nodeType":"YulIdentifier","src":"2341:2:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2332:3:14"},"nodeType":"YulFunctionCall","src":"2332:12:14"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"2325:3:14"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2148:3:14"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"2153:6:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2145:2:14"},"nodeType":"YulFunctionCall","src":"2145:15:14"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2161:23:14","statements":[{"nodeType":"YulAssignment","src":"2163:19:14","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2174:3:14"},{"name":"_2","nodeType":"YulIdentifier","src":"2179:2:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2170:3:14"},"nodeType":"YulFunctionCall","src":"2170:12:14"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"2163:3:14"}]}]},"pre":{"nodeType":"YulBlock","src":"2141:3:14","statements":[]},"src":"2137:217:14"},{"nodeType":"YulAssignment","src":"2363:14:14","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"2372:5:14"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2363:5:14"}]}]},"name":"abi_decode_array_contract_IERC20_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1676:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"1684:3:14","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1692:5:14","type":""}],"src":"1630:753:14"},{"body":{"nodeType":"YulBlock","src":"2452:606:14","statements":[{"body":{"nodeType":"YulBlock","src":"2501:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2510:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2513:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2503:6:14"},"nodeType":"YulFunctionCall","src":"2503:12:14"},"nodeType":"YulExpressionStatement","src":"2503:12:14"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2480:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"2488:4:14","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2476:3:14"},"nodeType":"YulFunctionCall","src":"2476:17:14"},{"name":"end","nodeType":"YulIdentifier","src":"2495:3:14"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2472:3:14"},"nodeType":"YulFunctionCall","src":"2472:27:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2465:6:14"},"nodeType":"YulFunctionCall","src":"2465:35:14"},"nodeType":"YulIf","src":"2462:55:14"},{"nodeType":"YulVariableDeclaration","src":"2526:30:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2549:6:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2536:12:14"},"nodeType":"YulFunctionCall","src":"2536:20:14"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2530:2:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2565:14:14","value":{"kind":"number","nodeType":"YulLiteral","src":"2575:4:14","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2569:2:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2588:79:14","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2663:2:14"}],"functionName":{"name":"array_allocation_size_array_contract_IERC20_dyn","nodeType":"YulIdentifier","src":"2615:47:14"},"nodeType":"YulFunctionCall","src":"2615:51:14"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2599:15:14"},"nodeType":"YulFunctionCall","src":"2599:68:14"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2592:3:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2676:16:14","value":{"name":"dst","nodeType":"YulIdentifier","src":"2689:3:14"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"2680:5:14","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2708:3:14"},{"name":"_1","nodeType":"YulIdentifier","src":"2713:2:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2701:6:14"},"nodeType":"YulFunctionCall","src":"2701:15:14"},"nodeType":"YulExpressionStatement","src":"2701:15:14"},{"nodeType":"YulAssignment","src":"2725:19:14","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2736:3:14"},{"name":"_2","nodeType":"YulIdentifier","src":"2741:2:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2732:3:14"},"nodeType":"YulFunctionCall","src":"2732:12:14"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"2725:3:14"}]},{"nodeType":"YulVariableDeclaration","src":"2753:46:14","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2775:6:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2787:1:14","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"2790:2:14"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2783:3:14"},"nodeType":"YulFunctionCall","src":"2783:10:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2771:3:14"},"nodeType":"YulFunctionCall","src":"2771:23:14"},{"name":"_2","nodeType":"YulIdentifier","src":"2796:2:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2767:3:14"},"nodeType":"YulFunctionCall","src":"2767:32:14"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"2757:6:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"2827:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2836:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2839:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2829:6:14"},"nodeType":"YulFunctionCall","src":"2829:12:14"},"nodeType":"YulExpressionStatement","src":"2829:12:14"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"2814:6:14"},{"name":"end","nodeType":"YulIdentifier","src":"2822:3:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2811:2:14"},"nodeType":"YulFunctionCall","src":"2811:15:14"},"nodeType":"YulIf","src":"2808:35:14"},{"nodeType":"YulVariableDeclaration","src":"2852:26:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2867:6:14"},{"name":"_2","nodeType":"YulIdentifier","src":"2875:2:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2863:3:14"},"nodeType":"YulFunctionCall","src":"2863:15:14"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"2856:3:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"2943:86:14","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2964:3:14"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2982:3:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2969:12:14"},"nodeType":"YulFunctionCall","src":"2969:17:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2957:6:14"},"nodeType":"YulFunctionCall","src":"2957:30:14"},"nodeType":"YulExpressionStatement","src":"2957:30:14"},{"nodeType":"YulAssignment","src":"3000:19:14","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3011:3:14"},{"name":"_2","nodeType":"YulIdentifier","src":"3016:2:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3007:3:14"},"nodeType":"YulFunctionCall","src":"3007:12:14"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3000:3:14"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2898:3:14"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"2903:6:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2895:2:14"},"nodeType":"YulFunctionCall","src":"2895:15:14"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2911:23:14","statements":[{"nodeType":"YulAssignment","src":"2913:19:14","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2924:3:14"},{"name":"_2","nodeType":"YulIdentifier","src":"2929:2:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2920:3:14"},"nodeType":"YulFunctionCall","src":"2920:12:14"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"2913:3:14"}]}]},"pre":{"nodeType":"YulBlock","src":"2891:3:14","statements":[]},"src":"2887:142:14"},{"nodeType":"YulAssignment","src":"3038:14:14","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"3047:5:14"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3038:5:14"}]}]},"name":"abi_decode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2426:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"2434:3:14","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2442:5:14","type":""}],"src":"2388:670:14"},{"body":{"nodeType":"YulBlock","src":"3115:478:14","statements":[{"body":{"nodeType":"YulBlock","src":"3164:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3173:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3176:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3166:6:14"},"nodeType":"YulFunctionCall","src":"3166:12:14"},"nodeType":"YulExpressionStatement","src":"3166:12:14"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3143:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"3151:4:14","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3139:3:14"},"nodeType":"YulFunctionCall","src":"3139:17:14"},{"name":"end","nodeType":"YulIdentifier","src":"3158:3:14"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3135:3:14"},"nodeType":"YulFunctionCall","src":"3135:27:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3128:6:14"},"nodeType":"YulFunctionCall","src":"3128:35:14"},"nodeType":"YulIf","src":"3125:55:14"},{"nodeType":"YulVariableDeclaration","src":"3189:30:14","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3212:6:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3199:12:14"},"nodeType":"YulFunctionCall","src":"3199:20:14"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3193:2:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"3258:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3260:16:14"},"nodeType":"YulFunctionCall","src":"3260:18:14"},"nodeType":"YulExpressionStatement","src":"3260:18:14"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3234:2:14"},{"kind":"number","nodeType":"YulLiteral","src":"3238:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3231:2:14"},"nodeType":"YulFunctionCall","src":"3231:26:14"},"nodeType":"YulIf","src":"3228:52:14"},{"nodeType":"YulVariableDeclaration","src":"3289:70:14","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3332:2:14"},{"kind":"number","nodeType":"YulLiteral","src":"3336:4:14","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3328:3:14"},"nodeType":"YulFunctionCall","src":"3328:13:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3347:2:14","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3343:3:14"},"nodeType":"YulFunctionCall","src":"3343:7:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3324:3:14"},"nodeType":"YulFunctionCall","src":"3324:27:14"},{"kind":"number","nodeType":"YulLiteral","src":"3353:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3320:3:14"},"nodeType":"YulFunctionCall","src":"3320:38:14"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"3304:15:14"},"nodeType":"YulFunctionCall","src":"3304:55:14"},"variables":[{"name":"array_1","nodeType":"YulTypedName","src":"3293:7:14","type":""}]},{"expression":{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"3375:7:14"},{"name":"_1","nodeType":"YulIdentifier","src":"3384:2:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3368:6:14"},"nodeType":"YulFunctionCall","src":"3368:19:14"},"nodeType":"YulExpressionStatement","src":"3368:19:14"},{"body":{"nodeType":"YulBlock","src":"3435:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3444:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3447:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3437:6:14"},"nodeType":"YulFunctionCall","src":"3437:12:14"},"nodeType":"YulExpressionStatement","src":"3437:12:14"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3410:6:14"},{"name":"_1","nodeType":"YulIdentifier","src":"3418:2:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3406:3:14"},"nodeType":"YulFunctionCall","src":"3406:15:14"},{"kind":"number","nodeType":"YulLiteral","src":"3423:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3402:3:14"},"nodeType":"YulFunctionCall","src":"3402:26:14"},{"name":"end","nodeType":"YulIdentifier","src":"3430:3:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3399:2:14"},"nodeType":"YulFunctionCall","src":"3399:35:14"},"nodeType":"YulIf","src":"3396:55:14"},{"expression":{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"3477:7:14"},{"kind":"number","nodeType":"YulLiteral","src":"3486:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3473:3:14"},"nodeType":"YulFunctionCall","src":"3473:18:14"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3497:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"3505:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3493:3:14"},"nodeType":"YulFunctionCall","src":"3493:17:14"},{"name":"_1","nodeType":"YulIdentifier","src":"3512:2:14"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"3460:12:14"},"nodeType":"YulFunctionCall","src":"3460:55:14"},"nodeType":"YulExpressionStatement","src":"3460:55:14"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"3539:7:14"},{"name":"_1","nodeType":"YulIdentifier","src":"3548:2:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3535:3:14"},"nodeType":"YulFunctionCall","src":"3535:16:14"},{"kind":"number","nodeType":"YulLiteral","src":"3553:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3531:3:14"},"nodeType":"YulFunctionCall","src":"3531:27:14"},{"kind":"number","nodeType":"YulLiteral","src":"3560:1:14","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3524:6:14"},"nodeType":"YulFunctionCall","src":"3524:38:14"},"nodeType":"YulExpressionStatement","src":"3524:38:14"},{"nodeType":"YulAssignment","src":"3571:16:14","value":{"name":"array_1","nodeType":"YulIdentifier","src":"3580:7:14"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3571:5:14"}]}]},"name":"abi_decode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3089:6:14","type":""},{"name":"end","nodeType":"YulTypedName","src":"3097:3:14","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3105:5:14","type":""}],"src":"3063:530:14"},{"body":{"nodeType":"YulBlock","src":"3775:638:14","statements":[{"body":{"nodeType":"YulBlock","src":"3821:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3830:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3833:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3823:6:14"},"nodeType":"YulFunctionCall","src":"3823:12:14"},"nodeType":"YulExpressionStatement","src":"3823:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3796:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"3805:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3792:3:14"},"nodeType":"YulFunctionCall","src":"3792:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"3817:2:14","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3788:3:14"},"nodeType":"YulFunctionCall","src":"3788:32:14"},"nodeType":"YulIf","src":"3785:52:14"},{"nodeType":"YulVariableDeclaration","src":"3846:37:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3873:9:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3860:12:14"},"nodeType":"YulFunctionCall","src":"3860:23:14"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3850:6:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3892:28:14","value":{"kind":"number","nodeType":"YulLiteral","src":"3902:18:14","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3896:2:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"3947:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3956:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3959:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3949:6:14"},"nodeType":"YulFunctionCall","src":"3949:12:14"},"nodeType":"YulExpressionStatement","src":"3949:12:14"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3935:6:14"},{"name":"_1","nodeType":"YulIdentifier","src":"3943:2:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3932:2:14"},"nodeType":"YulFunctionCall","src":"3932:14:14"},"nodeType":"YulIf","src":"3929:34:14"},{"nodeType":"YulAssignment","src":"3972:79:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4023:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"4034:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4019:3:14"},"nodeType":"YulFunctionCall","src":"4019:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4043:7:14"}],"functionName":{"name":"abi_decode_array_contract_IERC20_dyn","nodeType":"YulIdentifier","src":"3982:36:14"},"nodeType":"YulFunctionCall","src":"3982:69:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3972:6:14"}]},{"nodeType":"YulVariableDeclaration","src":"4060:48:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4093:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"4104:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4089:3:14"},"nodeType":"YulFunctionCall","src":"4089:18:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4076:12:14"},"nodeType":"YulFunctionCall","src":"4076:32:14"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"4064:8:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"4137:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4146:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4149:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4139:6:14"},"nodeType":"YulFunctionCall","src":"4139:12:14"},"nodeType":"YulExpressionStatement","src":"4139:12:14"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"4123:8:14"},{"name":"_1","nodeType":"YulIdentifier","src":"4133:2:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4120:2:14"},"nodeType":"YulFunctionCall","src":"4120:16:14"},"nodeType":"YulIf","src":"4117:36:14"},{"nodeType":"YulAssignment","src":"4162:73:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4205:9:14"},{"name":"offset_1","nodeType":"YulIdentifier","src":"4216:8:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4201:3:14"},"nodeType":"YulFunctionCall","src":"4201:24:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4227:7:14"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"4172:28:14"},"nodeType":"YulFunctionCall","src":"4172:63:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4162:6:14"}]},{"nodeType":"YulVariableDeclaration","src":"4244:48:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4277:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"4288:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4273:3:14"},"nodeType":"YulFunctionCall","src":"4273:18:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4260:12:14"},"nodeType":"YulFunctionCall","src":"4260:32:14"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"4248:8:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"4321:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4330:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4333:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4323:6:14"},"nodeType":"YulFunctionCall","src":"4323:12:14"},"nodeType":"YulExpressionStatement","src":"4323:12:14"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"4307:8:14"},{"name":"_1","nodeType":"YulIdentifier","src":"4317:2:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4304:2:14"},"nodeType":"YulFunctionCall","src":"4304:16:14"},"nodeType":"YulIf","src":"4301:36:14"},{"nodeType":"YulAssignment","src":"4346:61:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4377:9:14"},{"name":"offset_2","nodeType":"YulIdentifier","src":"4388:8:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4373:3:14"},"nodeType":"YulFunctionCall","src":"4373:24:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4399:7:14"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"4356:16:14"},"nodeType":"YulFunctionCall","src":"4356:51:14"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4346:6:14"}]}]},"name":"abi_decode_tuple_t_array$_t_contract$_IERC20_$140_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3725:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3736:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3748:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3756:6:14","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3764:6:14","type":""}],"src":"3598:815:14"},{"body":{"nodeType":"YulBlock","src":"4519:102:14","statements":[{"nodeType":"YulAssignment","src":"4529:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4541:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"4552:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4537:3:14"},"nodeType":"YulFunctionCall","src":"4537:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4529:4:14"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4571:9:14"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4586:6:14"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4602:3:14","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"4607:1:14","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4598:3:14"},"nodeType":"YulFunctionCall","src":"4598:11:14"},{"kind":"number","nodeType":"YulLiteral","src":"4611:1:14","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4594:3:14"},"nodeType":"YulFunctionCall","src":"4594:19:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4582:3:14"},"nodeType":"YulFunctionCall","src":"4582:32:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4564:6:14"},"nodeType":"YulFunctionCall","src":"4564:51:14"},"nodeType":"YulExpressionStatement","src":"4564:51:14"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4488:9:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4499:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4510:4:14","type":""}],"src":"4418:203:14"},{"body":{"nodeType":"YulBlock","src":"4845:823:14","statements":[{"body":{"nodeType":"YulBlock","src":"4892:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4901:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4904:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4894:6:14"},"nodeType":"YulFunctionCall","src":"4894:12:14"},"nodeType":"YulExpressionStatement","src":"4894:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4866:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"4875:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4862:3:14"},"nodeType":"YulFunctionCall","src":"4862:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"4887:3:14","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4858:3:14"},"nodeType":"YulFunctionCall","src":"4858:33:14"},"nodeType":"YulIf","src":"4855:53:14"},{"nodeType":"YulVariableDeclaration","src":"4917:37:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4944:9:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4931:12:14"},"nodeType":"YulFunctionCall","src":"4931:23:14"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4921:6:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4963:28:14","value":{"kind":"number","nodeType":"YulLiteral","src":"4973:18:14","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4967:2:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"5018:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5027:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5030:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5020:6:14"},"nodeType":"YulFunctionCall","src":"5020:12:14"},"nodeType":"YulExpressionStatement","src":"5020:12:14"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5006:6:14"},{"name":"_1","nodeType":"YulIdentifier","src":"5014:2:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5003:2:14"},"nodeType":"YulFunctionCall","src":"5003:14:14"},"nodeType":"YulIf","src":"5000:34:14"},{"nodeType":"YulAssignment","src":"5043:79:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5094:9:14"},{"name":"offset","nodeType":"YulIdentifier","src":"5105:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5090:3:14"},"nodeType":"YulFunctionCall","src":"5090:22:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5114:7:14"}],"functionName":{"name":"abi_decode_array_contract_IERC20_dyn","nodeType":"YulIdentifier","src":"5053:36:14"},"nodeType":"YulFunctionCall","src":"5053:69:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5043:6:14"}]},{"nodeType":"YulVariableDeclaration","src":"5131:48:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5164:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"5175:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5160:3:14"},"nodeType":"YulFunctionCall","src":"5160:18:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5147:12:14"},"nodeType":"YulFunctionCall","src":"5147:32:14"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"5135:8:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"5208:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5217:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5220:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5210:6:14"},"nodeType":"YulFunctionCall","src":"5210:12:14"},"nodeType":"YulExpressionStatement","src":"5210:12:14"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"5194:8:14"},{"name":"_1","nodeType":"YulIdentifier","src":"5204:2:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5191:2:14"},"nodeType":"YulFunctionCall","src":"5191:16:14"},"nodeType":"YulIf","src":"5188:36:14"},{"nodeType":"YulAssignment","src":"5233:73:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5276:9:14"},{"name":"offset_1","nodeType":"YulIdentifier","src":"5287:8:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5272:3:14"},"nodeType":"YulFunctionCall","src":"5272:24:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5298:7:14"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"5243:28:14"},"nodeType":"YulFunctionCall","src":"5243:63:14"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5233:6:14"}]},{"nodeType":"YulVariableDeclaration","src":"5315:48:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5348:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"5359:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5344:3:14"},"nodeType":"YulFunctionCall","src":"5344:18:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5331:12:14"},"nodeType":"YulFunctionCall","src":"5331:32:14"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"5319:8:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"5392:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5401:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5404:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5394:6:14"},"nodeType":"YulFunctionCall","src":"5394:12:14"},"nodeType":"YulExpressionStatement","src":"5394:12:14"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"5378:8:14"},{"name":"_1","nodeType":"YulIdentifier","src":"5388:2:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5375:2:14"},"nodeType":"YulFunctionCall","src":"5375:16:14"},"nodeType":"YulIf","src":"5372:36:14"},{"nodeType":"YulAssignment","src":"5417:73:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5460:9:14"},{"name":"offset_2","nodeType":"YulIdentifier","src":"5471:8:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5456:3:14"},"nodeType":"YulFunctionCall","src":"5456:24:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5482:7:14"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"5427:28:14"},"nodeType":"YulFunctionCall","src":"5427:63:14"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5417:6:14"}]},{"nodeType":"YulVariableDeclaration","src":"5499:48:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5532:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"5543:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5528:3:14"},"nodeType":"YulFunctionCall","src":"5528:18:14"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5515:12:14"},"nodeType":"YulFunctionCall","src":"5515:32:14"},"variables":[{"name":"offset_3","nodeType":"YulTypedName","src":"5503:8:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"5576:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5585:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5588:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5578:6:14"},"nodeType":"YulFunctionCall","src":"5578:12:14"},"nodeType":"YulExpressionStatement","src":"5578:12:14"}]},"condition":{"arguments":[{"name":"offset_3","nodeType":"YulIdentifier","src":"5562:8:14"},{"name":"_1","nodeType":"YulIdentifier","src":"5572:2:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5559:2:14"},"nodeType":"YulFunctionCall","src":"5559:16:14"},"nodeType":"YulIf","src":"5556:36:14"},{"nodeType":"YulAssignment","src":"5601:61:14","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5632:9:14"},{"name":"offset_3","nodeType":"YulIdentifier","src":"5643:8:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5628:3:14"},"nodeType":"YulFunctionCall","src":"5628:24:14"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5654:7:14"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"5611:16:14"},"nodeType":"YulFunctionCall","src":"5611:51:14"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"5601:6:14"}]}]},"name":"abi_decode_tuple_t_array$_t_contract$_IERC20_$140_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4787:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4798:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4810:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4818:6:14","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4826:6:14","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4834:6:14","type":""}],"src":"4626:1042:14"},{"body":{"nodeType":"YulBlock","src":"5705:95:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5722:1:14","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5729:3:14","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5734:10:14","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5725:3:14"},"nodeType":"YulFunctionCall","src":"5725:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5715:6:14"},"nodeType":"YulFunctionCall","src":"5715:31:14"},"nodeType":"YulExpressionStatement","src":"5715:31:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5762:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5765:4:14","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5755:6:14"},"nodeType":"YulFunctionCall","src":"5755:15:14"},"nodeType":"YulExpressionStatement","src":"5755:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5786:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5789:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5779:6:14"},"nodeType":"YulFunctionCall","src":"5779:15:14"},"nodeType":"YulExpressionStatement","src":"5779:15:14"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"5673:127:14"},{"body":{"nodeType":"YulBlock","src":"5837:95:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5854:1:14","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5861:3:14","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5866:10:14","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5857:3:14"},"nodeType":"YulFunctionCall","src":"5857:20:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5847:6:14"},"nodeType":"YulFunctionCall","src":"5847:31:14"},"nodeType":"YulExpressionStatement","src":"5847:31:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5894:1:14","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5897:4:14","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5887:6:14"},"nodeType":"YulFunctionCall","src":"5887:15:14"},"nodeType":"YulExpressionStatement","src":"5887:15:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5918:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5921:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5911:6:14"},"nodeType":"YulFunctionCall","src":"5911:15:14"},"nodeType":"YulExpressionStatement","src":"5911:15:14"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"5805:127:14"},{"body":{"nodeType":"YulBlock","src":"5984:88:14","statements":[{"body":{"nodeType":"YulBlock","src":"6015:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"6017:16:14"},"nodeType":"YulFunctionCall","src":"6017:18:14"},"nodeType":"YulExpressionStatement","src":"6017:18:14"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6000:5:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6011:1:14","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6007:3:14"},"nodeType":"YulFunctionCall","src":"6007:6:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5997:2:14"},"nodeType":"YulFunctionCall","src":"5997:17:14"},"nodeType":"YulIf","src":"5994:43:14"},{"nodeType":"YulAssignment","src":"6046:20:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6057:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"6064:1:14","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6053:3:14"},"nodeType":"YulFunctionCall","src":"6053:13:14"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"6046:3:14"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5966:5:14","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"5976:3:14","type":""}],"src":"5937:135:14"},{"body":{"nodeType":"YulBlock","src":"6251:164:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6268:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"6279:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6261:6:14"},"nodeType":"YulFunctionCall","src":"6261:21:14"},"nodeType":"YulExpressionStatement","src":"6261:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6302:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"6313:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6298:3:14"},"nodeType":"YulFunctionCall","src":"6298:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"6318:2:14","type":"","value":"14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6291:6:14"},"nodeType":"YulFunctionCall","src":"6291:30:14"},"nodeType":"YulExpressionStatement","src":"6291:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6341:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"6352:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6337:3:14"},"nodeType":"YulFunctionCall","src":"6337:18:14"},{"hexValue":"4e6f204554482062616c616e6365","kind":"string","nodeType":"YulLiteral","src":"6357:16:14","type":"","value":"No ETH balance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6330:6:14"},"nodeType":"YulFunctionCall","src":"6330:44:14"},"nodeType":"YulExpressionStatement","src":"6330:44:14"},{"nodeType":"YulAssignment","src":"6383:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6395:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"6406:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6391:3:14"},"nodeType":"YulFunctionCall","src":"6391:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6383:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_a59a84690063b053e17f07f5c73996b4ba2242b8ef998b4347da8fd090922bcd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6228:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6242:4:14","type":""}],"src":"6077:338:14"},{"body":{"nodeType":"YulBlock","src":"6611:14:14","statements":[{"nodeType":"YulAssignment","src":"6613:10:14","value":{"name":"pos","nodeType":"YulIdentifier","src":"6620:3:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6613:3:14"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6595:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6603:3:14","type":""}],"src":"6420:205:14"},{"body":{"nodeType":"YulBlock","src":"6731:76:14","statements":[{"nodeType":"YulAssignment","src":"6741:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6753:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"6764:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6749:3:14"},"nodeType":"YulFunctionCall","src":"6749:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6741:4:14"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6783:9:14"},{"name":"value0","nodeType":"YulIdentifier","src":"6794:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6776:6:14"},"nodeType":"YulFunctionCall","src":"6776:25:14"},"nodeType":"YulExpressionStatement","src":"6776:25:14"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6700:9:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6711:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6722:4:14","type":""}],"src":"6630:177:14"},{"body":{"nodeType":"YulBlock","src":"6893:103:14","statements":[{"body":{"nodeType":"YulBlock","src":"6939:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6948:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6951:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6941:6:14"},"nodeType":"YulFunctionCall","src":"6941:12:14"},"nodeType":"YulExpressionStatement","src":"6941:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6914:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"6923:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6910:3:14"},"nodeType":"YulFunctionCall","src":"6910:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"6935:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6906:3:14"},"nodeType":"YulFunctionCall","src":"6906:32:14"},"nodeType":"YulIf","src":"6903:52:14"},{"nodeType":"YulAssignment","src":"6964:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6980:9:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6974:5:14"},"nodeType":"YulFunctionCall","src":"6974:16:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6964:6:14"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6859:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6870:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6882:6:14","type":""}],"src":"6812:184:14"},{"body":{"nodeType":"YulBlock","src":"7175:166:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7192:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"7203:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7185:6:14"},"nodeType":"YulFunctionCall","src":"7185:21:14"},"nodeType":"YulExpressionStatement","src":"7185:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7226:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"7237:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7222:3:14"},"nodeType":"YulFunctionCall","src":"7222:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"7242:2:14","type":"","value":"16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7215:6:14"},"nodeType":"YulFunctionCall","src":"7215:30:14"},"nodeType":"YulExpressionStatement","src":"7215:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7265:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"7276:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7261:3:14"},"nodeType":"YulFunctionCall","src":"7261:18:14"},{"hexValue":"4e6f20746f6b656e2062616c616e6365","kind":"string","nodeType":"YulLiteral","src":"7281:18:14","type":"","value":"No token balance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7254:6:14"},"nodeType":"YulFunctionCall","src":"7254:46:14"},"nodeType":"YulExpressionStatement","src":"7254:46:14"},{"nodeType":"YulAssignment","src":"7309:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7321:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"7332:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7317:3:14"},"nodeType":"YulFunctionCall","src":"7317:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7309:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8536626b412a46c35de6ed74b090726e51e6188c2c2bdfef9a7161e6f493992__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7152:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7166:4:14","type":""}],"src":"7001:340:14"},{"body":{"nodeType":"YulBlock","src":"7475:145:14","statements":[{"nodeType":"YulAssignment","src":"7485:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7497:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"7508:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7493:3:14"},"nodeType":"YulFunctionCall","src":"7493:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7485:4:14"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7527:9:14"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7542:6:14"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7558:3:14","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"7563:1:14","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7554:3:14"},"nodeType":"YulFunctionCall","src":"7554:11:14"},{"kind":"number","nodeType":"YulLiteral","src":"7567:1:14","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7550:3:14"},"nodeType":"YulFunctionCall","src":"7550:19:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7538:3:14"},"nodeType":"YulFunctionCall","src":"7538:32:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7520:6:14"},"nodeType":"YulFunctionCall","src":"7520:51:14"},"nodeType":"YulExpressionStatement","src":"7520:51:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7591:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"7602:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7587:3:14"},"nodeType":"YulFunctionCall","src":"7587:18:14"},{"name":"value1","nodeType":"YulIdentifier","src":"7607:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7580:6:14"},"nodeType":"YulFunctionCall","src":"7580:34:14"},"nodeType":"YulExpressionStatement","src":"7580:34:14"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7436:9:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7447:6:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7455:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7466:4:14","type":""}],"src":"7346:274:14"},{"body":{"nodeType":"YulBlock","src":"7703:199:14","statements":[{"body":{"nodeType":"YulBlock","src":"7749:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7758:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7761:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7751:6:14"},"nodeType":"YulFunctionCall","src":"7751:12:14"},"nodeType":"YulExpressionStatement","src":"7751:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7724:7:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"7733:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7720:3:14"},"nodeType":"YulFunctionCall","src":"7720:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"7745:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7716:3:14"},"nodeType":"YulFunctionCall","src":"7716:32:14"},"nodeType":"YulIf","src":"7713:52:14"},{"nodeType":"YulVariableDeclaration","src":"7774:29:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7793:9:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7787:5:14"},"nodeType":"YulFunctionCall","src":"7787:16:14"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"7778:5:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"7856:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7865:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7868:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7858:6:14"},"nodeType":"YulFunctionCall","src":"7858:12:14"},"nodeType":"YulExpressionStatement","src":"7858:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7825:5:14"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7846:5:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7839:6:14"},"nodeType":"YulFunctionCall","src":"7839:13:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7832:6:14"},"nodeType":"YulFunctionCall","src":"7832:21:14"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7822:2:14"},"nodeType":"YulFunctionCall","src":"7822:32:14"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7815:6:14"},"nodeType":"YulFunctionCall","src":"7815:40:14"},"nodeType":"YulIf","src":"7812:60:14"},{"nodeType":"YulAssignment","src":"7881:15:14","value":{"name":"value","nodeType":"YulIdentifier","src":"7891:5:14"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7881:6:14"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7669:9:14","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7680:7:14","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7692:6:14","type":""}],"src":"7625:277:14"},{"body":{"nodeType":"YulBlock","src":"8081:165:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8098:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"8109:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8091:6:14"},"nodeType":"YulFunctionCall","src":"8091:21:14"},"nodeType":"YulExpressionStatement","src":"8091:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8132:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"8143:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8128:3:14"},"nodeType":"YulFunctionCall","src":"8128:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"8148:2:14","type":"","value":"15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8121:6:14"},"nodeType":"YulFunctionCall","src":"8121:30:14"},"nodeType":"YulExpressionStatement","src":"8121:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8171:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"8182:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8167:3:14"},"nodeType":"YulFunctionCall","src":"8167:18:14"},{"hexValue":"5472616e73666572206661696c6564","kind":"string","nodeType":"YulLiteral","src":"8187:17:14","type":"","value":"Transfer failed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8160:6:14"},"nodeType":"YulFunctionCall","src":"8160:45:14"},"nodeType":"YulExpressionStatement","src":"8160:45:14"},{"nodeType":"YulAssignment","src":"8214:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8226:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"8237:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8222:3:14"},"nodeType":"YulFunctionCall","src":"8222:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8214:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8058:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8072:4:14","type":""}],"src":"7907:339:14"},{"body":{"nodeType":"YulBlock","src":"8425:171:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8442:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"8453:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8435:6:14"},"nodeType":"YulFunctionCall","src":"8435:21:14"},"nodeType":"YulExpressionStatement","src":"8435:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8476:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"8487:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8472:3:14"},"nodeType":"YulFunctionCall","src":"8472:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"8492:2:14","type":"","value":"21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8465:6:14"},"nodeType":"YulFunctionCall","src":"8465:30:14"},"nodeType":"YulExpressionStatement","src":"8465:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8515:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"8526:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8511:3:14"},"nodeType":"YulFunctionCall","src":"8511:18:14"},{"hexValue":"4172726179206c656e677468206d69736d61746368","kind":"string","nodeType":"YulLiteral","src":"8531:23:14","type":"","value":"Array length mismatch"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8504:6:14"},"nodeType":"YulFunctionCall","src":"8504:51:14"},"nodeType":"YulExpressionStatement","src":"8504:51:14"},{"nodeType":"YulAssignment","src":"8564:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8576:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"8587:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8572:3:14"},"nodeType":"YulFunctionCall","src":"8572:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8564:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_179ae693e0c70d403e6d1a2bebe6454a8d095a8abd12c6f3f032c5018f3e2aea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8402:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8416:4:14","type":""}],"src":"8251:345:14"},{"body":{"nodeType":"YulBlock","src":"8775:162:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8792:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"8803:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8785:6:14"},"nodeType":"YulFunctionCall","src":"8785:21:14"},"nodeType":"YulExpressionStatement","src":"8785:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8826:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"8837:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8822:3:14"},"nodeType":"YulFunctionCall","src":"8822:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"8842:2:14","type":"","value":"12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8815:6:14"},"nodeType":"YulFunctionCall","src":"8815:30:14"},"nodeType":"YulExpressionStatement","src":"8815:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8865:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"8876:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8861:3:14"},"nodeType":"YulFunctionCall","src":"8861:18:14"},{"hexValue":"456d70747920617272617973","kind":"string","nodeType":"YulLiteral","src":"8881:14:14","type":"","value":"Empty arrays"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8854:6:14"},"nodeType":"YulFunctionCall","src":"8854:42:14"},"nodeType":"YulExpressionStatement","src":"8854:42:14"},{"nodeType":"YulAssignment","src":"8905:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8917:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"8928:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8913:3:14"},"nodeType":"YulFunctionCall","src":"8913:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8905:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_920fc87d8e9a45232b5e4c2c36e3c0fff5f09b5434a80d6ec35d7f09f9d69c29__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8752:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8766:4:14","type":""}],"src":"8601:336:14"},{"body":{"nodeType":"YulBlock","src":"9008:184:14","statements":[{"nodeType":"YulVariableDeclaration","src":"9018:10:14","value":{"kind":"number","nodeType":"YulLiteral","src":"9027:1:14","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"9022:1:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"9087:63:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"9112:3:14"},{"name":"i","nodeType":"YulIdentifier","src":"9117:1:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9108:3:14"},"nodeType":"YulFunctionCall","src":"9108:11:14"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"9131:3:14"},{"name":"i","nodeType":"YulIdentifier","src":"9136:1:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9127:3:14"},"nodeType":"YulFunctionCall","src":"9127:11:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9121:5:14"},"nodeType":"YulFunctionCall","src":"9121:18:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9101:6:14"},"nodeType":"YulFunctionCall","src":"9101:39:14"},"nodeType":"YulExpressionStatement","src":"9101:39:14"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"9048:1:14"},{"name":"length","nodeType":"YulIdentifier","src":"9051:6:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9045:2:14"},"nodeType":"YulFunctionCall","src":"9045:13:14"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"9059:19:14","statements":[{"nodeType":"YulAssignment","src":"9061:15:14","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"9070:1:14"},{"kind":"number","nodeType":"YulLiteral","src":"9073:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9066:3:14"},"nodeType":"YulFunctionCall","src":"9066:10:14"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"9061:1:14"}]}]},"pre":{"nodeType":"YulBlock","src":"9041:3:14","statements":[]},"src":"9037:113:14"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"9170:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"9175:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9166:3:14"},"nodeType":"YulFunctionCall","src":"9166:16:14"},{"kind":"number","nodeType":"YulLiteral","src":"9184:1:14","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9159:6:14"},"nodeType":"YulFunctionCall","src":"9159:27:14"},"nodeType":"YulExpressionStatement","src":"9159:27:14"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8986:3:14","type":""},{"name":"dst","nodeType":"YulTypedName","src":"8991:3:14","type":""},{"name":"length","nodeType":"YulTypedName","src":"8996:6:14","type":""}],"src":"8942:250:14"},{"body":{"nodeType":"YulBlock","src":"9246:221:14","statements":[{"nodeType":"YulVariableDeclaration","src":"9256:26:14","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9276:5:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9270:5:14"},"nodeType":"YulFunctionCall","src":"9270:12:14"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"9260:6:14","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9298:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"9303:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9291:6:14"},"nodeType":"YulFunctionCall","src":"9291:19:14"},"nodeType":"YulExpressionStatement","src":"9291:19:14"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9358:5:14"},{"kind":"number","nodeType":"YulLiteral","src":"9365:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9354:3:14"},"nodeType":"YulFunctionCall","src":"9354:16:14"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9376:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"9381:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9372:3:14"},"nodeType":"YulFunctionCall","src":"9372:14:14"},{"name":"length","nodeType":"YulIdentifier","src":"9388:6:14"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"9319:34:14"},"nodeType":"YulFunctionCall","src":"9319:76:14"},"nodeType":"YulExpressionStatement","src":"9319:76:14"},{"nodeType":"YulAssignment","src":"9404:57:14","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9419:3:14"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9432:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"9440:2:14","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9428:3:14"},"nodeType":"YulFunctionCall","src":"9428:15:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9449:2:14","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"9445:3:14"},"nodeType":"YulFunctionCall","src":"9445:7:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9424:3:14"},"nodeType":"YulFunctionCall","src":"9424:29:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9415:3:14"},"nodeType":"YulFunctionCall","src":"9415:39:14"},{"kind":"number","nodeType":"YulLiteral","src":"9456:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9411:3:14"},"nodeType":"YulFunctionCall","src":"9411:50:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9404:3:14"}]}]},"name":"abi_encode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9223:5:14","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9230:3:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9238:3:14","type":""}],"src":"9197:270:14"},{"body":{"nodeType":"YulBlock","src":"9818:1107:14","statements":[{"nodeType":"YulVariableDeclaration","src":"9828:33:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9846:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"9857:3:14","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9842:3:14"},"nodeType":"YulFunctionCall","src":"9842:19:14"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"9832:6:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9870:29:14","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9888:3:14","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"9893:1:14","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9884:3:14"},"nodeType":"YulFunctionCall","src":"9884:11:14"},{"kind":"number","nodeType":"YulLiteral","src":"9897:1:14","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9880:3:14"},"nodeType":"YulFunctionCall","src":"9880:19:14"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9874:2:14","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9915:9:14"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9930:6:14"},{"name":"_1","nodeType":"YulIdentifier","src":"9938:2:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9926:3:14"},"nodeType":"YulFunctionCall","src":"9926:15:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9908:6:14"},"nodeType":"YulFunctionCall","src":"9908:34:14"},"nodeType":"YulExpressionStatement","src":"9908:34:14"},{"nodeType":"YulVariableDeclaration","src":"9951:12:14","value":{"kind":"number","nodeType":"YulLiteral","src":"9961:2:14","type":"","value":"32"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"9955:2:14","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9983:9:14"},{"name":"_2","nodeType":"YulIdentifier","src":"9994:2:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9979:3:14"},"nodeType":"YulFunctionCall","src":"9979:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"9999:3:14","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9972:6:14"},"nodeType":"YulFunctionCall","src":"9972:31:14"},"nodeType":"YulExpressionStatement","src":"9972:31:14"},{"nodeType":"YulVariableDeclaration","src":"10012:17:14","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"10023:6:14"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"10016:3:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10038:27:14","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10058:6:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10052:5:14"},"nodeType":"YulFunctionCall","src":"10052:13:14"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"10042:6:14","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"10081:6:14"},{"name":"length","nodeType":"YulIdentifier","src":"10089:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10074:6:14"},"nodeType":"YulFunctionCall","src":"10074:22:14"},"nodeType":"YulExpressionStatement","src":"10074:22:14"},{"nodeType":"YulAssignment","src":"10105:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10116:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"10127:3:14","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10112:3:14"},"nodeType":"YulFunctionCall","src":"10112:19:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10105:3:14"}]},{"nodeType":"YulVariableDeclaration","src":"10140:29:14","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10158:6:14"},{"name":"_2","nodeType":"YulIdentifier","src":"10166:2:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10154:3:14"},"nodeType":"YulFunctionCall","src":"10154:15:14"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"10144:6:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10178:10:14","value":{"kind":"number","nodeType":"YulLiteral","src":"10187:1:14","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"10182:1:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"10246:129:14","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10267:3:14"},{"arguments":[{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"10282:6:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10276:5:14"},"nodeType":"YulFunctionCall","src":"10276:13:14"},{"name":"_1","nodeType":"YulIdentifier","src":"10291:2:14"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10272:3:14"},"nodeType":"YulFunctionCall","src":"10272:22:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10260:6:14"},"nodeType":"YulFunctionCall","src":"10260:35:14"},"nodeType":"YulExpressionStatement","src":"10260:35:14"},{"nodeType":"YulAssignment","src":"10308:19:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10319:3:14"},{"name":"_2","nodeType":"YulIdentifier","src":"10324:2:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10315:3:14"},"nodeType":"YulFunctionCall","src":"10315:12:14"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10308:3:14"}]},{"nodeType":"YulAssignment","src":"10340:25:14","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"10354:6:14"},{"name":"_2","nodeType":"YulIdentifier","src":"10362:2:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10350:3:14"},"nodeType":"YulFunctionCall","src":"10350:15:14"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"10340:6:14"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"10208:1:14"},{"name":"length","nodeType":"YulIdentifier","src":"10211:6:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10205:2:14"},"nodeType":"YulFunctionCall","src":"10205:13:14"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"10219:18:14","statements":[{"nodeType":"YulAssignment","src":"10221:14:14","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"10230:1:14"},{"kind":"number","nodeType":"YulLiteral","src":"10233:1:14","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10226:3:14"},"nodeType":"YulFunctionCall","src":"10226:9:14"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"10221:1:14"}]}]},"pre":{"nodeType":"YulBlock","src":"10201:3:14","statements":[]},"src":"10197:178:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10395:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"10406:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10391:3:14"},"nodeType":"YulFunctionCall","src":"10391:18:14"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10415:3:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"10420:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10411:3:14"},"nodeType":"YulFunctionCall","src":"10411:19:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10384:6:14"},"nodeType":"YulFunctionCall","src":"10384:47:14"},"nodeType":"YulExpressionStatement","src":"10384:47:14"},{"nodeType":"YulVariableDeclaration","src":"10440:16:14","value":{"name":"pos","nodeType":"YulIdentifier","src":"10453:3:14"},"variables":[{"name":"pos_1","nodeType":"YulTypedName","src":"10444:5:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10465:29:14","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"10487:6:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10481:5:14"},"nodeType":"YulFunctionCall","src":"10481:13:14"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"10469:8:14","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10510:3:14"},{"name":"length_1","nodeType":"YulIdentifier","src":"10515:8:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10503:6:14"},"nodeType":"YulFunctionCall","src":"10503:21:14"},"nodeType":"YulExpressionStatement","src":"10503:21:14"},{"nodeType":"YulAssignment","src":"10533:21:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10546:3:14"},{"name":"_2","nodeType":"YulIdentifier","src":"10551:2:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10542:3:14"},"nodeType":"YulFunctionCall","src":"10542:12:14"},"variableNames":[{"name":"pos_1","nodeType":"YulIdentifier","src":"10533:5:14"}]},{"nodeType":"YulVariableDeclaration","src":"10563:31:14","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"10583:6:14"},{"name":"_2","nodeType":"YulIdentifier","src":"10591:2:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10579:3:14"},"nodeType":"YulFunctionCall","src":"10579:15:14"},"variables":[{"name":"srcPtr_1","nodeType":"YulTypedName","src":"10567:8:14","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10603:12:14","value":{"kind":"number","nodeType":"YulLiteral","src":"10614:1:14","type":"","value":"0"},"variables":[{"name":"i_1","nodeType":"YulTypedName","src":"10607:3:14","type":""}]},{"body":{"nodeType":"YulBlock","src":"10681:132:14","statements":[{"expression":{"arguments":[{"name":"pos_1","nodeType":"YulIdentifier","src":"10702:5:14"},{"arguments":[{"name":"srcPtr_1","nodeType":"YulIdentifier","src":"10715:8:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10709:5:14"},"nodeType":"YulFunctionCall","src":"10709:15:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10695:6:14"},"nodeType":"YulFunctionCall","src":"10695:30:14"},"nodeType":"YulExpressionStatement","src":"10695:30:14"},{"nodeType":"YulAssignment","src":"10738:23:14","value":{"arguments":[{"name":"pos_1","nodeType":"YulIdentifier","src":"10751:5:14"},{"name":"_2","nodeType":"YulIdentifier","src":"10758:2:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10747:3:14"},"nodeType":"YulFunctionCall","src":"10747:14:14"},"variableNames":[{"name":"pos_1","nodeType":"YulIdentifier","src":"10738:5:14"}]},{"nodeType":"YulAssignment","src":"10774:29:14","value":{"arguments":[{"name":"srcPtr_1","nodeType":"YulIdentifier","src":"10790:8:14"},{"name":"_2","nodeType":"YulIdentifier","src":"10800:2:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10786:3:14"},"nodeType":"YulFunctionCall","src":"10786:17:14"},"variableNames":[{"name":"srcPtr_1","nodeType":"YulIdentifier","src":"10774:8:14"}]}]},"condition":{"arguments":[{"name":"i_1","nodeType":"YulIdentifier","src":"10635:3:14"},{"name":"length_1","nodeType":"YulIdentifier","src":"10640:8:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10632:2:14"},"nodeType":"YulFunctionCall","src":"10632:17:14"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"10650:22:14","statements":[{"nodeType":"YulAssignment","src":"10652:18:14","value":{"arguments":[{"name":"i_1","nodeType":"YulIdentifier","src":"10663:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"10668:1:14","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10659:3:14"},"nodeType":"YulFunctionCall","src":"10659:11:14"},"variableNames":[{"name":"i_1","nodeType":"YulIdentifier","src":"10652:3:14"}]}]},"pre":{"nodeType":"YulBlock","src":"10628:3:14","statements":[]},"src":"10624:189:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10833:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"10844:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10829:3:14"},"nodeType":"YulFunctionCall","src":"10829:18:14"},{"arguments":[{"name":"pos_1","nodeType":"YulIdentifier","src":"10853:5:14"},{"name":"headStart","nodeType":"YulIdentifier","src":"10860:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10849:3:14"},"nodeType":"YulFunctionCall","src":"10849:21:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10822:6:14"},"nodeType":"YulFunctionCall","src":"10822:49:14"},"nodeType":"YulExpressionStatement","src":"10822:49:14"},{"nodeType":"YulAssignment","src":"10880:39:14","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"10905:6:14"},{"name":"pos_1","nodeType":"YulIdentifier","src":"10913:5:14"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"10888:16:14"},"nodeType":"YulFunctionCall","src":"10888:31:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10880:4:14"}]}]},"name":"abi_encode_tuple_t_contract$_BalancerFlashLoanArb_$1383_t_array$_t_contract$_IERC20_$140_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9763:9:14","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9774:6:14","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9782:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9790:6:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9798:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9809:4:14","type":""}],"src":"9472:1453:14"},{"body":{"nodeType":"YulBlock","src":"11104:165:14","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11121:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"11132:2:14","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11114:6:14"},"nodeType":"YulFunctionCall","src":"11114:21:14"},"nodeType":"YulExpressionStatement","src":"11114:21:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11155:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"11166:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11151:3:14"},"nodeType":"YulFunctionCall","src":"11151:18:14"},{"kind":"number","nodeType":"YulLiteral","src":"11171:2:14","type":"","value":"15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11144:6:14"},"nodeType":"YulFunctionCall","src":"11144:30:14"},"nodeType":"YulExpressionStatement","src":"11144:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11194:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"11205:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11190:3:14"},"nodeType":"YulFunctionCall","src":"11190:18:14"},{"hexValue":"417070726f76616c206661696c6564","kind":"string","nodeType":"YulLiteral","src":"11210:17:14","type":"","value":"Approval failed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11183:6:14"},"nodeType":"YulFunctionCall","src":"11183:45:14"},"nodeType":"YulExpressionStatement","src":"11183:45:14"},{"nodeType":"YulAssignment","src":"11237:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11249:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"11260:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11245:3:14"},"nodeType":"YulFunctionCall","src":"11245:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11237:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_943d1e3eddd033b0757a7ad9dc3dff9f8f150c5b720d6ee708e13ac5fc8e5d07__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11081:9:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11095:4:14","type":""}],"src":"10930:339:14"},{"body":{"nodeType":"YulBlock","src":"11411:150:14","statements":[{"nodeType":"YulVariableDeclaration","src":"11421:27:14","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11441:6:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11435:5:14"},"nodeType":"YulFunctionCall","src":"11435:13:14"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"11425:6:14","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11496:6:14"},{"kind":"number","nodeType":"YulLiteral","src":"11504:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11492:3:14"},"nodeType":"YulFunctionCall","src":"11492:17:14"},{"name":"pos","nodeType":"YulIdentifier","src":"11511:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"11516:6:14"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"11457:34:14"},"nodeType":"YulFunctionCall","src":"11457:66:14"},"nodeType":"YulExpressionStatement","src":"11457:66:14"},{"nodeType":"YulAssignment","src":"11532:23:14","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11543:3:14"},{"name":"length","nodeType":"YulIdentifier","src":"11548:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11539:3:14"},"nodeType":"YulFunctionCall","src":"11539:16:14"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11532:3:14"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11387:3:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11392:6:14","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11403:3:14","type":""}],"src":"11274:287:14"},{"body":{"nodeType":"YulBlock","src":"11615:79:14","statements":[{"nodeType":"YulAssignment","src":"11625:17:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11637:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"11640:1:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11633:3:14"},"nodeType":"YulFunctionCall","src":"11633:9:14"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"11625:4:14"}]},{"body":{"nodeType":"YulBlock","src":"11666:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11668:16:14"},"nodeType":"YulFunctionCall","src":"11668:18:14"},"nodeType":"YulExpressionStatement","src":"11668:18:14"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"11657:4:14"},{"name":"x","nodeType":"YulIdentifier","src":"11663:1:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11654:2:14"},"nodeType":"YulFunctionCall","src":"11654:11:14"},"nodeType":"YulIf","src":"11651:37:14"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11597:1:14","type":""},{"name":"y","nodeType":"YulTypedName","src":"11600:1:14","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"11606:4:14","type":""}],"src":"11566:128:14"},{"body":{"nodeType":"YulBlock","src":"11864:162:14","statements":[{"nodeType":"YulAssignment","src":"11874:26:14","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11886:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"11897:2:14","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11882:3:14"},"nodeType":"YulFunctionCall","src":"11882:18:14"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11874:4:14"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11916:9:14"},{"name":"value0","nodeType":"YulIdentifier","src":"11927:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11909:6:14"},"nodeType":"YulFunctionCall","src":"11909:25:14"},"nodeType":"YulExpressionStatement","src":"11909:25:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11954:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"11965:2:14","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11950:3:14"},"nodeType":"YulFunctionCall","src":"11950:18:14"},{"name":"value1","nodeType":"YulIdentifier","src":"11970:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11943:6:14"},"nodeType":"YulFunctionCall","src":"11943:34:14"},"nodeType":"YulExpressionStatement","src":"11943:34:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11997:9:14"},{"kind":"number","nodeType":"YulLiteral","src":"12008:2:14","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11993:3:14"},"nodeType":"YulFunctionCall","src":"11993:18:14"},{"name":"value2","nodeType":"YulIdentifier","src":"12013:6:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11986:6:14"},"nodeType":"YulFunctionCall","src":"11986:34:14"},"nodeType":"YulExpressionStatement","src":"11986:34:14"}]},"name":"abi_encode_tuple_t_uint256_t_rational_0_by_1_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11817:9:14","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11828:6:14","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11836:6:14","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11844:6:14","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11855:4:14","type":""}],"src":"11699:327:14"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_contract_IERC20_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_array_contract_IERC20_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_contract_IERC20_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            let value := calldataload(src)\n            validator_revert_address(value)\n            mstore(dst, value)\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_contract_IERC20_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        if gt(_1, 0xffffffffffffffff) { panic_error_0x41() }\n        let array_1 := allocate_memory(add(and(add(_1, 0x1f), not(31)), 0x20))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), 0)\n        array := array_1\n    }\n    function abi_decode_tuple_t_array$_t_contract$_IERC20_$140_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_array_contract_IERC20_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value2 := abi_decode_bytes(add(headStart, offset_2), dataEnd)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_array$_t_contract$_IERC20_$140_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_array_contract_IERC20_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value2 := abi_decode_array_uint256_dyn(add(headStart, offset_2), dataEnd)\n        let offset_3 := calldataload(add(headStart, 96))\n        if gt(offset_3, _1) { revert(0, 0) }\n        value3 := abi_decode_bytes(add(headStart, offset_3), dataEnd)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_a59a84690063b053e17f07f5c73996b4ba2242b8ef998b4347da8fd090922bcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"No ETH balance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_f8536626b412a46c35de6ed74b090726e51e6188c2c2bdfef9a7161e6f493992__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"No token balance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Transfer failed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_179ae693e0c70d403e6d1a2bebe6454a8d095a8abd12c6f3f032c5018f3e2aea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"Array length mismatch\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_920fc87d8e9a45232b5e4c2c36e3c0fff5f09b5434a80d6ec35d7f09f9d69c29__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 12)\n        mstore(add(headStart, 64), \"Empty arrays\")\n        tail := add(headStart, 96)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_contract$_BalancerFlashLoanArb_$1383_t_array$_t_contract$_IERC20_$140_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let tail_1 := add(headStart, 128)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        let _2 := 32\n        mstore(add(headStart, _2), 128)\n        let pos := tail_1\n        let length := mload(value1)\n        mstore(tail_1, length)\n        pos := add(headStart, 160)\n        let srcPtr := add(value1, _2)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), _1))\n            pos := add(pos, _2)\n            srcPtr := add(srcPtr, _2)\n        }\n        mstore(add(headStart, 64), sub(pos, headStart))\n        let pos_1 := pos\n        let length_1 := mload(value2)\n        mstore(pos, length_1)\n        pos_1 := add(pos, _2)\n        let srcPtr_1 := add(value2, _2)\n        let i_1 := 0\n        for { } lt(i_1, length_1) { i_1 := add(i_1, 1) }\n        {\n            mstore(pos_1, mload(srcPtr_1))\n            pos_1 := add(pos_1, _2)\n            srcPtr_1 := add(srcPtr_1, _2)\n        }\n        mstore(add(headStart, 96), sub(pos_1, headStart))\n        tail := abi_encode_bytes(value3, pos_1)\n    }\n    function abi_encode_tuple_t_stringliteral_943d1e3eddd033b0757a7ad9dc3dff9f8f150c5b720d6ee708e13ac5fc8e5d07__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Approval failed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_uint256_t_rational_0_by_1_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n}","id":14,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"1029":[{"length":32,"start":1491},{"length":32,"start":1620},{"length":32,"start":2384}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x4E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x102 JUMPI DUP1 PUSH4 0xF04F2707 EQ PUSH2 0x138 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x158 JUMPI DUP1 PUSH4 0xF840F3FC EQ PUSH2 0x178 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x12867764 EQ PUSH2 0x8B JUMPI DUP1 PUSH4 0x51CFF8D9 EQ PUSH2 0xAD JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xCD JUMPI DUP1 PUSH4 0x76EC49BA EQ PUSH2 0xE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x86 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH2 0xA6 CALLDATASIZE PUSH1 0x4 PUSH2 0xB55 JUMP JUMPDEST PUSH2 0x19B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH2 0xC8 CALLDATASIZE PUSH1 0x4 PUSH2 0xBDF JUMP JUMPDEST PUSH2 0x245 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH2 0x50F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH2 0xFD CALLDATASIZE PUSH1 0x4 PUSH2 0xDAD JUMP JUMPDEST PUSH2 0x523 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x144 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH2 0x153 CALLDATASIZE PUSH1 0x4 PUSH2 0xE35 JUMP JUMPDEST PUSH2 0x649 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x164 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH2 0x173 CALLDATASIZE PUSH1 0x4 PUSH2 0xBDF JUMP JUMPDEST PUSH2 0xA73 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x184 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11C PUSH15 0x22D473030F116DDEE9F6B43AC78BA3 DUP2 JUMP JUMPDEST PUSH2 0x1A3 PUSH2 0xAAE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x240 JUMPI ADDRESS PUSH4 0x51CFF8D9 DUP5 DUP5 DUP5 DUP2 DUP2 LT PUSH2 0x1C6 JUMPI PUSH2 0x1C6 PUSH2 0xEE2 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1DB SWAP2 SWAP1 PUSH2 0xBDF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x21C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x22D JUMPI POP PUSH1 0x1 JUMPDEST POP DUP1 PUSH2 0x238 DUP2 PUSH2 0xF0E JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1A6 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x24D PUSH2 0xAAE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x34F JUMPI SELFBALANCE DUP1 PUSH2 0x29F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x4E6F204554482062616C616E6365 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2EC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2F1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x313 JUMPI PUSH1 0x40 MLOAD PUSH4 0x12171D83 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH32 0x5FAFA99D0643513820BE26656B45130B01E1C03062E1266BF36F88CBD3BD9695 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE DUP2 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x398 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3BC SWAP2 SWAP1 PUSH2 0xF27 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x401 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x4E6F20746F6B656E2062616C616E6365 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x296 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB PUSH2 0x422 PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x46F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x493 SWAP2 SWAP1 PUSH2 0xF40 JUMP JUMPDEST PUSH2 0x4D1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x151C985B9CD9995C8819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x296 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x5FAFA99D0643513820BE26656B45130B01E1C03062E1266BF36F88CBD3BD9695 DUP3 PUSH1 0x40 MLOAD PUSH2 0x342 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x517 PUSH2 0xAAE JUMP JUMPDEST PUSH2 0x521 PUSH1 0x0 PUSH2 0xADB JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x52B PUSH2 0xAAE JUMP JUMPDEST PUSH2 0x533 PUSH2 0xB2B JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x57C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x82E4E4C2F240D8CADCCEE8D040DAD2E6DAC2E8C6D PUSH1 0x5B SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x296 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD GT PUSH2 0x5BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x456D70747920617272617973 PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x296 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2E1C224F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x5C38449E SWAP1 PUSH2 0x60E SWAP1 ADDRESS SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0xFB2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x628 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x63C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x240 PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x691 JUMPI PUSH1 0x40 MLOAD PUSH3 0x82B429 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6A6 JUMPI PUSH2 0x6A6 PUSH2 0xEE2 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6C5 JUMPI PUSH2 0x6C5 PUSH2 0xEE2 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6E4 JUMPI PUSH2 0x6E4 PUSH2 0xEE2 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x739 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x75D SWAP2 SWAP1 PUSH2 0xF27 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH15 0x22D473030F116DDEE9F6B43AC78BA3 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7BC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7E0 SWAP2 SWAP1 PUSH2 0xF40 JUMP JUMPDEST PUSH2 0x81E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x105C1C1C9BDD985B0819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x296 JUMP JUMPDEST PUSH1 0x0 PUSH15 0x22D473030F116DDEE9F6B43AC78BA3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x40 MLOAD PUSH2 0x847 SWAP2 SWAP1 PUSH2 0x1059 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x884 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x889 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x8AB JUMPI PUSH1 0x40 MLOAD PUSH4 0x81CEFF3 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8F2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x916 SWAP2 SWAP1 PUSH2 0xF27 JUMP JUMPDEST SWAP1 POP DUP5 DUP1 DUP3 GT PUSH2 0x939 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2723FC75 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP9 SWAP1 MSTORE DUP9 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x9A8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9CC SWAP2 SWAP1 PUSH2 0xF40 JUMP JUMPDEST PUSH2 0xA0A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x151C985B9CD9995C8819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x296 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA16 DUP8 DUP5 PUSH2 0x1075 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP10 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH32 0xE03A36D920AD8DE5A978A8F1917280E202AE9193E6DC19E08EF1F6C2A051EBA4 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xA7B PUSH2 0xAAE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xAA5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x296 JUMP JUMPDEST PUSH2 0x50C DUP2 PUSH2 0xADB JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x521 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x296 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD SUB PUSH2 0xB4E JUMPI PUSH1 0x40 MLOAD PUSH4 0x3EE5AEB5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xB80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xB94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xBA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xBB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x50C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xBFC DUP2 PUSH2 0xBCA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xC42 JUMPI PUSH2 0xC42 PUSH2 0xC03 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xC64 JUMPI PUSH2 0xC64 PUSH2 0xC03 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xC7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xC94 PUSH2 0xC8F DUP4 PUSH2 0xC4A JUMP JUMPDEST PUSH2 0xC19 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0xCB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xCD7 JUMPI DUP1 CALLDATALOAD PUSH2 0xCCA DUP2 PUSH2 0xBCA JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0xCB7 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xCF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xD03 PUSH2 0xC8F DUP4 PUSH2 0xC4A JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0xD22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xCD7 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0xD26 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xD4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD68 JUMPI PUSH2 0xD68 PUSH2 0xC03 JUMP JUMPDEST PUSH2 0xD7B PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0xC19 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0xD90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xDC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xDDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDE6 DUP8 DUP4 DUP9 ADD PUSH2 0xC6E JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xDFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE08 DUP8 DUP4 DUP9 ADD PUSH2 0xCE2 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xE1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE2B DUP7 DUP3 DUP8 ADD PUSH2 0xD3D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xE4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xE63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE6F DUP9 DUP4 DUP10 ADD PUSH2 0xC6E JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xE85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE91 DUP9 DUP4 DUP10 ADD PUSH2 0xCE2 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xEA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEB3 DUP9 DUP4 DUP10 ADD PUSH2 0xCE2 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xEC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xED6 DUP8 DUP3 DUP9 ADD PUSH2 0xD3D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0xF20 JUMPI PUSH2 0xF20 PUSH2 0xEF8 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xBFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF7D JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xF65 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xF9E DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xF62 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE PUSH1 0x80 PUSH1 0x20 DUP1 DUP5 ADD DUP3 SWAP1 MSTORE DUP7 MLOAD SWAP2 DUP5 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP3 DUP8 DUP3 ADD SWAP3 SWAP1 SWAP2 SWAP1 PUSH1 0xA0 DUP7 ADD SWAP1 DUP6 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1000 JUMPI DUP6 MLOAD DUP6 AND DUP4 MSTORE SWAP5 DUP4 ADD SWAP5 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xFE2 JUMP JUMPDEST POP POP DUP6 DUP2 SUB PUSH1 0x40 DUP8 ADD MSTORE DUP8 MLOAD DUP1 DUP3 MSTORE SWAP1 DUP3 ADD SWAP4 POP SWAP2 POP DUP1 DUP8 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1038 JUMPI DUP2 MLOAD DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x101C JUMP JUMPDEST POP POP POP POP DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x104E DUP2 DUP6 PUSH2 0xF86 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x106B DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xF62 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x1088 JUMPI PUSH2 0x1088 PUSH2 0xEF8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH32 0x1E06B77DACD51B2563BD325F9429C5AB4B5D5F210F763918EFE6870A6381264 PUSH20 0x6F6C634300081400330000000000000000000000 ","sourceMap":"405:4683:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4779:219;;;;;;;;;;-1:-1:-1;4779:219:13;;;;;:::i;:::-;;:::i;:::-;;3880:781;;;;;;;;;;-1:-1:-1;3880:781:13;;;;;:::i;:::-;;:::i;2293:101:10:-;;;;;;;;;;;;;:::i;1389:410:13:-;;;;;;;;;;-1:-1:-1;1389:410:13;;;;;:::i;:::-;;:::i;1638:85:10:-;;;;;;;;;;-1:-1:-1;1684:7:10;1710:6;-1:-1:-1;;;;;1710:6:10;1638:85;;;-1:-1:-1;;;;;4582:32:14;;;4564:51;;4552:2;4537:18;1638:85:10;;;;;;;1869:1878:13;;;;;;;;;;-1:-1:-1;1869:1878:13;;;;;:::i;:::-;;:::i;2543:215:10:-;;;;;;;;;;-1:-1:-1;2543:215:10;;;;;:::i;:::-;;:::i;563:93:13:-;;;;;;;;;;;;614:42;563:93;;4779:219;1531:13:10;:11;:13::i;:::-;4889:9:13::1;4884:108;4904:17:::0;;::::1;4884:108;;;4946:4;:13;4960:6:::0;;4967:1;4960:9;;::::1;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;4946:24;::::0;-1:-1:-1;;;;;;4946:24:13::1;::::0;;;;;;-1:-1:-1;;;;;4582:32:14;;;4946:24:13::1;::::0;::::1;4564:51:14::0;4537:18;;4946:24:13::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;4942:40:::0;4923:3;::::1;::::0;::::1;:::i;:::-;;;;4884:108;;;;4779:219:::0;;:::o;3880:781::-;1531:13:10;:11;:13::i;:::-;-1:-1:-1;;;;;3953:26:13;::::1;3949:706;;4047:21;4090:11:::0;4082:38:::1;;;::::0;-1:-1:-1;;;4082:38:13;;6279:2:14;4082:38:13::1;::::0;::::1;6261:21:14::0;6318:2;6298:18;;;6291:30;-1:-1:-1;;;6337:18:14;;;6330:44;6391:18;;4082:38:13::1;;;;;;;;;4135:12;1710:6:10::0;;4153:32:13::1;::::0;-1:-1:-1;;;;;1710:6:10;;;;4173:7:13;;4135:12;4153:32;4135:12;4153:32;4173:7;1710:6:10;4153:32:13::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4134:51;;;4204:7;4199:37;;4220:16;;-1:-1:-1::0;;;4220:16:13::1;;;;;;;;;;;4199:37;4255:38;::::0;6776:25:14;;;4281:1:13::1;::::0;4255:38:::1;::::0;6764:2:14;6749:18;4255:38:13::1;;;;;;;;3981:323;;3880:781:::0;:::o;3949:706::-:1;4427:30;::::0;-1:-1:-1;;;4427:30:13;;4451:4:::1;4427:30;::::0;::::1;4564:51:14::0;4382:12:13;;4360::::1;::::0;-1:-1:-1;;;;;4427:15:13;::::1;::::0;::::1;::::0;4537:18:14;;4427:30:13::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4409:48;;4489:1;4479:7;:11;4471:40;;;::::0;-1:-1:-1;;;4471:40:13;;7203:2:14;4471:40:13::1;::::0;::::1;7185:21:14::0;7242:2;7222:18;;;7215:30;-1:-1:-1;;;7261:18:14;;;7254:46;7317:18;;4471:40:13::1;7001:340:14::0;4471:40:13::1;4533:5;-1:-1:-1::0;;;;;4533:14:13::1;;4548:7;1684::10::0;1710:6;-1:-1:-1;;;;;1710:6:10;;1638:85;4548:7:13::1;4533:32;::::0;-1:-1:-1;;;;;;4533:32:13::1;::::0;;;;;;-1:-1:-1;;;;;7538:32:14;;;4533::13::1;::::0;::::1;7520:51:14::0;7587:18;;;7580:34;;;7493:18;;4533:32:13::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4525:60;;;::::0;-1:-1:-1;;;4525:60:13;;8109:2:14;4525:60:13::1;::::0;::::1;8091:21:14::0;8148:2;8128:18;;;8121:30;-1:-1:-1;;;8167:18:14;;;8160:45;8222:18;;4525:60:13::1;7907:339:14::0;4525:60:13::1;4622:12;-1:-1:-1::0;;;;;4604:40:13::1;;4636:7;4604:40;;;;6776:25:14::0;;6764:2;6749:18;;6630:177;3949:706:13::1;3880:781:::0;:::o;2293:101:10:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;1389:410:13:-;1531:13:10;:11;:13::i;:::-;2500:21:12::1;:19;:21::i;:::-;1585:7:13::2;:14;1568:6;:13;:31;1560:65;;;::::0;-1:-1:-1;;;1560:65:13;;8453:2:14;1560:65:13::2;::::0;::::2;8435:21:14::0;8492:2;8472:18;;;8465:30;-1:-1:-1;;;8511:18:14;;;8504:51;8572:18;;1560:65:13::2;8251:345:14::0;1560:65:13::2;1659:1;1643:6;:13;:17;1635:42;;;::::0;-1:-1:-1;;;1635:42:13;;8803:2:14;1635:42:13::2;::::0;::::2;8785:21:14::0;8842:2;8822:18;;;8815:30;-1:-1:-1;;;8861:18:14;;;8854:42;8913:18;;1635:42:13::2;8601:336:14::0;1635:42:13::2;1744:48;::::0;-1:-1:-1;;;1744:48:13;;-1:-1:-1;;;;;1744:5:13::2;:15;::::0;::::2;::::0;:48:::2;::::0;1760:4:::2;::::0;1766:6;;1774:7;;1783:8;;1744:48:::2;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;2542:20:12::1;1857:1:::0;3068:21;;2888:208;1869:1878:13;2126:10;-1:-1:-1;;;;;2148:5:13;2126:28;;2122:55;;2163:14;;-1:-1:-1;;;2163:14:13;;;;;;;;;;;2122:55;2251:12;2266:6;2273:1;2266:9;;;;;;;;:::i;:::-;;;;;;;2251:24;;2285:14;2302:7;2310:1;2302:10;;;;;;;;:::i;:::-;;;;;;;2285:27;;2322:17;2342:10;2353:1;2342:13;;;;;;;;:::i;:::-;;;;;;;;;;;2420:30;;-1:-1:-1;;;2420:30:13;;2444:4;2420:30;;;4564:51:14;2342:13:13;;-1:-1:-1;2396:21:13;;-1:-1:-1;;;;;2420:15:13;;;;;4537:18:14;;2420:30:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2526:39;;-1:-1:-1;;;2526:39:13;;614:42;2526:39;;;7520:51:14;7587:18;;;7580:34;;;2396:54:13;;-1:-1:-1;;;;;;2526:13:13;;;;;7493:18:14;;2526:39:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2518:67;;;;-1:-1:-1;;;2518:67:13;;11132:2:14;2518:67:13;;;11114:21:14;11171:2;11151:18;;;11144:30;-1:-1:-1;;;11190:18:14;;;11183:45;11245:18;;2518:67:13;10930:339:14;2518:67:13;2972:12;614:42;-1:-1:-1;;;;;2990:21:13;3012:8;2990:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2971:50;;;3036:7;3031:33;;3052:12;;-1:-1:-1;;;3052:12:13;;;;;;;;;;;3031:33;3134:30;;-1:-1:-1;;;3134:30:13;;3158:4;3134:30;;;4564:51:14;3111:20:13;;-1:-1:-1;;;;;3134:15:13;;;;;4537:18:14;;3134:30:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3111:53;-1:-1:-1;3252:6:13;3407:22;;;3403:55;;3438:20;;-1:-1:-1;;;3438:20:13;;;;;;;;;;;3403:55;3512:38;;-1:-1:-1;;;3512:38:13;;-1:-1:-1;;;;;3535:5:13;7538:32:14;;3512:38:13;;;7520:51:14;7587:18;;;7580:34;;;3512:14:13;;;;;7493:18:14;;3512:38:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3504:66;;;;-1:-1:-1;;;3504:66:13;;8109:2:14;3504:66:13;;;8091:21:14;8148:2;8128:18;;;8121:30;-1:-1:-1;;;8167:18:14;;;8160:45;8222:18;;3504:66:13;7907:339:14;3504:66:13;3635:14;3652:21;3667:6;3652:12;:21;:::i;:::-;3688:52;;;11909:25:14;;;3730:1:13;11965:2:14;11950:18;;11943:34;11993:18;;;11986:34;;;3635:38:13;;-1:-1:-1;;;;;;3688:52:13;;;;;11897:2:14;11882:18;3688:52:13;;;;;;;2053:1694;;;;;;;;1869:1878;;;;:::o;2543:215:10:-;1531:13;:11;:13::i;:::-;-1:-1:-1;;;;;2627:22:10;::::1;2623:91;;2672:31;::::0;-1:-1:-1;;;2672:31:10;;2700:1:::1;2672:31;::::0;::::1;4564:51:14::0;4537:18;;2672:31:10::1;4418:203:14::0;2623:91:10::1;2723:28;2742:8;2723:18;:28::i;1796:162::-:0;1684:7;1710:6;-1:-1:-1;;;;;1710:6:10;735:10:11;1855:23:10;1851:101;;1901:40;;-1:-1:-1;;;1901:40:10;;735:10:11;1901:40:10;;;4564:51:14;4537:18;;1901:40:10;4418:203:14;2912:187:10;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:10;;;-1:-1:-1;;;;;;3020:17:10;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;2575:307:12:-;1899:1;2702:7;;:18;2698:86;;2743:30;;-1:-1:-1;;;2743:30:12;;;;;;;;;;;2698:86;1899:1;2858:7;:17;2575:307::o;14:615:14:-;100:6;108;161:2;149:9;140:7;136:23;132:32;129:52;;;177:1;174;167:12;129:52;217:9;204:23;246:18;287:2;279:6;276:14;273:34;;;303:1;300;293:12;273:34;341:6;330:9;326:22;316:32;;386:7;379:4;375:2;371:13;367:27;357:55;;408:1;405;398:12;357:55;448:2;435:16;474:2;466:6;463:14;460:34;;;490:1;487;480:12;460:34;543:7;538:2;528:6;525:1;521:14;517:2;513:23;509:32;506:45;503:65;;;564:1;561;554:12;503:65;595:2;587:11;;;;;617:6;;-1:-1:-1;14:615:14;;-1:-1:-1;;;;14:615:14:o;634:131::-;-1:-1:-1;;;;;709:31:14;;699:42;;689:70;;755:1;752;745:12;770:247;829:6;882:2;870:9;861:7;857:23;853:32;850:52;;;898:1;895;888:12;850:52;937:9;924:23;956:31;981:5;956:31;:::i;:::-;1006:5;770:247;-1:-1:-1;;;770:247:14:o;1022:127::-;1083:10;1078:3;1074:20;1071:1;1064:31;1114:4;1111:1;1104:15;1138:4;1135:1;1128:15;1154:275;1225:2;1219:9;1290:2;1271:13;;-1:-1:-1;;1267:27:14;1255:40;;1325:18;1310:34;;1346:22;;;1307:62;1304:88;;;1372:18;;:::i;:::-;1408:2;1401:22;1154:275;;-1:-1:-1;1154:275:14:o;1434:191::-;1502:4;1535:18;1527:6;1524:30;1521:56;;;1557:18;;:::i;:::-;-1:-1:-1;1602:1:14;1598:14;1614:4;1594:25;;1434:191::o;1630:753::-;1692:5;1745:3;1738:4;1730:6;1726:17;1722:27;1712:55;;1763:1;1760;1753:12;1712:55;1799:6;1786:20;1825:4;1849:68;1865:51;1913:2;1865:51;:::i;:::-;1849:68;:::i;:::-;1951:15;;;2037:1;2033:10;;;;2021:23;;2017:32;;;1982:12;;;;2061:15;;;2058:35;;;2089:1;2086;2079:12;2058:35;2125:2;2117:6;2113:15;2137:217;2153:6;2148:3;2145:15;2137:217;;;2233:3;2220:17;2250:31;2275:5;2250:31;:::i;:::-;2294:18;;2332:12;;;;2170;;2137:217;;;-1:-1:-1;2372:5:14;1630:753;-1:-1:-1;;;;;;1630:753:14:o;2388:670::-;2442:5;2495:3;2488:4;2480:6;2476:17;2472:27;2462:55;;2513:1;2510;2503:12;2462:55;2549:6;2536:20;2575:4;2599:68;2615:51;2663:2;2615:51;:::i;2599:68::-;2701:15;;;2787:1;2783:10;;;;2771:23;;2767:32;;;2732:12;;;;2811:15;;;2808:35;;;2839:1;2836;2829:12;2808:35;2875:2;2867:6;2863:15;2887:142;2903:6;2898:3;2895:15;2887:142;;;2969:17;;2957:30;;3007:12;;;;2920;;2887:142;;3063:530;3105:5;3158:3;3151:4;3143:6;3139:17;3135:27;3125:55;;3176:1;3173;3166:12;3125:55;3212:6;3199:20;3238:18;3234:2;3231:26;3228:52;;;3260:18;;:::i;:::-;3304:55;3347:2;3328:13;;-1:-1:-1;;3324:27:14;3353:4;3320:38;3304:55;:::i;:::-;3384:2;3375:7;3368:19;3430:3;3423:4;3418:2;3410:6;3406:15;3402:26;3399:35;3396:55;;;3447:1;3444;3437:12;3396:55;3512:2;3505:4;3497:6;3493:17;3486:4;3477:7;3473:18;3460:55;3560:1;3535:16;;;3553:4;3531:27;3524:38;;;;3539:7;3063:530;-1:-1:-1;;;3063:530:14:o;3598:815::-;3748:6;3756;3764;3817:2;3805:9;3796:7;3792:23;3788:32;3785:52;;;3833:1;3830;3823:12;3785:52;3873:9;3860:23;3902:18;3943:2;3935:6;3932:14;3929:34;;;3959:1;3956;3949:12;3929:34;3982:69;4043:7;4034:6;4023:9;4019:22;3982:69;:::i;:::-;3972:79;;4104:2;4093:9;4089:18;4076:32;4060:48;;4133:2;4123:8;4120:16;4117:36;;;4149:1;4146;4139:12;4117:36;4172:63;4227:7;4216:8;4205:9;4201:24;4172:63;:::i;:::-;4162:73;;4288:2;4277:9;4273:18;4260:32;4244:48;;4317:2;4307:8;4304:16;4301:36;;;4333:1;4330;4323:12;4301:36;;4356:51;4399:7;4388:8;4377:9;4373:24;4356:51;:::i;:::-;4346:61;;;3598:815;;;;;:::o;4626:1042::-;4810:6;4818;4826;4834;4887:3;4875:9;4866:7;4862:23;4858:33;4855:53;;;4904:1;4901;4894:12;4855:53;4944:9;4931:23;4973:18;5014:2;5006:6;5003:14;5000:34;;;5030:1;5027;5020:12;5000:34;5053:69;5114:7;5105:6;5094:9;5090:22;5053:69;:::i;:::-;5043:79;;5175:2;5164:9;5160:18;5147:32;5131:48;;5204:2;5194:8;5191:16;5188:36;;;5220:1;5217;5210:12;5188:36;5243:63;5298:7;5287:8;5276:9;5272:24;5243:63;:::i;:::-;5233:73;;5359:2;5348:9;5344:18;5331:32;5315:48;;5388:2;5378:8;5375:16;5372:36;;;5404:1;5401;5394:12;5372:36;5427:63;5482:7;5471:8;5460:9;5456:24;5427:63;:::i;:::-;5417:73;;5543:2;5532:9;5528:18;5515:32;5499:48;;5572:2;5562:8;5559:16;5556:36;;;5588:1;5585;5578:12;5556:36;;5611:51;5654:7;5643:8;5632:9;5628:24;5611:51;:::i;:::-;5601:61;;;4626:1042;;;;;;;:::o;5673:127::-;5734:10;5729:3;5725:20;5722:1;5715:31;5765:4;5762:1;5755:15;5789:4;5786:1;5779:15;5805:127;5866:10;5861:3;5857:20;5854:1;5847:31;5897:4;5894:1;5887:15;5921:4;5918:1;5911:15;5937:135;5976:3;5997:17;;;5994:43;;6017:18;;:::i;:::-;-1:-1:-1;6064:1:14;6053:13;;5937:135::o;6812:184::-;6882:6;6935:2;6923:9;6914:7;6910:23;6906:32;6903:52;;;6951:1;6948;6941:12;6903:52;-1:-1:-1;6974:16:14;;6812:184;-1:-1:-1;6812:184:14:o;7625:277::-;7692:6;7745:2;7733:9;7724:7;7720:23;7716:32;7713:52;;;7761:1;7758;7751:12;7713:52;7793:9;7787:16;7846:5;7839:13;7832:21;7825:5;7822:32;7812:60;;7868:1;7865;7858:12;8942:250;9027:1;9037:113;9051:6;9048:1;9045:13;9037:113;;;9127:11;;;9121:18;9108:11;;;9101:39;9073:2;9066:10;9037:113;;;-1:-1:-1;;9184:1:14;9166:16;;9159:27;8942:250::o;9197:270::-;9238:3;9276:5;9270:12;9303:6;9298:3;9291:19;9319:76;9388:6;9381:4;9376:3;9372:14;9365:4;9358:5;9354:16;9319:76;:::i;:::-;9449:2;9428:15;-1:-1:-1;;9424:29:14;9415:39;;;;9456:4;9411:50;;9197:270;-1:-1:-1;;9197:270:14:o;9472:1453::-;-1:-1:-1;;;;;9926:15:14;;;9908:34;;9857:3;9961:2;9979:18;;;9972:31;;;10052:13;;9842:19;;;10074:22;;;9809:4;;10154:15;;;;9880:19;;9961:2;9888:3;10112:19;;;9809:4;10197:178;10211:6;10208:1;10205:13;10197:178;;;10276:13;;10272:22;;10260:35;;10350:15;;;;10315:12;;;;10233:1;10226:9;10197:178;;;-1:-1:-1;;10411:19:14;;;10406:2;10391:18;;10384:47;10481:13;;10503:21;;;10542:12;;;;-1:-1:-1;10481:13:14;-1:-1:-1;10579:15:14;;;10614:1;10624:189;10640:8;10635:3;10632:17;10624:189;;;10709:15;;10695:30;;10747:14;;;;10786:17;;;;10668:1;10659:11;10624:189;;;10628:3;;;;10860:9;10853:5;10849:21;10844:2;10833:9;10829:18;10822:49;10888:31;10913:5;10905:6;10888:31;:::i;:::-;10880:39;9472:1453;-1:-1:-1;;;;;;;9472:1453:14:o;11274:287::-;11403:3;11441:6;11435:13;11457:66;11516:6;11511:3;11504:4;11496:6;11492:17;11457:66;:::i;:::-;11539:16;;;;;11274:287;-1:-1:-1;;11274:287:14:o;11566:128::-;11633:9;;;11654:11;;;11651:37;;;11668:18;;:::i;:::-;11566:128;;;;:::o"},"methodIdentifiers":{"PERMIT2_CONTRACT()":"f840f3fc","emergencyWithdrawMultiple(address[])":"12867764","executeFlashLoan(address[],uint256[],bytes)":"76ec49ba","owner()":"8da5cb5b","receiveFlashLoan(address[],uint256[],uint256[],bytes)":"f04f2707","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b","withdraw(address)":"51cff8d9"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientProfit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"name\":\"FlashLoanExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERMIT2_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"emergencyWithdrawMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"name\":\"executeFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"receiveFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"emergencyWithdrawMultiple(address[])\":{\"params\":{\"tokens\":\"\\u30c8\\u30fc\\u30af\\u30f3\\u30a2\\u30c9\\u30ec\\u30b9\\u306e\\u914d\\u5217\"}},\"executeFlashLoan(address[],uint256[],bytes)\":{\"params\":{\"amounts\":\"\\u501f\\u308a\\u308b\\u91cf\\u306e\\u914d\\u5217\",\"swapData\":\"0x Protocol\\u306e\\u30b9\\u30ef\\u30c3\\u30d7\\u30c7\\u30fc\\u30bf\",\"tokens\":\"\\u501f\\u308a\\u308b\\u30c8\\u30fc\\u30af\\u30f3\\u306e\\u914d\\u5217\\uff08\\u901a\\u5e38\\u306f1\\u3064\\u306e\\u30c8\\u30fc\\u30af\\u30f3\\uff09\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address)\":{\"params\":{\"tokenAddress\":\"\\u5f15\\u304d\\u51fa\\u3059\\u30c8\\u30fc\\u30af\\u30f3\\u306e\\u30a2\\u30c9\\u30ec\\u30b9\\uff080x0\\u3067ETH\\uff09\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"emergencyWithdrawMultiple(address[])\":{\"notice\":\"\\u8907\\u6570\\u30c8\\u30fc\\u30af\\u30f3\\u306e\\u4e00\\u62ec\\u5f15\\u304d\\u51fa\\u3057\"},\"executeFlashLoan(address[],uint256[],bytes)\":{\"notice\":\"\\u30d5\\u30e9\\u30c3\\u30b7\\u30e5\\u30ed\\u30fc\\u30f3\\u3092\\u5b9f\\u884c\"},\"receiveFlashLoan(address[],uint256[],uint256[],bytes)\":{\"notice\":\"Balancer\\u304c\\u547c\\u3073\\u51fa\\u3059\\u30b3\\u30fc\\u30eb\\u30d0\\u30c3\\u30af\\u95a2\\u6570\"},\"withdraw(address)\":{\"notice\":\"\\u30c8\\u30fc\\u30af\\u30f3\\u3092\\u5f15\\u304d\\u51fa\\u3059\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BalancerFlashLoanArb.sol\":\"BalancerFlashLoanArb\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0x2d45ea7c14dc950acf5917377d9eb67d2b1d9f8b8d81fa60eeaad345cf257655\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c387331bc3da670d45d54af96b067ea6fce6f3e0e5fac53b86fba73d5e9e874a\",\"dweb:/ipfs/QmYkY4d2TDA4BXpjz1RPQn8rdWvZVTi3pSBbiUSaPFKwtM\"]},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol\":{\"keccak256\":\"0x571907ff5a68a10937b13e0828dd78bf9508f6e74eaafe7faf525453160c3627\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://afb73b213075954086eb7fa4eb4fac4962b779c8dd8c9c72902336d64c13210e\",\"dweb:/ipfs/QmNWFPnoPxo8ToVHrqXaQQF8RPYeNNhV2eZN9EwFS3iHpz\"]},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol\":{\"keccak256\":\"0x7d98e4751329dd9effc016cbc5acdf6399d3592407b9d3e28b38c10c621e56a3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://a70c4c16829f31c75dd0a3987137ed1572a0343ff933dcdcfbef17d5d63307ae\",\"dweb:/ipfs/QmSGBafawe525NbvK8LVN1rsD2yJxaS83QoTNC84evwM2E\"]},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol\":{\"keccak256\":\"0x41c26d92fde92c927352c447ff80e3b2216d076662f2b222b735e4c865a481dc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://291a4b4f141ea187a61c3bb1ab16b370012e7e80ddc045671015ab2bfaf3c52c\",\"dweb:/ipfs/QmXvvVdfZC3pAqLst3bW9Fbj8mS9y1t1k7Zqr9BXuKdUHP\"]},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\":{\"keccak256\":\"0x3c415102b8b53a3efe0209b7fa4fd052a48b35a1df99e1b37572597d25030249\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8aac0d9f5ff03e0edeb07e1c400b78edea5948acff7e113ba52fd32f86cad72d\",\"dweb:/ipfs/Qmbh6C53fCjvjoHEVZHNadpRq5KZJzfHpDeR3qYfPgKvZt\"]},\"@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol\":{\"keccak256\":\"0x780769a0bd8655d8a05a75b062b32a65b775b9deb923b2e8f42f57a0ee263a2d\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b63d22729102954a657432d81b31764e6dbdc7216a6deb991499a73dc4ebbd7b\",\"dweb:/ipfs/QmWRyByegCCJr37yesLi7urtzNk2BBiDEjzbkPpV8TKy1X\"]},\"@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x1407e18b806b109e6a878697d2942eeb17bfc6cc601da725941658b90dc9dcc6\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://e2695f5ae435de2de9fa9dc3b165f05b5bf876217aba0e4bcbd20943a23fc831\",\"dweb:/ipfs/QmYTmazrQQqjb4znByMiUUviqbXKTebrhpP8MDERZ5PLxz\"]},\"@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol\":{\"keccak256\":\"0xadcf6e9f8677de9ec51a1bbb419da349b7c0c17af8b8cddad85ee0e80107036e\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://e9b30c1b15e3d0990a4a343fac14d2263c4bae4c3bdbeb38489103b4f6f66c39\",\"dweb:/ipfs/QmeQjBDidkLAoq4nknwPPPmunSTvQEZ9shaAhPiJAPmbk6\"]},\"@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol\":{\"keccak256\":\"0xe18a4e04a4a4e828c81548cc50d9d8ab6461dafbe88929c0342fa2b6c08e0d76\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://7056ea1221db4eacc3e263ea8b9d741c11b1871f745169a39c6f926dab9c403f\",\"dweb:/ipfs/QmabGZff9x43RJUororFfmMzocB2UuZDDBMhhfELEeSJue\"]},\"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\":{\"keccak256\":\"0x63425148b27356cee63cf843ef8918d3ff6cdd8d5c00371326bca8b4331b773c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6764d2a22a2e23de5235ceb0d06ebb9006f694c59547b8dc82dbc2e215d1f230\",\"dweb:/ipfs/Qmb6BQBgUQno6RAqPPR8qeC3smNEC3Bm6y8ZcWEWZKAfhF\"]},\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3cf0c69ab827e3251db9ee6a50647d62c90ba580a4d7bbff21f2bea39e7b2f4a\",\"dweb:/ipfs/QmZiKwtKU1SBX4RGfQtY7PZfiapbbu6SZ9vizGQD9UHjRA\"]},\"contracts/BalancerFlashLoanArb.sol\":{\"keccak256\":\"0x13a213385b223d3b39d32ce03275ce856c2798e1c7bab6d5b5b4baa7586f1a66\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40f3c2bfa8e5b3fd65c9226004bb31bb919670867299730ec06d0e2bb5d22f3a\",\"dweb:/ipfs/QmY74jiysKfpYJ9G9TXJHdvXBxgvYXRp9tzMKR8QLBC1MT\"]}},\"version\":1}"}}}}}