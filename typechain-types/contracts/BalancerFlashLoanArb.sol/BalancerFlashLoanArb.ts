/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface BalancerFlashLoanArbInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "emergencyWithdrawMultiple"
      | "executeFlashLoan"
      | "getETHPriceUSD"
      | "getGasCostUSD"
      | "owner"
      | "pause"
      | "paused"
      | "pokeFallbackPrice"
      | "receiveFlashLoan"
      | "setTrustedSpender"
      | "trustedSpenders"
      | "unpause"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EmergencyWithdraw"
      | "FallbackPriceUpdated"
      | "FlashLoanExecuted"
      | "OwnershipTransferred"
      | "Paused"
      | "SwapExecuted"
      | "TrustedSpenderUpdated"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "emergencyWithdrawMultiple",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeFlashLoan",
    values: [AddressLike[], BigNumberish[], BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getETHPriceUSD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostUSD",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pokeFallbackPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveFlashLoan",
    values: [AddressLike[], BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedSpender",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedSpenders",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "emergencyWithdrawMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeFlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getETHPriceUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pokeFallbackPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveFlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedSpender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedSpenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace EmergencyWithdrawEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FallbackPriceUpdatedEvent {
  export type InputTuple = [newPrice: BigNumberish, timestamp: BigNumberish];
  export type OutputTuple = [newPrice: bigint, timestamp: bigint];
  export interface OutputObject {
    newPrice: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FlashLoanExecutedEvent {
  export type InputTuple = [
    token: AddressLike,
    amount: BigNumberish,
    feeAmount: BigNumberish,
    profit: BigNumberish,
    minProfitBps: BigNumberish,
    blockNumber: BigNumberish,
    gasPrice: BigNumberish,
    baseFee: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    amount: bigint,
    feeAmount: bigint,
    profit: bigint,
    minProfitBps: bigint,
    blockNumber: bigint,
    gasPrice: bigint,
    baseFee: bigint
  ];
  export interface OutputObject {
    token: string;
    amount: bigint;
    feeAmount: bigint;
    profit: bigint;
    minProfitBps: bigint;
    blockNumber: bigint;
    gasPrice: bigint;
    baseFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapExecutedEvent {
  export type InputTuple = [
    srcToken: AddressLike,
    dstToken: AddressLike,
    inAmount: BigNumberish,
    outAmount: BigNumberish,
    target: AddressLike
  ];
  export type OutputTuple = [
    srcToken: string,
    dstToken: string,
    inAmount: bigint,
    outAmount: bigint,
    target: string
  ];
  export interface OutputObject {
    srcToken: string;
    dstToken: string;
    inAmount: bigint;
    outAmount: bigint;
    target: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrustedSpenderUpdatedEvent {
  export type InputTuple = [spender: AddressLike, trusted: boolean];
  export type OutputTuple = [spender: string, trusted: boolean];
  export interface OutputObject {
    spender: string;
    trusted: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BalancerFlashLoanArb extends BaseContract {
  connect(runner?: ContractRunner | null): BalancerFlashLoanArb;
  waitForDeployment(): Promise<this>;

  interface: BalancerFlashLoanArbInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  emergencyWithdrawMultiple: TypedContractMethod<
    [tokens: AddressLike[]],
    [void],
    "nonpayable"
  >;

  executeFlashLoan: TypedContractMethod<
    [
      tokens: AddressLike[],
      amounts: BigNumberish[],
      minProfitBps: BigNumberish,
      swapData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getETHPriceUSD: TypedContractMethod<[], [bigint], "nonpayable">;

  getGasCostUSD: TypedContractMethod<
    [gasUsed: BigNumberish, gasPrice: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pokeFallbackPrice: TypedContractMethod<
    [newPriceUSD: BigNumberish],
    [void],
    "nonpayable"
  >;

  receiveFlashLoan: TypedContractMethod<
    [
      tokens: AddressLike[],
      amounts: BigNumberish[],
      feeAmounts: BigNumberish[],
      userData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setTrustedSpender: TypedContractMethod<
    [spender: AddressLike, trusted: boolean],
    [void],
    "nonpayable"
  >;

  trustedSpenders: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  withdraw: TypedContractMethod<
    [tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "emergencyWithdrawMultiple"
  ): TypedContractMethod<[tokens: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeFlashLoan"
  ): TypedContractMethod<
    [
      tokens: AddressLike[],
      amounts: BigNumberish[],
      minProfitBps: BigNumberish,
      swapData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getETHPriceUSD"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "getGasCostUSD"
  ): TypedContractMethod<
    [gasUsed: BigNumberish, gasPrice: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pokeFallbackPrice"
  ): TypedContractMethod<[newPriceUSD: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "receiveFlashLoan"
  ): TypedContractMethod<
    [
      tokens: AddressLike[],
      amounts: BigNumberish[],
      feeAmounts: BigNumberish[],
      userData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTrustedSpender"
  ): TypedContractMethod<
    [spender: AddressLike, trusted: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "trustedSpenders"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[tokenAddress: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "EmergencyWithdraw"
  ): TypedContractEvent<
    EmergencyWithdrawEvent.InputTuple,
    EmergencyWithdrawEvent.OutputTuple,
    EmergencyWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "FallbackPriceUpdated"
  ): TypedContractEvent<
    FallbackPriceUpdatedEvent.InputTuple,
    FallbackPriceUpdatedEvent.OutputTuple,
    FallbackPriceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FlashLoanExecuted"
  ): TypedContractEvent<
    FlashLoanExecutedEvent.InputTuple,
    FlashLoanExecutedEvent.OutputTuple,
    FlashLoanExecutedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "SwapExecuted"
  ): TypedContractEvent<
    SwapExecutedEvent.InputTuple,
    SwapExecutedEvent.OutputTuple,
    SwapExecutedEvent.OutputObject
  >;
  getEvent(
    key: "TrustedSpenderUpdated"
  ): TypedContractEvent<
    TrustedSpenderUpdatedEvent.InputTuple,
    TrustedSpenderUpdatedEvent.OutputTuple,
    TrustedSpenderUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "EmergencyWithdraw(address,uint256)": TypedContractEvent<
      EmergencyWithdrawEvent.InputTuple,
      EmergencyWithdrawEvent.OutputTuple,
      EmergencyWithdrawEvent.OutputObject
    >;
    EmergencyWithdraw: TypedContractEvent<
      EmergencyWithdrawEvent.InputTuple,
      EmergencyWithdrawEvent.OutputTuple,
      EmergencyWithdrawEvent.OutputObject
    >;

    "FallbackPriceUpdated(uint256,uint256)": TypedContractEvent<
      FallbackPriceUpdatedEvent.InputTuple,
      FallbackPriceUpdatedEvent.OutputTuple,
      FallbackPriceUpdatedEvent.OutputObject
    >;
    FallbackPriceUpdated: TypedContractEvent<
      FallbackPriceUpdatedEvent.InputTuple,
      FallbackPriceUpdatedEvent.OutputTuple,
      FallbackPriceUpdatedEvent.OutputObject
    >;

    "FlashLoanExecuted(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      FlashLoanExecutedEvent.InputTuple,
      FlashLoanExecutedEvent.OutputTuple,
      FlashLoanExecutedEvent.OutputObject
    >;
    FlashLoanExecuted: TypedContractEvent<
      FlashLoanExecutedEvent.InputTuple,
      FlashLoanExecutedEvent.OutputTuple,
      FlashLoanExecutedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "SwapExecuted(address,address,uint256,uint256,address)": TypedContractEvent<
      SwapExecutedEvent.InputTuple,
      SwapExecutedEvent.OutputTuple,
      SwapExecutedEvent.OutputObject
    >;
    SwapExecuted: TypedContractEvent<
      SwapExecutedEvent.InputTuple,
      SwapExecutedEvent.OutputTuple,
      SwapExecutedEvent.OutputObject
    >;

    "TrustedSpenderUpdated(address,bool)": TypedContractEvent<
      TrustedSpenderUpdatedEvent.InputTuple,
      TrustedSpenderUpdatedEvent.OutputTuple,
      TrustedSpenderUpdatedEvent.OutputObject
    >;
    TrustedSpenderUpdated: TypedContractEvent<
      TrustedSpenderUpdatedEvent.InputTuple,
      TrustedSpenderUpdatedEvent.OutputTuple,
      TrustedSpenderUpdatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
